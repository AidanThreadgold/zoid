{"version":3,"sources":["webpack://zoid/webpack/universalModuleDefinition","webpack://zoid/webpack/bootstrap","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://zoid/./node_modules/zalgo-promise/src/utils.js","webpack://zoid/./node_modules/zalgo-promise/src/exceptions.js","webpack://zoid/./node_modules/zalgo-promise/src/flush.js","webpack://zoid/./node_modules/zalgo-promise/src/promise.js","webpack://zoid/./node_modules/cross-domain-utils/src/util.js","webpack://zoid/./node_modules/cross-domain-utils/src/constants.js","webpack://zoid/./node_modules/cross-domain-utils/src/utils.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://zoid/./node_modules/belter/src/util.js","webpack://zoid/./node_modules/belter/src/dom.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://zoid/./node_modules/belter/src/css.js","webpack://zoid/./node_modules/post-robot/src/conf/config.js","webpack://zoid/./node_modules/post-robot/src/conf/constants.js","webpack://zoid/./node_modules/post-robot/src/global.js","webpack://zoid/./node_modules/post-robot/src/lib/hello.js","webpack://zoid/./node_modules/post-robot/src/lib/windows.js","webpack://zoid/./node_modules/universal-serialize/src/constants.js","webpack://zoid/./node_modules/universal-serialize/src/common.js","webpack://zoid/./node_modules/universal-serialize/src/serialize.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/function.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/error.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/promise.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/regex.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/date.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/array.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/object.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/string.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/number.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/null.js","webpack://zoid/./node_modules/universal-serialize/src/deserialize.js","webpack://zoid/./node_modules/post-robot/src/bridge/common.js","webpack://zoid/./node_modules/post-robot/src/bridge/parent.js","webpack://zoid/./node_modules/post-robot/src/bridge/setup.js","webpack://zoid/./node_modules/post-robot/src/bridge/bridge.js","webpack://zoid/./node_modules/post-robot/src/bridge/child.js","webpack://zoid/./node_modules/post-robot/src/serialize/window.js","webpack://zoid/./node_modules/post-robot/src/serialize/function.js","webpack://zoid/./node_modules/post-robot/src/serialize/serialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/promise.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/strategies.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/index.js","webpack://zoid/./node_modules/post-robot/src/lib/compat.js","webpack://zoid/./node_modules/post-robot/src/drivers/listeners.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/types.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/index.js","webpack://zoid/./node_modules/post-robot/src/public/on.js","webpack://zoid/./node_modules/post-robot/src/public/send.js","webpack://zoid/./node_modules/post-robot/src/index.js","webpack://zoid/./node_modules/post-robot/src/setup.js","webpack://zoid/./node_modules/post-robot/src/clean.js","webpack://zoid/./src/lib/global.js","webpack://zoid/./src/lib/serialize.js","webpack://zoid/./src/constants.js","webpack://zoid/./src/child/props.js","webpack://zoid/./src/child/window.js","webpack://zoid/./src/child/index.js","webpack://zoid/./src/parent/drivers.js","webpack://zoid/./src/parent/props.js","webpack://zoid/./src/parent/index.js","webpack://zoid/./src/delegate/index.js","webpack://zoid/./src/component/templates/container.js","webpack://zoid/./src/component/templates/component.js","webpack://zoid/./src/component/props.js","webpack://zoid/./src/component/component.js","webpack://zoid/./src/component/validate.js","webpack://zoid/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","isPromise","item","Promise","window","Window","constructor","toString","then","err","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","Error","dispatch","setTimeout","indexOf","push","j","dispatchPossiblyUnhandledError","asyncReject","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","all","promises","count","results","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","isRegex","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","location","protocol","getParent","parent","getOpener","opener","canReadFromWindow","getActualDomain","host","getDomain","domain","mockDomain","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","getParents","getFrames","frames","len","frame","getAllChildFrames","getTop","top","getAllFramesInWindow","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getUserAgent","navigator","mockUserAgent","userAgent","getFrameByName","winFrames","childFrame","isOpener","getAncestor","anyMatch","collection1","collection2","item1","getDistanceFromTop","distance","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","onCloseWindow","callback","maxtime","Infinity","check","isWindow","obj","__cross_domain_utils_window_check__","normalizeMockUrl","closeWindow","close","objectIDs","awaitFrameLoadPromises","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","base64encode","str","btoa","encodeURIComponent","replace","p1","String","fromCharCode","parseInt","Buffer","from","uniqueID","chars","charAt","floor","Date","toISOString","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","memoizePromise","cache","memoizedPromiseFunction","reset","inlineMemoize","logic","__inline_memoize_cache__","noop","once","called","stringifyError","level","newErr","extend","safeInterval","loop","arrayFrom","isDefined","cleanup","tasks","cleaned","register","task","pop","assertExists","thing","isDocumentReady","document","body","readyState","urlEncode","waitForDocumentReady","interval","setInterval","clearInterval","parseQuery","queryString","params","pair","decodeURIComponent","extendQuery","originalQuery","props","filter","appendChild","container","isElement","element","Element","nodeType","style","getElementSafe","id","querySelector","elementReady","el","PopupOpenError","awaitFrameLoad","addEventListener","cleanIframes","linkFrameWindow","awaitFrameWindow","loadedFrame","iframe","options","tag","styleText","createElement","class","className","setAttribute","attributes","styleSheet","cssText","createTextNode","html","innerHTML","allowTransparency","backgroundColor","border","isIE","hasAttribute","getElement","event","removeEventListener","destroyElement","removeChild","isElementClosed","onResize","width","height","currentWidth","offsetWidth","currentHeight","offsetHeight","observer","newWidth","newHeight","ResizeObserver","observe","MutationObserver","childList","subtree","characterData","disconnect","isPerc","test","isPx","toNum","toPx","toCSS","normalizeDimension","dim","max","num","perc","percOf","prototype","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","BRIDGE_NAME_PREFIX","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","getHelloPromise","sayHello","send","instanceID","data","getWindowInstanceID","awaitWindowHello","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","needsBridgeForBrowser","needsBridgeForWin","needsBridgeForDomain","needsBridge","getBridgeName","sanitizedDomain","isBridge","documentBodyReady","registerRemoteWindow","findRemoteWindow","remoteWinPromise","registerRemoteSendMessage","sendMessage","remoteWin","remoteDomain","fireAndForget","rejectRemoteSendMessage","linkWindow","popupWindowsByName","popupWindowsByWin","winName","details","setupBridge","windowOpen","on","receiveMessage","open","last","bridgePromise","bridge","winDetails","listenForOpenTunnel","openTunnelToParent","canary","tunnelWindows","parentWindow","cleanTunnelWindows","addTunnelWindow","tunnelWindow","setupOpenTunnelToParent","openTunnelToOpener","cleanupProxyWindows","idToProxyWindow","shouldClean","getSerializedWindow","windowName","getName","focus","isClosed","setLocation","href","setName","frameElement","ProxyWindow","serializedWindow","actualWindow","isProxyWindow","actualWindowPromise","setWindow","getType","isPopup","isIframe","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","realWin","proxyWindow","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","listenForFunctionCalls","__id__","__name__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","deserializePromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","serializedMessage","strategies","errors","strategyName","dom","forEach","postMessage","messagingChild","messagingParent","sendBridgeMessage","foreignGlobal","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","RECEIVE_MESSAGE_TYPES","sendResponse","ack","response","pathname","handleError","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","existingListener","regexListeners","regexListener","strDomain","errorHandler","responseTimeout","childTimeout","validateOptions","actualParent","isAncestor","normalizeDomain","targetDomain","logName","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","internalSerializeMessage","internalDeserializeMessage","cleanUpWindow","getProxyObject","openBridge","bridges","bridgeFrames","src","openBridgeFrame","linkUrl","hasBridge","destroyBridges","ZOID","POST_MESSAGE","PROP_TYPE","PROP_SERIALIZATION","DOTIFY","BASE64","CONTEXT","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","EVENT","RENDER","RENDERED","DISPLAY","CLOSE","PROPS","RESIZE","normalizeChildProp","component","helpers","prop","getPropDefinition","childDecorate","parseChildWindowName","zoidcomp","encodedPayload","atob","charCodeAt","base64decode","getChildPayload","ChildComponent","parentDomain","parentComponentWindow","onPropHandlers","autoResize","childPayload","__ZOID__","version","getParentComponentWindow","checkParentDomain","initialProps","getPropsByRef","setProps","watchForClose","init","buildExports","watchForResize","getHelpers","resize","onProps","getParentDomain","allowedParentDomains","ref","getNthParent","ancestor","windows","getProps","isUpdate","existingProps","sameDomain","alias","getPropNames","normalizeChildProps","checkClose","destroy","getAutoResize","updateProps","RENDER_DRIVERS","getQueryParam","queryParam","getQueryValue","queryValue","openOnClick","openFrame","title","proxyFrame","frameWatcher","clean","openPrerenderFrame","openPrerender","proxyWin","proxyPrerenderFrame","prerenderFrame","prerenderFrameWindow","delegate","dimensions","left","outerWidth","round","screenX","screen","outerHeight","screenY","status","toolbar","menubar","resizable","scrollbars","popup","ParentComponent","driver","initPromise","handledErrors","state","setupEvents","registerActiveComponent","destroyActiveComponent","watchForUnload","triggered","eventName","handlerList","trigger","triggerOnce","onRender","onDisplay","onRendered","onClose","render","log","childDomain","getChildDomain","checkAllowRender","buildUrl","getProxyContainer","renderContainer","proxyContainer","setState","setProxyWin","prerender","proxyPrerenderWin","buildWindowName","setWindowName","loadUrl","runTimeout","containerElement","buildChildPayload","getPropsRef","getPropsForChild","propRef","getWindowRef","buildParentExports","validate","inputProps","propNames","aliases","propDef","default","decorate","required","extendProps","propsDef","builtinProps","serialization","dotify","prefix","newobj","every","dotkey","query","originalUrl","originalHash","hashString","extendUrl","getUrl","sendToChild","windowProp","propName","allowDelegate","overridesPromise","overrides","unloadWindowListener","initChild","secondClosed","prerenderTemplate","prerenderWindow","isBlankDomain","renderTemplate","tagName","children","writeElementToWindow","renderer","innerContainer","containerTemplate","bridgeUrl","getBridgeUrl","bridgeDomain","DelegateComponent","watchForSourceClose","getDelegate","getOverrides","closeSourceWindowListener","CLASS","VISIBLE","INVISIBLE","defaultContainerTemplate","div","cspNonce","classList","add","remove","defaultPrerenderTemplate","spinner","defaultNoop","decorateOnce","Component","defaultContext","driverCache","xprops","logger","PROP_TYPE_LIST","validatePropDefinitions","components","debug","info","warn","registerChild","listenDelegate","dep","isChild","canRenderTo","payload","getDefaultContainer","getDefaultContext","renderTo","instance","activeComponents","initialized","setupGlobalReceiveMessage","sourceElement","originalEvent","messageListener","initHello","destroyAll","destroyComponents","responseListeners","cancelResponseListeners"],"mappings":"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","file":"zoid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"zoid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zoid\"] = factory();\n\telse\n\t\troot[\"zoid\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        }));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : Array<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\nexport function memoize<A, R, F : (...args : Array<A>) => R, X : { (...args : Array<A>) : R, displayName : string, reset : () => void }>(method : F, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : X {\n    let cacheMap = new WeakMap();\n\n    // $FlowFixMe\n    let memoizedFunction : X = function memoizedFunction(...args : Array<A>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n                            \nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        // eslint-disable-next-line const-immutable/no-mutation\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n\n    if (!enablePerformance()) {\n        return;\n    }\n\n    if (!window.performance || typeof window.performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = window.performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n\nexport function isPerc(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+%$/).test(str);\n}\n\nexport function isPx(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+px$/).test(str);\n}\n\nexport function toNum(val : string | number) : number {\n\n    if (typeof val === 'number') {\n        return val;\n    }\n\n    let match = val.match(/^([0-9]+)(px|%)$/);\n\n    if (!match) {\n        throw new Error(`Could not match css value from ${ val }`);\n    }\n\n    return parseInt(match[1], 10);\n}\n\nexport function toPx(val : number | string) : string {\n    return `${ toNum(val) }px`;\n}\n\nexport function toCSS(val : number | string) : string {\n\n    if (typeof val === 'number') {\n        return toPx(val);\n    }\n\n    return isPerc(val) ? val : toPx(val);\n}\n\nexport function percOf(num : number, perc : string) : number {\n    return parseInt(num * toNum(perc)  / 100, 10);\n}\n\nexport function normalizeDimension(dim : string | number, max : number) : number {\n    if (typeof dim === 'number') {\n        return dim;\n    } else if (isPerc(dim)) {\n        return percOf(max, dim);\n    } else if (isPx(dim)) {\n        return toNum(dim);\n    } else {\n        throw new Error(`Can not normalize dimension: ${ dim }`);\n    }\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\n// $FlowFixMe\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, getFrameByName, isWindowClosed, getDomainFromUrl, normalizeMockUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { BRIDGE_TIMEOUT, MESSAGE_NAME } from '../conf';\nimport { awaitWindowHello } from '../lib';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { getBridgeName, documentBodyReady, registerRemoteSendMessage, registerRemoteWindow } from './common';\n\nexport function listenForOpenTunnel({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n\n    on(MESSAGE_NAME.OPEN_TUNNEL, ({ source, origin, data }) => {\n        const bridgePromise = globalStore('bridges').get(origin);\n\n        if (!bridgePromise) {\n            throw new Error(`Can not find bridge promise for domain ${ origin }`);\n        }\n\n        return bridgePromise.then(bridge => {\n\n            // $FlowFixMe\n            if (source !== bridge) {\n                // $FlowFixMe\n                throw new Error(`Message source does not matched registered bridge for domain ${ origin }`);\n            }\n\n            if (!data.name) {\n                throw new Error(`Register window expected to be passed window name`);\n            }\n\n            if (!data.sendMessage) {\n                throw new Error(`Register window expected to be passed sendMessage method`);\n            }\n\n            if (!popupWindowsByName.has(data.name)) {\n                throw new Error(`Window with name ${ data.name } does not exist, or was not opened by this window`);\n            }\n\n            // $FlowFixMe\n            if (!popupWindowsByName.get(data.name).domain) {\n                throw new Error(`We do not have a registered domain for window ${ data.name }`);\n            }\n\n            // $FlowFixMe\n            if (popupWindowsByName.get(data.name).domain !== origin) {\n                // $FlowFixMe\n                throw new Error(`Message origin ${ origin } does not matched registered window origin ${ popupWindowsByName.get(data.name).domain }`);\n            }\n\n            // $FlowFixMe\n            registerRemoteSendMessage(popupWindowsByName.get(data.name).win, origin, data.sendMessage);\n\n            return {\n                sendMessage(message) {\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    const winDetails = popupWindowsByName.get(data.name);\n\n                    if (!winDetails) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: winDetails.domain,\n                            source: winDetails.win\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n            };\n        });\n    });\n}\n\nfunction openBridgeFrame(name : string, url : string) : HTMLIFrameElement {\n\n    const iframe = document.createElement(`iframe`);\n\n    iframe.setAttribute(`name`, name);\n    iframe.setAttribute(`id`,   name);\n\n    iframe.setAttribute(`style`, `display: none; margin: 0; padding: 0; border: 0px none; overflow: hidden;`);\n    iframe.setAttribute(`frameborder`, `0`);\n    iframe.setAttribute(`border`, `0`);\n    iframe.setAttribute(`scrolling`, `no`);\n    iframe.setAttribute(`allowTransparency`, `true`);\n\n    iframe.setAttribute(`tabindex`, `-1`);\n    iframe.setAttribute(`hidden`, `true`);\n    iframe.setAttribute(`title`, ``);\n    iframe.setAttribute(`role`, `presentation`);\n\n    iframe.src = url;\n\n    return iframe;\n}\n\nexport function hasBridge(url : string, domain : string) : boolean {\n    const bridges = globalStore('bridges');\n    return bridges.has(domain || getDomainFromUrl(url));\n}\n\nexport function openBridge(url : string, domain : string) : ZalgoPromise<CrossDomainWindowType> {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n    \n    domain = domain || getDomainFromUrl(url);\n    \n    return bridges.getOrSet(domain, () => ZalgoPromise.try(() => {\n\n        if (getDomain() === domain) {\n            throw new Error(`Can not open bridge on the same domain as current domain: ${ domain }`);\n        }\n\n        const name  = getBridgeName(domain);\n        const frame = getFrameByName(window, name);\n\n        if (frame) {\n            throw new Error(`Frame with name ${ name } already exists on page`);\n        }\n\n        const iframe = openBridgeFrame(name, url);\n        bridgeFrames.set(domain, iframe);\n\n        return documentBodyReady.then(body => {\n\n            body.appendChild(iframe);\n            const bridge = iframe.contentWindow;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                iframe.addEventListener('load', resolve);\n                iframe.addEventListener('error', reject);\n\n            }).then(() => {\n\n                return awaitWindowHello(bridge, BRIDGE_TIMEOUT, `Bridge ${ url }`);\n\n            }).then(() => {\n\n                return bridge;\n            });\n        });\n    }));\n}\n\ntype WinDetails = {|\n    win : CrossDomainWindowType,\n    domain? : ?string,\n    name? : ?string\n|};\n\nexport function linkWindow({ win, name, domain } : WinDetails) : WinDetails {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n    const popupWindowsByWin = windowStore('popupWindowsByWin');\n\n    for (const winName of popupWindowsByName.keys()) {\n        // $FlowFixMe\n        if (isWindowClosed(popupWindowsByName.get(winName).win)) {\n            popupWindowsByName.del(winName);\n        }\n    }\n\n    const details : WinDetails = popupWindowsByWin.getOrSet(win, () => {\n        if (!name) {\n            return { win };\n        }\n        \n        return popupWindowsByName.getOrSet(name, () => {\n            return { win, name };\n        });\n    });\n\n    if (details.win && details.win !== win) {\n        throw new Error(`Different window already linked for window: ${ name || 'undefined' }`);\n    }\n\n    if (name) {\n        if (details.name && details.name !== name) {\n            throw new Error(`Different window already linked for name ${ name }: ${ details.name }`);\n        }\n\n        details.name = name;\n        popupWindowsByName.set(name, details);\n    }\n\n    if (domain) {\n        details.domain = domain;\n        registerRemoteWindow(win);\n    }\n\n    popupWindowsByWin.set(win, details);\n    \n    return details;\n}\n\nexport function linkUrl(win : CrossDomainWindowType, url : string) {\n    linkWindow({ win, domain: getDomainFromUrl(url) });\n}\n\nexport function listenForWindowOpen() {\n    const windowOpen = window.open;\n\n    window.open = function windowOpenWrapper(url : string, name : string, options : string, last : mixed) : mixed {\n        const win = windowOpen.call(this, normalizeMockUrl(url), name, options, last);\n    \n        if (!win) {\n            return win;\n        }\n    \n        linkWindow({ win, name, domain: url ? getDomainFromUrl(url) : null });\n    \n        return win;\n    };\n}\n\nexport function destroyBridges() {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n\n    for (const domain of bridgeFrames.keys()) {\n        const frame = bridgeFrames.get(domain);\n        if (frame && frame.parentNode) {\n            frame.parentNode.removeChild(frame);\n        }\n    }\n    bridgeFrames.reset();\n    bridges.reset();\n}\n","/* @flow */\n\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { listenForWindowOpen, listenForOpenTunnel } from './parent';\nimport { setupOpenTunnelToParent } from './bridge';\nimport { openTunnelToOpener } from './child';\n\nexport function setupBridge({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    listenForWindowOpen();\n    listenForOpenTunnel({ on, send, receiveMessage });\n    setupOpenTunnelToParent({ on, send });\n    openTunnelToOpener({ on, send, receiveMessage });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { getParent, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { getGlobal, globalStore } from '../global';\nimport type { SendType, ResponseMessageEvent } from '../types';\n\nfunction cleanTunnelWindows() {\n    const tunnelWindows = globalStore('tunnelWindows');\n\n    for (const key of tunnelWindows.keys()) {\n        const tunnelWindow = tunnelWindows[key];\n\n        try {\n            noop(tunnelWindow.source);\n        } catch (err) {\n            tunnelWindows.del(key);\n            continue;\n        }\n\n        if (isWindowClosed(tunnelWindow.source)) {\n            tunnelWindows.del(key);\n        }\n    }\n}\n\ntype TunnelWindowDataType = {|\n    name : string,\n    source : CrossDomainWindowType,\n    canary : () => void,\n    sendMessage : (message : string) => void\n|};\n\nfunction addTunnelWindow({ name, source, canary, sendMessage } : TunnelWindowDataType) : string {\n    cleanTunnelWindows();\n    const id = uniqueID();\n    const tunnelWindows = globalStore('tunnelWindows');\n    tunnelWindows.set(id, { name, source, canary, sendMessage });\n    return id;\n}\n\nexport function setupOpenTunnelToParent({ send } : { send : SendType }) {\n    getGlobal(window).openTunnelToParent = function openTunnelToParent({ name, source, canary, sendMessage } : TunnelWindowDataType) : ZalgoPromise<ResponseMessageEvent> {\n\n        const tunnelWindows = globalStore('tunnelWindows');\n        const parentWindow = getParent(window);\n    \n        if (!parentWindow) {\n            throw new Error(`No parent window found to open tunnel to`);\n        }\n    \n        const id = addTunnelWindow({ name, source, canary, sendMessage });\n    \n        return send(parentWindow, MESSAGE_NAME.OPEN_TUNNEL, {\n    \n            name,\n    \n            sendMessage() {\n    \n                const tunnelWindow = tunnelWindows.get(id);\n    \n                try {\n                    // IE gets antsy if you try to even reference a closed window\n                    noop(tunnelWindow && tunnelWindow.source);\n                } catch (err) {\n                    tunnelWindows.del(id);\n                    return;\n                }\n    \n                if (!tunnelWindow || !tunnelWindow.source || isWindowClosed(tunnelWindow.source)) {\n                    return;\n                }\n    \n                try {\n                    tunnelWindow.canary();\n                } catch (err) {\n                    return;\n                }\n    \n                tunnelWindow.sendMessage.apply(this, arguments);\n            }\n    \n        }, { domain: WILDCARD });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isSameDomain, getOpener, getDomain, getFrameByName, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { getGlobal, windowStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { needsBridge, registerRemoteWindow, rejectRemoteSendMessage, registerRemoteSendMessage, getBridgeName } from './common';\n\nfunction awaitRemoteBridgeForWindow (win : CrossDomainWindowType) : ZalgoPromise<?CrossDomainWindowType> {\n    return windowStore('remoteBridgeAwaiters').getOrSet(win, () => {\n        return ZalgoPromise.try(() => {\n            const frame = getFrameByName(win, getBridgeName(getDomain()));\n\n            if (!frame) {\n                return;\n            }\n\n            // $FlowFixMe\n            if (isSameDomain(frame) && isSameDomain(frame) && getGlobal(frame)) {\n                return frame;\n            }\n\n            return new ZalgoPromise(resolve => {\n\n                let interval;\n                let timeout; // eslint-disable-line prefer-const\n\n                interval = setInterval(() => { // eslint-disable-line prefer-const\n                    // $FlowFixMe\n                    if (frame && isSameDomain(frame) && getGlobal(frame)) {\n                        clearInterval(interval);\n                        clearTimeout(timeout);\n                        return resolve(frame);\n                    }\n                }, 100);\n\n                timeout = setTimeout(() => {\n                    clearInterval(interval);\n                    return resolve();\n                }, 2000);\n            });\n        });\n    });\n}\n\nexport function openTunnelToOpener({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const opener = getOpener(window);\n        \n        if (!opener || !needsBridge({ win: opener })) {\n            return;\n        }\n\n        registerRemoteWindow(opener);\n\n        return awaitRemoteBridgeForWindow(opener).then(bridge => {\n\n            if (!bridge) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: no bridge found in opener`));\n            }\n\n            if (!window.name) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: window does not have a name`));\n            }\n\n            // $FlowFixMe\n            return getGlobal(bridge).openTunnelToParent({\n\n                name: window.name,\n\n                source: window,\n\n                canary() {\n                    // pass\n                },\n\n                sendMessage(message) {\n\n                    try {\n                        noop(window);\n                    } catch (err) {\n                        return;\n                    }\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: this.origin,\n                            source: this.source\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n\n            }).then(({ source, origin, data }) => {\n\n                if (source !== opener) {\n                    throw new Error(`Source does not match opener`);\n                }\n\n                registerRemoteSendMessage(source, origin, data.sendMessage);\n\n            }).catch(err => {\n\n                rejectRemoteSendMessage(opener, err);\n                throw err;\n            });\n        });\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { OnType, SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(id : string, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedProxyWindow {\n    let windowName;\n    \n    return {\n        id,\n        type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n        getInstanceID: memoizePromise(() => getWindowInstanceID(win, { send })),\n        close:         () => ZalgoPromise.try(() => {\n            closeWindow(win);\n        }),\n        getName: () => ZalgoPromise.try(() => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            return windowName;\n        }),\n        focus:   () => ZalgoPromise.try(() => {\n            win.focus();\n        }),\n        isClosed: () => ZalgoPromise.try(() => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => ZalgoPromise.try(() => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => ZalgoPromise.try(() => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            win = assertSameDomain(win);\n\n            win.name = name;\n\n            if (win.frameElement) {\n                win.frameElement.setAttribute('name', name);\n            }\n\n            windowName = name;\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : ?CrossDomainWindowType, { send } : { send : SendType }) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        this.send = send;\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return ZalgoPromise.all([\n                this.isPopup() && this.serializedWindow.getName().then(name => {\n                    if (name) {\n                        window.open('', name);\n                    }\n                }),\n                this.serializedWindow.focus()\n            ]);\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.serializedWindow = getSerializedWindow(this.serializedWindow.id, win, { send: this.send });\n        this.actualWindowPromise.resolve(win);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send: this.send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return globalStore('idToProxyWindow').getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow, null, { on, send });\n        });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const realWin : CrossDomainWindowType = win;\n\n        // $FlowFixMe\n        return windowStore('winToProxyWindow').getOrSet(win, () => {\n            const id = uniqueID();\n            const serializedWindow = getSerializedWindow(id, realWin, { send });\n            const proxyWindow = new ProxyWindow(serializedWindow, realWin, { send });\n\n            return globalStore('idToProxyWindow').set(id, proxyWindow);\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { on, send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on } : { on : OnType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }()\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on } : { on : OnType }) : SerializedFunction {\n    listenForFunctionCalls({ on });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    const name = val.__name__ || val.name || key;\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { on, send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map(stringifyError).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            // $FlowFixMe\n            sendMessage(source, origin, {\n                type,\n                ack,\n                hash:   message.hash,\n                name:   message.name,\n                ...response\n            }, { on, send });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        // $FlowFixMe\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, domain : DomainMatcher, childTimeout : number, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    return ZalgoPromise.try(() => {\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        } else if (isRegex(domain)) {\n            // $FlowFixMe\n            return sayHello(win, { send });\n        } else {\n            return { domain };\n        }\n    // $FlowFixMe\n    }).then(({ domain: normalizedDomain }) => {\n\n        // $FlowFixMe\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n\n    // $FlowFixMe\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n        return normalizeDomain(win, domain, childTimeout, { send });\n    }).then(targetDomain => {\n\n        if (!matchDomain(domain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(domain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        sendMessage(win, domain, {\n            type: MESSAGE_TYPE.REQUEST,\n            hash,\n            name,\n            data,\n            fireAndForget\n        }, { on, send });\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport { isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nexport function getGlobal(win? : CrossDomainWindowType = window) : Object {\n\n    if (!isSameDomain(win)) {\n        throw new Error(`Can not get global for window on different domain`);\n    }\n\n    if (!win[__ZOID__.__GLOBAL_KEY__]) {\n        win[__ZOID__.__GLOBAL_KEY__] = {};\n    }\n\n    return win[__ZOID__.__GLOBAL_KEY__];\n}\n\nexport function destroyGlobal() {\n    delete window[__ZOID__.__GLOBAL_KEY__];\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nexport type ProxyObject<T> = {|\n    get : () => ZalgoPromise<T>\n|};\n\nexport function getProxyObject<T>(obj : T) : ProxyObject<T> {\n    return {\n        get() : ZalgoPromise<T> {\n            return ZalgoPromise.try(() => {\n                if (this.source && this.source !== window) {\n                    throw new Error(`Can not call get on proxy object from a remote window`);\n                }\n    \n                return obj;\n            });\n        }\n    };\n}\n","/* @flow */\n\nimport { WINDOW_TYPE } from 'cross-domain-utils/src';\n\nexport const ZOID = `zoid`;\n\nexport const POST_MESSAGE = {\n    DELEGATE:       `${ ZOID }_delegate`,\n    ALLOW_DELEGATE: `${ ZOID }_allow_delegate`\n};\n\nexport const PROP_TYPE = {\n    STRING:   `string`,\n    OBJECT:   `object`,\n    FUNCTION: `function`,\n    BOOLEAN:  `boolean`,\n    NUMBER:   `number`,\n    ARRAY:    `array`\n};\n\nexport const INITIAL_PROPS = {\n    RAW: 'raw',\n    UID: 'uid'\n};\n\nexport const WINDOW_REFERENCES = {\n    OPENER: ('opener' : 'opener'),\n    PARENT: ('parent' : 'parent'),\n    GLOBAL: ('global' : 'global')\n};\n\nexport const PROP_SERIALIZATION = {\n    JSON:   ('json' : 'json'),\n    DOTIFY: ('dotify' : 'dotify'),\n    BASE64: ('base64' : 'base64')\n};\n\nexport const CONTEXT = WINDOW_TYPE;\n\nexport const WILDCARD = '*';\n\nexport const DEFAULT_DIMENSIONS = {\n    WIDTH:  '300px',\n    HEIGHT: '150px'\n};\n\nexport const EVENT = {\n    RENDER:   'zoid-render',\n    RENDERED: 'zoid-rendered',\n    DISPLAY:  'zoid-display',\n    ERROR:    'zoid-error',\n    CLOSE:    'zoid-close',\n    PROPS:    'zoid-props',\n    RESIZE:   'zoid-resize'\n};\n","/* @flow */\n\nimport { getDomain, isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport type { Component } from '../component';\nimport type { PropsType, MixedPropDefinitionType } from '../component/props';\n\nimport type { ChildHelpers } from './index';\n\nexport function normalizeChildProp<T, P>(component : Component<P>, props : (PropsType<P>), key : string, value : T, helpers : ChildHelpers<P>) : ?T  {\n\n    // $FlowFixMe\n    const prop : MixedPropDefinitionType<P> = component.getPropDefinition(key);\n\n    if (!prop) {\n        return value;\n    }\n\n    if (typeof prop.childDecorate === 'function') {\n        return prop.childDecorate({ value, ...helpers });\n    }\n\n    return value;\n}\n\n// eslint-disable-next-line max-params\nexport function normalizeChildProps<P>(parentComponentWindow : CrossDomainWindowType, component : Component<P>, props : (PropsType<P>), origin : string, helpers : ChildHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) {\n\n    const result = {};\n\n    for (const key of Object.keys(props)) {\n        const prop = component.getPropDefinition(key);\n\n        if (prop && prop.sameDomain && (origin !== getDomain(window) || !isSameDomain(parentComponentWindow))) {\n            continue;\n        }\n\n        // $FlowFixMe\n        const value = normalizeChildProp(component, props, key, props[key], helpers);\n\n        result[key] = value;\n        if (prop && prop.alias && !result[prop.alias]) {\n            result[prop.alias] = value;\n        }\n    }\n\n    if (!isUpdate) {\n        for (const key of component.getPropNames()) {\n            if (!props.hasOwnProperty(key)) {\n                result[key] = normalizeChildProp(component, props, key, props[key], helpers);\n            }\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n","/* @flow */\n\nimport { inlineMemoize, stringifyError, base64decode } from 'belter/src';\n\nimport { ZOID } from '../constants';\nimport type { ChildPayload } from '../parent';\n\nfunction parseChildWindowName(windowName : string) : ChildPayload {\n    return inlineMemoize(parseChildWindowName, () => {\n        if (!windowName) {\n            throw new Error(`No window name`);\n        }\n    \n        const [ , zoidcomp, name, encodedPayload ] = windowName.split('__');\n    \n        if (zoidcomp !== ZOID) {\n            throw new Error(`Window not rendered by zoid - got ${ zoidcomp }`);\n        }\n    \n        if (!name) {\n            throw new Error(`Expected component name`);\n        }\n    \n        if (!encodedPayload) {\n            throw new Error(`Expected encoded payload`);\n        }\n    \n        try {\n            return JSON.parse(base64decode(encodedPayload));\n        } catch (err) {\n            throw new Error(`Can not decode window name payload: ${ encodedPayload }: ${ stringifyError(err) }`);\n        }\n    }, [ windowName ]);\n}\n\nexport function getChildPayload() : ?ChildPayload {\n    try {\n        return parseChildWindowName(window.name);\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isSameDomain, matchDomain, getDomain, getOpener,\n    getNthParentFromTop, getAncestor, getAllFramesInWindow,\n    type CrossDomainWindowType, onCloseWindow } from 'cross-domain-utils/src';\nimport { markWindowKnown, deserializeMessage, type CrossDomainFunctionType } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { extend, waitForDocumentBody, onResize, getElementSafe, assertExists } from 'belter/src';\n\nimport { getGlobal } from '../lib';\nimport { CONTEXT, INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component } from '../component';\nimport type { PropsType } from '../component/props';\nimport type { WindowRef, PropRef, ParentExportsType } from '../parent';\n\nimport { normalizeChildProps } from './props';\nimport { getChildPayload } from './window';\n\nexport * from './window';\n\nexport type ChildExportsType<P> = {|\n    updateProps : CrossDomainFunctionType<[ PropsType<P> ], void>,\n    close : CrossDomainFunctionType<[], void>\n|};\n\nexport type ChildHelpers<P> = {|\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    onProps : ((PropsType<P>) => void) => void,\n    getParent : () => CrossDomainWindowType,\n    getParentDomain : () => string\n|};\n\n/*  Child Component\n    ---------------\n\n    This is the portion of code which runs inside the frame or popup window containing the component's implementation.\n\n    When the component author calls myComponent.attach(), it creates a new instance of ChildComponent, which is then\n    responsible for managing the state and messaging back up to the parent, and providing props for the component to\n    utilize.\n*/\n\nexport class ChildComponent<P> {\n\n    component : Component<P>\n    props : PropsType<P>\n    context : string\n    parent : ParentExportsType<P>\n    parentDomain : string\n    parentComponentWindow : CrossDomainWindowType\n\n    onPropHandlers : Array<(PropsType<P>) => void> // eslint-disable-line flowtype/no-mutable-array\n    autoResize : { width : boolean, height : boolean, element? : string }\n\n    constructor(component : Component<P>) {\n        ZalgoPromise.try(() => {\n            this.component = component;\n            this.onPropHandlers = [];\n            \n            const childPayload = getChildPayload();\n\n            if (!childPayload) {\n                throw new Error(`No child payload found`);\n            }\n\n            if (childPayload.version !== __ZOID__.__VERSION__) {\n                throw new Error(`Parent window has zoid version ${ childPayload.version }, child window has version ${ __ZOID__.__VERSION__ }`);\n            }\n\n            const { parent, parentDomain, exports, context, props } = childPayload;\n\n            this.context = context;\n            this.parentComponentWindow = this.getParentComponentWindow(parent);\n            this.parentDomain = parentDomain;\n            this.parent = deserializeMessage(this.parentComponentWindow, parentDomain, exports);\n\n            this.checkParentDomain(parentDomain);\n\n            const initialProps = this.getPropsByRef(this.parentComponentWindow, parentDomain, props);\n            this.setProps(initialProps, parentDomain);\n            markWindowKnown(this.parentComponentWindow);\n            \n            this.watchForClose();\n\n            return this.parent.init(this.buildExports());\n\n        }).then(() => {\n            return this.watchForResize();\n\n        }).catch(err => {\n            this.onError(err);\n        });\n    }\n\n    getHelpers() : ChildHelpers<P> {\n        return {\n            focus:           () => this.focus(),\n            close:           () => this.close(),\n            resize:          ({ width, height }) => this.resize({ width, height }),\n            onError:         (err) => this.onError(err),\n            onProps:         (handler) => this.onProps(handler),\n            getParent:       () => this.parentComponentWindow,\n            getParentDomain: () => this.parentDomain\n        };\n    }\n\n    checkParentDomain(domain : string) {\n        if (!matchDomain(this.component.allowedParentDomains, domain)) {\n            throw new Error(`Can not be rendered by domain: ${ domain }`);\n        }\n    }\n\n    onProps(handler : Function) {\n        this.onPropHandlers.push(handler);\n    }\n\n    getPropsByRef(parentComponentWindow : CrossDomainWindowType, domain : string, { type, value, uid } : PropRef) : (PropsType<P>) {\n        let props;\n\n        if (type === INITIAL_PROPS.RAW) {\n            props = value;\n        } else if (type === INITIAL_PROPS.UID) {\n            if (!isSameDomain(parentComponentWindow)) {\n                throw new Error(`Parent component window is on a different domain - expected ${ getDomain() } - can not retrieve props`);\n            }\n\n            const global = getGlobal(parentComponentWindow);\n            props = assertExists('props', global && global.props[uid]);\n        }\n\n        if (!props) {\n            throw new Error(`Could not find props`);\n        }\n\n        return deserializeMessage(parentComponentWindow, domain, props);\n    }\n\n    getParentComponentWindow(ref : WindowRef) : CrossDomainWindowType {\n        const { type } = ref;\n    \n        if (type === WINDOW_REFERENCES.OPENER) {\n            return assertExists('opener', getOpener(window));\n    \n        } else if (type === WINDOW_REFERENCES.PARENT && typeof ref.distance === 'number') {\n            return assertExists('parent', getNthParentFromTop(window, ref.distance));\n\n        } else if (type === WINDOW_REFERENCES.GLOBAL && ref.uid && typeof ref.uid === 'string') {\n            const { uid } = ref;\n            const ancestor = getAncestor(window);\n\n            if (!ancestor) {\n                throw new Error(`Can not find ancestor window`);\n            }\n\n            for (const frame of getAllFramesInWindow(ancestor)) {\n                if (isSameDomain(frame)) {\n                    const global = getGlobal(frame);\n\n                    if (global && global.windows && global.windows[uid]) {\n                        return global.windows[uid];\n                    }\n                }\n            }\n        }\n    \n        throw new Error(`Unable to find ${ type } parent component window`);\n    }\n\n    getProps() : PropsType<P> {\n        // $FlowFixMe\n        this.props = this.props || {};\n        return this.props;\n    }\n\n    setProps(props : PropsType<P>, origin : string, isUpdate : boolean = false) {\n        const helpers = this.getHelpers();\n        const existingProps = this.getProps();\n        const normalizedProps = normalizeChildProps(this.parentComponentWindow, this.component, props, origin, helpers, isUpdate);\n\n        extend(existingProps, normalizedProps);\n\n        for (const handler of this.onPropHandlers) {\n            handler.call(this, existingProps);\n        }\n    }\n\n    watchForClose() {\n        window.addEventListener('beforeunload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        window.addEventListener('unload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        onCloseWindow(this.parentComponentWindow, () => {\n            this.destroy();\n        });\n    }\n\n    getAutoResize() : { width : boolean, height : boolean, element : ?HTMLElement } {\n        let { width = false, height = false, element = 'body' } = this.autoResize || this.component.autoResize || {};\n        element = getElementSafe(element);\n        return { width, height, element };\n    }\n\n    watchForResize() : ?ZalgoPromise<void> {\n        return waitForDocumentBody().then(() => {\n            const { width, height, element } = this.getAutoResize();\n\n            if (!element || (!width && !height) || this.context === CONTEXT.POPUP) {\n                return;\n            }\n\n            onResize(element, ({ width: newWidth, height: newHeight }) => {\n                this.resize({\n                    width:  width ? newWidth : undefined,\n                    height: height ? newHeight : undefined\n                });\n            }, { width, height });\n        });\n    }\n\n    buildExports() : ChildExportsType<P> {\n\n        const self = this;\n\n        return {\n            updateProps(props : (PropsType<P>)) : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.setProps(props, this.__origin__, true));\n            },\n\n            close() : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.destroy());\n            }\n        };\n    }\n\n    resize({ width, height } : { width : ?number, height : ?number }) : ZalgoPromise<void> {\n        return this.parent.resize.fireAndForget({ width, height });\n    }\n\n    close() : ZalgoPromise<void> {\n        return this.parent.close();\n    }\n    \n    destroy() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.close();\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.focus();\n        });\n    }\n\n    onError(err : mixed) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.parent && this.parent.onError) {\n                return this.parent.onError(err);\n            } else {\n                throw err;\n            }\n        });\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { cleanUpWindow, ProxyWindow, toProxyWindow } from 'post-robot/src';\nimport { assertSameDomain, closeWindow } from 'cross-domain-utils/src';\nimport { iframe, popup, destroyElement, normalizeDimension, watchElementForClose,\n    awaitFrameWindow, uniqueID } from 'belter/src';\n\nimport { CONTEXT } from '../constants';\nimport { getProxyObject, type ProxyObject } from '../lib';\n\n\nexport type ContextDriverType = {|\n    openOnClick : boolean,\n    openFrame? : () => ProxyObject<HTMLIFrameElement>,\n    open : (?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    openPrerenderFrame? : () => ProxyObject<HTMLIFrameElement>,\n    openPrerender : (ProxyWindow, ?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    resize? : ({ width : ?number, height : ?number }) => void,\n    delegate : $ReadOnlyArray<string>\n|};\n\nexport const RENDER_DRIVERS : { [string] : ContextDriverType } = {};\n\nRENDER_DRIVERS[CONTEXT.IFRAME] = {\n    openOnClick: false,\n\n    openFrame() : ProxyObject<HTMLIFrameElement> {\n        return getProxyObject(iframe({\n            attributes: {\n                title: this.component.name,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    open(proxyFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n\n        return proxyFrame.get().then(frame => {\n            return awaitFrameWindow(frame).then(win => {\n\n                const frameWatcher = watchElementForClose(frame, () => this.close());\n                this.clean.register(() => frameWatcher.cancel());\n                this.clean.register(() => destroyElement(frame));\n                this.clean.register(() => cleanUpWindow(win));\n\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    openPrerenderFrame() : ProxyObject<HTMLIFrameElement> {\n        return getProxyObject(iframe({\n            attributes: {\n                name:  `__zoid_prerender_frame__${ this.component.name }_${ uniqueID() }__`,\n                title: `prerender__${ this.component.name }`,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyPrerenderFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n        \n        return proxyPrerenderFrame.get().then(prerenderFrame => {\n            this.clean.register(() => destroyElement(prerenderFrame));\n\n            return awaitFrameWindow(prerenderFrame).then(prerenderFrameWindow => {\n                return assertSameDomain(prerenderFrameWindow);\n            }).then(win => {\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    delegate: [\n        'getProxyContainer',\n        'renderContainer',\n        'openFrame',\n        'openPrerenderFrame',\n        'prerender',\n        'open',\n        'openPrerender'\n    ]\n};\n\nif (__ZOID__.__POPUP_SUPPORT__) {\n    RENDER_DRIVERS[CONTEXT.POPUP] = {\n        openOnClick: true,\n\n        open() : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                let { width, height } = this.component.dimensions;\n\n                width = normalizeDimension(width, window.outerWidth);\n                height = normalizeDimension(height, window.outerWidth);\n\n                const win = popup('', {\n                    width,\n                    height,\n                    ...this.component.attributes.popup\n                });\n\n                this.clean.register(() => {\n                    closeWindow(win);\n                    cleanUpWindow(win);\n                });\n\n                return toProxyWindow(win);\n            });\n        },\n\n        openPrerender(proxyWin : ProxyWindow) : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                return proxyWin;\n            });\n        },\n\n        delegate: [\n            'getProxyContainer',\n            'renderContainer',\n            'setProxyWin'\n        ]\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { dotify, isDefined, extend } from 'belter/src';\n\nimport type { Component } from '../component';\nimport type { BuiltInPropsDefinitionType, PropsInputType, PropsType, MixedPropDefinitionType } from '../component/props';\nimport { PROP_SERIALIZATION } from '../constants';\n\nimport type { ParentHelpers } from './index';\n\n/*  Normalize Props\n    ---------------\n\n    Turn props into normalized values, using defaults, function options, etc.\n*/\n\nexport function extendProps<P>(component : Component<P>, props : PropsType<P>, inputProps : PropsInputType<P>, helpers : ParentHelpers<P>, isUpdate : boolean = false) { // eslint-disable-line complexity\n\n    // $FlowFixMe\n    inputProps = inputProps || {};\n    extend(props, inputProps);\n\n    const propNames = isUpdate ? [] : [ ...component.getPropNames() ];\n\n    for (const key of Object.keys(inputProps)) {\n        if (propNames.indexOf(key) === -1) {\n            propNames.push(key);\n        }\n    }\n\n    const aliases = [];\n\n    const { state, close, focus, onError } = helpers;\n\n    for (const key of propNames) {\n        const propDef = component.getPropDefinition(key);\n        let value = inputProps[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        const alias = propDef.alias;\n        if (alias) {\n            if (!isDefined(value) && isDefined(inputProps[alias])) {\n                value = inputProps[alias];\n            }\n            aliases.push(alias);\n        }\n\n        if (propDef.value) {\n            value = propDef.value({ props, state, close, focus, onError });\n        }\n\n        if (!isDefined(value) && propDef.default) {\n            value = propDef.default({ props, state, close, focus, onError });\n        }\n\n        if (isDefined(value)) {\n            if (propDef.type === 'array' ? !Array.isArray(value) : (typeof value !== propDef.type)) {\n                throw new TypeError(`Prop is not of type ${ propDef.type }: ${ key }`);\n            }\n        }\n        \n        // $FlowFixMe\n        props[key] = value;\n    }\n\n    for (const alias of aliases) {\n        delete props[alias];\n    }\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        const propDef = component.getPropDefinition(key);\n        const value = props[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        if (isDefined(value) && propDef.validate) {\n            // $FlowFixMe\n            propDef.validate({ value, props });\n        }\n\n        if (isDefined(value) && propDef.decorate) {\n            props[key] = propDef.decorate({ value, props, state, close, focus, onError });\n        }\n    }\n\n    for (const key of component.getPropNames()) {\n        const propDef = component.getPropDefinition(key);\n        if (propDef.required !== false && !isDefined(props[key])) {\n            throw new Error(`Expected prop \"${ key }\" to be defined`);\n        }\n    }\n}\n\n// $FlowFixMe\nfunction getQueryParam<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryParam === 'function') {\n            return prop.queryParam({ value });\n        } else if (typeof prop.queryParam === 'string') {\n            return prop.queryParam;\n        } else {\n            return key;\n        }\n    });\n}\n\n// $FlowFixMe\nfunction getQueryValue<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<mixed> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryValue === 'function' && isDefined(value)) {\n            return prop.queryValue({ value });\n        } else {\n            return value;\n        }\n    });\n}\n\nexport function propsToQuery<P>(propsDef : BuiltInPropsDefinitionType<P>, props : (PropsType<P>)) : ZalgoPromise<{ [string] : string }> {\n\n    const params = {};\n\n    // $FlowFixMe\n    const keys = Object.keys(props);\n    \n    return ZalgoPromise.all(keys.map(key => {\n\n        const prop = propsDef[key];\n\n        if (!prop) {\n            return; // eslint-disable-line array-callback-return\n        }\n\n        return ZalgoPromise.resolve().then(() => {\n\n            const value = props[key];\n\n            if (!value) {\n                return;\n            }\n\n            if (!prop.queryParam) {\n                return;\n            }\n\n            return value;\n\n        }).then(value => {\n\n            if (value === null || typeof value === 'undefined') {\n                return;\n            }\n\n            return ZalgoPromise.all([\n                getQueryParam(prop, key, value),\n                getQueryValue(prop, key, value)\n            ]).then(([ queryParam, queryValue ]) => {\n\n                let result;\n\n                if (typeof queryValue === 'boolean') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'string') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'object' && queryValue !== null) {\n\n                    if (prop.serialization === PROP_SERIALIZATION.JSON) {\n                        result = JSON.stringify(queryValue);\n                    } else if (prop.serialization === PROP_SERIALIZATION.BASE64) {\n                        result = btoa(JSON.stringify(queryValue));\n                    } else if (prop.serialization === PROP_SERIALIZATION.DOTIFY || !prop.serialization) {\n                        result = dotify(queryValue, key);\n\n                        for (const dotkey of Object.keys(result)) {\n                            params[dotkey] = result[dotkey];\n                        }\n\n                        return;\n                    }\n\n                } else if (typeof queryValue === 'number') {\n                    result = queryValue.toString();\n                }\n\n                params[queryParam] = result;\n            });\n        });\n\n    })).then(() => {\n        return params;\n    });\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { send, bridge, serializeMessage, ProxyWindow, toProxyWindow, type CrossDomainFunctionType } from 'post-robot/src';\nimport { isSameDomain, matchDomain, getDomainFromUrl, isBlankDomain,\n    getDomain, type CrossDomainWindowType,\n    getDistanceFromTop, normalizeMockUrl, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { addEventListener, uniqueID, elementReady, writeElementToWindow, eventEmitter, type EventEmitterType,\n    noop, onResize, extendUrl, appendChild, cleanup, type CleanupType, base64encode,\n    once, stringifyError, destroyElement, getElementSafe } from 'belter/src';\n\nimport { ZOID, POST_MESSAGE, CONTEXT, EVENT,\n    INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component, onErrorPropType } from '../component';\nimport { getGlobal, getProxyObject, type ProxyObject } from '../lib';\nimport type { PropsInputType, PropsType } from '../component/props';\nimport type { ChildExportsType } from '../child';\nimport type { DimensionsType } from '../types';\n\nimport { RENDER_DRIVERS, type ContextDriverType } from './drivers';\nimport { propsToQuery, extendProps } from './props';\n\nexport type RenderOptionsType<P> = {|\n    uid : string,\n    props : PropsInputType<P>,\n    tag : string,\n    context : string,\n    close : (?string) => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<ProxyWindow>,\n    doc : Document,\n    container? : HTMLElement,\n    dimensions : DimensionsType,\n    state : Object,\n    event : EventEmitterType,\n    frame : ?HTMLIFrameElement,\n    prerenderFrame : ?HTMLIFrameElement\n|};\n\nexport type ParentExportsType<P> = {|\n    init : (ChildExportsType<P>) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>,\n    checkClose : CrossDomainFunctionType<[], void>,\n    resize : CrossDomainFunctionType<[{ width? : ?number, height? : ?number }], void>,\n    onError : (mixed) => ZalgoPromise<void>\n|};\n\nexport type PropRef =\n    {| type : typeof INITIAL_PROPS.RAW, uid? : string, value? : string |};\n\nexport type WindowRef =\n    {| type : typeof WINDOW_REFERENCES.OPENER |} |\n    {| type : typeof WINDOW_REFERENCES.PARENT, distance : number |} |\n    {| type : typeof WINDOW_REFERENCES.GLOBAL, uid : string |};\n\nexport type ChildPayload = {|\n    uid : string,\n    tag : string,\n    version : string,\n    context : $Values<typeof CONTEXT>,\n    parentDomain : string,\n    childDomain : string,\n    parent : WindowRef,\n    props : PropRef,\n    exports : string\n|};\n\nexport type StateType = Object;\n\nexport type ParentHelpers<P> = {|\n    state : StateType,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    updateProps : PropsInputType<P> => ZalgoPromise<void>,\n    event : EventEmitterType\n|};\n\nexport class ParentComponent<P> {\n\n    component : Component<P>\n    driver : ContextDriverType\n    clean : CleanupType\n    event : EventEmitterType\n\n    initPromise : ZalgoPromise<void>\n    handledErrors : Array<mixed> // eslint-disable-line flowtype/no-mutable-array\n    \n    props : PropsType<P>\n    state : StateType\n    child : ?ChildExportsType<P>\n\n    proxyWin : ?ProxyWindow\n\n    constructor(component : Component<P>, props : PropsInputType<P>) {\n        this.initPromise = new ZalgoPromise();\n        this.handledErrors = [];\n\n        // $FlowFixMe\n        this.props = {};\n\n        this.clean = cleanup(this);\n        this.state = {};\n\n        this.component = component;\n\n        this.setupEvents(props.onError);\n        this.setProps(props);\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n        this.watchForUnload();\n    }\n\n    setupEvents(onError : ?onErrorPropType) {\n        this.event = eventEmitter();\n        \n        this.event.on(EVENT.RENDER,   () => this.props.onRender());\n        this.event.on(EVENT.DISPLAY,  () => this.props.onDisplay());\n        this.event.on(EVENT.RENDERED, () => this.props.onRendered());\n        this.event.on(EVENT.CLOSE,    () => this.props.onClose());\n        this.event.on(EVENT.RESIZE,   () => this.props.onResize());\n        this.event.on(EVENT.PROPS,    (props) => this.props.onProps(props));\n\n        this.event.on(EVENT.ERROR, err => {\n            if (this.props && this.props.onError) {\n                return this.props.onError(err);\n            } else if (onError) {\n                return onError(err);\n            } else {\n                return this.initPromise.reject(err).then(() => {\n                    setTimeout(() => {\n                        throw err;\n                    }, 1);\n                });\n            }\n        });\n    }\n\n    render(target : CrossDomainWindowType, container : string | HTMLElement, context : $Values<typeof CONTEXT>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`render`);\n\n            this.driver = RENDER_DRIVERS[context];\n            const uid = `${ ZOID }-${ this.component.tag }-${ uniqueID() }`;\n            const domain = this.getDomain();\n            const childDomain = this.getChildDomain();\n            \n            this.component.checkAllowRender(target, domain, container);\n\n            if (target !== window) {\n                this.delegate(context, target);\n            }\n\n            const tasks = {};\n\n            const init = this.initPromise;\n            const buildUrl = this.buildUrl();\n            const onRender = this.event.trigger(EVENT.RENDER);\n\n            const getProxyContainer = this.getProxyContainer(container);\n\n            const openFrame = this.openFrame();\n            const openPrerenderFrame = this.openPrerenderFrame();\n\n            const renderContainer = ZalgoPromise.hash({ proxyContainer: getProxyContainer, proxyFrame: openFrame, proxyPrerenderFrame: openPrerenderFrame }).then(({ proxyContainer, proxyFrame, proxyPrerenderFrame }) => {\n                return this.renderContainer(proxyContainer, { context, uid, proxyFrame, proxyPrerenderFrame });\n            });\n\n            const open = this.driver.openOnClick\n                ? this.open()\n                : openFrame.then(proxyFrame => this.open(proxyFrame));\n\n            const openPrerender = ZalgoPromise.hash({ proxyWin: open, proxyPrerenderFrame: openPrerenderFrame }).then(({ proxyWin, proxyPrerenderFrame }) => {\n                return this.openPrerender(proxyWin, proxyPrerenderFrame);\n            });\n\n            const setState = open.then(proxyWin => {\n                this.proxyWin = proxyWin;\n                return this.setProxyWin(proxyWin);\n            });\n            \n            const prerender = ZalgoPromise.hash({ proxyPrerenderWin: openPrerender, state: setState }).then(({ proxyPrerenderWin }) => {\n                return this.prerender(proxyPrerenderWin, { context, uid });\n            });\n\n            const buildWindowName = open.then(proxyWin => {\n                return this.buildWindowName({ proxyWin, childDomain, domain, target, context, uid });\n            });\n\n            const setWindowName =  ZalgoPromise.hash({ proxyWin: open, windowName: buildWindowName }).then(({ proxyWin, windowName }) => {\n                return proxyWin.setName(windowName);\n            });\n\n            const loadUrl = ZalgoPromise.hash({ proxyWin: open, url: buildUrl, windowName: setWindowName, prerender }).then(({ proxyWin, url }) => {\n                return proxyWin.setLocation(url);\n            });\n\n            const watchForClose = open.then(proxyWin => {\n                this.watchForClose(proxyWin);\n            });\n\n            const onDisplay = ZalgoPromise.hash({ container: renderContainer, prerender }).then(() => {\n                return this.event.trigger(EVENT.DISPLAY);\n            });\n\n            const openBridge = open.then(proxyWin => {\n                return this.openBridge(proxyWin, childDomain, context);\n            });\n\n            const runTimeout = loadUrl.then(() => {\n                return this.runTimeout();\n            });\n\n            const onRendered = init.then(() => {\n                return this.event.trigger(EVENT.RENDERED);\n            });\n\n            return ZalgoPromise.hash({\n                init, buildUrl, onRender, getProxyContainer, openFrame, openPrerenderFrame, renderContainer, open,\n                openPrerender, setState, prerender, loadUrl, buildWindowName, setWindowName, watchForClose, onDisplay,\n                openBridge, runTimeout, onRendered\n            }).catch(err => {\n                for (const taskName of Object.keys(tasks)) {\n                    tasks[taskName].reject(err);\n                }\n\n                throw err;\n            });\n            \n        }).catch(err => {\n            return ZalgoPromise.all([\n                this.onError(err),\n                this.destroy(err)\n            ]).then(() => {\n                throw err;\n            });\n        }).then(noop);\n    }\n\n    getProxyContainer(container : string | HTMLElement) : ZalgoPromise<ProxyObject<HTMLElement>> {\n        return ZalgoPromise.try(() => {\n            return elementReady(container);\n        }).then(containerElement => {\n            return getProxyObject(containerElement);\n        });\n    }\n\n    buildWindowName({ proxyWin, childDomain, domain, target, uid, context } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string }) : string {\n        const childPayload = this.buildChildPayload({ proxyWin, childDomain, domain, target, context, uid });\n        return `__${ ZOID }__${ this.component.name }__${ base64encode(JSON.stringify(childPayload)) }__`;\n    }\n\n    getPropsRef(proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, uid : string) : PropRef {\n        const value = serializeMessage(proxyWin, domain, this.getPropsForChild(domain));\n\n        const propRef = (childDomain === getDomain())\n            ? { type: INITIAL_PROPS.UID, uid }\n            : { type: INITIAL_PROPS.RAW, value };\n\n        if (propRef.type === INITIAL_PROPS.UID) {\n            const global = getGlobal(window);\n            global.props = global.props || {};\n            global.props[uid] = value;\n\n            this.clean.register(() => {\n                delete global.props[uid];\n            });\n        }\n\n        return propRef;\n    }\n\n    buildChildPayload({ proxyWin, childDomain, domain, target = window, context, uid } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string } = {}) : ChildPayload {\n        return {\n            uid,\n            context,\n            version:      __ZOID__.__VERSION__,\n            childDomain,\n            parentDomain: getDomain(window),\n            tag:          this.component.tag,\n            parent:       this.getWindowRef(target, childDomain, uid, context),\n            props:        this.getPropsRef(proxyWin, childDomain, domain, uid),\n            exports:      serializeMessage(proxyWin, domain, this.buildParentExports(proxyWin))\n        };\n    }\n\n    setProxyWin(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.proxyWin = proxyWin;\n        });\n    }\n\n    getHelpers() : ParentHelpers<P> {\n        return {\n            state:       this.state,\n            event:       this.event,\n            close:       () => this.close(),\n            focus:       () => this.focus(),\n            resize:      ({ width, height }) => this.resize({ width, height }),\n            onError:     (err) => this.onError(err),\n            updateProps: (props) => this.updateProps(props)\n        };\n    }\n\n    setProps(props : PropsInputType<P>, isUpdate : boolean = false) {\n        if (this.component.validate) {\n            this.component.validate({ props });\n        }\n\n        const helpers = this.getHelpers();\n        extendProps(this.component, this.props, props, helpers, isUpdate);\n    }\n\n    buildUrl() : ZalgoPromise<string> {\n        return propsToQuery({ ...this.component.props, ...this.component.builtinProps }, this.props).then(query => {\n            return extendUrl(normalizeMockUrl(this.component.getUrl(this.props)), { query });\n        });\n    }\n\n    getDomain() : string | RegExp {\n        return this.component.getDomain(this.props);\n    }\n\n    getChildDomain() : string {\n        return this.component.getChildDomain(this.props);\n    }\n\n    getPropsForChild(domain : string | RegExp) : (PropsType<P>) {\n        const result = {};\n\n        for (const key of Object.keys(this.props)) {\n            const prop = this.component.getPropDefinition(key);\n\n            if (prop && prop.sendToChild === false) {\n                continue;\n            }\n\n            if (prop && prop.sameDomain && !matchDomain(domain, getDomain(window))) {\n                continue;\n            }\n            \n            result[key] = this.props[key];\n        }\n\n        // $FlowFixMe\n        return result;\n    }\n\n    updateProps(props : PropsInputType<P>) : ZalgoPromise<void> {\n        this.setProps(props, true);\n\n        return this.initPromise.then(() => {\n            if (this.child) {\n                return this.child.updateProps(this.getPropsForChild(this.getDomain())).catch(err => {\n                    if (!this.child || !this.proxyWin) {\n                        return;\n                    }\n\n                    return this.checkClose(this.proxyWin).then(() => {\n                        if (this.child) {\n                            throw err;\n                        }\n                    });\n                });\n            }\n        });\n    }\n\n    openFrame() : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openFrame) {\n                return this.driver.openFrame.call(this);\n            }\n        });\n    }\n\n    openPrerenderFrame() : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openPrerenderFrame) {\n                return this.driver.openPrerenderFrame.call(this);\n            }\n        });\n    }\n    \n    open(proxyFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`open`);\n\n            const windowProp = this.props.window;\n\n            if (windowProp) {\n                this.clean.register(() => windowProp.close());\n                return toProxyWindow(windowProp);\n            }\n\n            return this.driver.open.call(this, proxyFrame);\n\n        }).then(proxyWin => {\n            this.proxyWin = proxyWin;\n            return proxyWin;\n        });\n    }\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return this.driver.openPrerender.call(this, proxyWin, proxyPrerenderFrame);\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.proxyWin) {\n                return this.proxyWin.focus().then(noop);\n            }\n        });\n    }\n\n    delegate(context : $Values<typeof CONTEXT>, target : CrossDomainWindowType) {\n        this.component.log(`delegate`);\n\n        const props = {};\n        for (const propName of this.component.getPropNames()) {\n            if (this.component.getPropDefinition(propName).allowDelegate) {\n                props[propName] = this.props[propName];\n            }\n        }\n\n        const overridesPromise = send(target, `${ POST_MESSAGE.DELEGATE }_${ this.component.name }`, {\n            context,\n            props,\n            overrides: {\n                event:   this.event,\n                close:   () => this.close(),\n                onError: (err) => this.onError(err)\n            }\n\n        }).then(({ data }) => {\n            this.clean.register(data.destroy);\n            return data.overrides;\n\n        }).catch(err => {\n            throw new Error(`Unable to delegate rendering. Possibly the component is not loaded in the target window.\\n\\n${ stringifyError(err) }`);\n        });\n\n        for (const key of this.driver.delegate) {\n            // $FlowFixMe\n            this[key] = function overriddenFunction() : ZalgoPromise<mixed> {\n                return overridesPromise.then(overrides => {\n                    return overrides[key].apply(this, arguments);\n                });\n            };\n        }\n    }\n\n    getWindowRef(target : CrossDomainWindowType, domain : string, uid : string, context : $Values<typeof CONTEXT>) : WindowRef {\n        \n        if (domain === getDomain(window)) {\n            const global = getGlobal(window);\n            global.windows = global.windows || {};\n            global.windows[uid] = window;\n            this.clean.register(() => {\n                delete global.windows[uid];\n            });\n    \n            return { type: WINDOW_REFERENCES.GLOBAL, uid };\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return { type: WINDOW_REFERENCES.OPENER };\n        }\n\n        return { type: WINDOW_REFERENCES.PARENT, distance: getDistanceFromTop(window) };\n    }\n\n    watchForClose(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        let cancelled = false;\n\n        this.clean.register(() => {\n            cancelled = true;\n        });\n\n        return ZalgoPromise.delay(2000).then(() => {\n            return proxyWin.isClosed();\n        }).then(isClosed => {\n            if (isClosed) {\n                this.component.log(`detect_close_child`);\n                return this.close();\n            } else if (!cancelled) {\n                return this.watchForClose(proxyWin);\n            }\n        });\n    }\n\n    watchForUnload() {\n        const unloadWindowListener = addEventListener(window, 'unload', once(() => {\n            this.component.log(`navigate_away`);\n            this.destroy(new Error(`Window navigated away`));\n        }));\n\n        this.clean.register(unloadWindowListener.cancel);\n    }\n\n    runTimeout() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const timeout = this.props.timeout;\n\n            if (timeout) {\n                return this.initPromise.timeout(timeout, new Error(`Loading component timed out after ${ timeout } milliseconds`));\n            }\n        });\n    }\n\n    initChild(child : ChildExportsType<P>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.clean.set('child', child);\n            this.initPromise.resolve();\n        });\n    }\n\n    buildParentExports(win : ProxyWindow) : ParentExportsType<P> {\n        const onError    = (err) => this.onError(err);\n        const init       = (child) => this.initChild(child);\n        const close      = () => this.close();\n        const checkClose = () => this.checkClose(win);\n        const resize     = ({ width, height }) => this.resize({ width, height });\n\n        init.onError = onError;\n\n        return { init, close, checkClose, resize, onError };\n    }\n\n    resize({ width, height } : { width? : ?number, height? : ?number }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.event.trigger(EVENT.RESIZE, { width, height });\n        });\n    }\n\n    checkClose(win : ProxyWindow) : ZalgoPromise<void> {\n        return win.isClosed().then(closed => {\n            if (closed) {\n                return this.close();\n            }\n\n            return ZalgoPromise.delay(200)\n                .then(() => win.isClosed())\n                .then(secondClosed => {\n                    if (secondClosed) {\n                        return this.close();\n                    }\n                });\n        });\n    }\n\n    close() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`close`);\n            return this.event.trigger(EVENT.CLOSE);\n\n        }).then(() => {\n            if (this.child) {\n                this.child.close.fireAndForget().catch(noop);\n            }\n\n            return this.destroy(new Error(`Window closed`), false);\n        });\n    }\n\n    prerender(proxyPrerenderWin : ProxyWindow, { context, uid } : { context : $Values<typeof CONTEXT>, uid : string }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const prerenderTemplate = this.component.prerenderTemplate;\n\n            if (!prerenderTemplate) {\n                return;\n            }\n\n            let prerenderWindow = proxyPrerenderWin.getWindow();\n\n            if (!prerenderWindow || !isSameDomain(prerenderWindow) || !isBlankDomain(prerenderWindow)) {\n                return;\n            }\n\n            prerenderWindow = assertSameDomain(prerenderWindow);\n    \n            const doc = prerenderWindow.document;\n            const el = this.renderTemplate(prerenderTemplate, { context, uid, doc });\n\n            if (!el) {\n                return;\n            }\n\n            if (el.ownerDocument !== doc) {\n                throw new Error(`Expected prerender template to have been created with document from child window`);\n            }\n\n            writeElementToWindow(prerenderWindow, el);\n\n            let { width = false, height = false, element = 'body' } = this.component.autoResize || {};\n            element = getElementSafe(element, doc);\n            \n            if (element && (width || height)) {\n                onResize(element, ({ width: newWidth, height: newHeight }) => {\n                    this.resize({\n                        width:  width ? newWidth : undefined,\n                        height: height ? newHeight : undefined\n                    });\n                }, { width, height, win: prerenderWindow });\n            }\n        });\n    }\n\n    renderTemplate(renderer : (RenderOptionsType<P>) => ?HTMLElement, { context, uid, container, doc, frame, prerenderFrame } : { context : $Values<typeof CONTEXT>, uid : string, container? : HTMLElement, doc : Document, frame? : ?HTMLIFrameElement, prerenderFrame? : ?HTMLIFrameElement }) : ?HTMLElement {\n        // $FlowFixMe\n        return renderer.call(this, {\n            container,\n            context,\n            uid,\n            doc,\n            frame,\n            prerenderFrame,\n            focus:      () => this.focus(),\n            close:      () => this.close(),\n            state:      this.state,\n            props:      this.props,\n            tag:        this.component.tag,\n            dimensions: this.component.dimensions,\n            event:      this.event\n        });\n    }\n\n    renderContainer(proxyContainer : ProxyObject<HTMLElement>, { proxyFrame, proxyPrerenderFrame, context, uid } :\n        { context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyObject<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement> }) : ZalgoPromise<?ProxyObject<HTMLElement>> {\n        \n\n        return ZalgoPromise.hash({\n            container:      proxyContainer.get().then(elementReady),\n            // $FlowFixMe\n            frame:          proxyFrame ? proxyFrame.get() : null,\n            // $FlowFixMe\n            prerenderFrame: proxyPrerenderFrame ? proxyPrerenderFrame.get() : null\n        }).then(({ container, frame, prerenderFrame }) => {\n            const innerContainer = this.renderTemplate(this.component.containerTemplate, { context, uid, container, frame, prerenderFrame, doc: document });\n            if (innerContainer) {\n                appendChild(container, innerContainer);\n                this.clean.register(() => destroyElement(innerContainer));\n                return getProxyObject(innerContainer);\n            }\n        });\n    }\n\n    destroy(err? : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (!err) {\n                trigger = false;\n                err = new Error('Component destroyed');\n            }\n            this.component.log(`destroy`);\n            return this.onError(err, trigger);\n        }).then(() => {\n            return this.clean.all();\n        });\n    }\n\n    onError(err : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.handledErrors.indexOf(err) !== -1) {\n                return;\n            }\n\n            this.handledErrors.push(err);\n            this.initPromise.asyncReject(err);\n\n            if (trigger) {\n                return this.event.trigger(EVENT.ERROR, err);\n            }\n        });\n    }\n\n    openBridge(proxyWin : ProxyWindow, domain : string, context : $Values<typeof CONTEXT>) : ?ZalgoPromise<?CrossDomainWindowType> {\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            return ZalgoPromise.try(() => {\n                return proxyWin.awaitWindow();\n                \n            }).then(win => {\n                if (!bridge || !bridge.needsBridge({ win, domain }) || bridge.hasBridge(domain, domain)) {\n                    return;\n                }\n\n                const bridgeUrl = this.component.getBridgeUrl();\n\n                if (!bridgeUrl) {\n                    throw new Error(`Bridge needed to render ${ context }`);\n                }\n\n                const bridgeDomain = getDomainFromUrl(bridgeUrl);\n                bridge.linkUrl(win, domain);\n                return bridge.openBridge(normalizeMockUrl(bridgeUrl), bridgeDomain);\n            });\n        }\n    }\n}\n","/* @flow */\n\nimport { onCloseWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { ProxyWindow } from 'post-robot/src';\nimport { cleanup, type CleanupType, type EventEmitterType } from 'belter/src';\n\nimport { ParentComponent } from '../parent';\nimport { RENDER_DRIVERS, type ContextDriverType } from '../parent/drivers';\nimport type { Component } from '../component';\n\nexport type DelegatePropsType = {|\n    onClose : () => ?ZalgoPromise<void>,\n    onDisplay : () => ?ZalgoPromise<void>,\n    window : ?ProxyWindow\n|};\n\nexport type DelegateOptionsType = {|\n    context : string,\n    props : DelegatePropsType,\n    overrides : {\n        close : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    }\n|};\n\nexport type DelegateReturnType = {|\n    overrides : Object,\n    destroy : () => ZalgoPromise<void>\n|};\n\nexport class DelegateComponent<P>  {\n\n    component : Component<P>\n    source : CrossDomainWindowType\n    context : string\n    driver : ContextDriverType\n    props : DelegatePropsType\n    clean : CleanupType\n\n    focus : () => ZalgoPromise<void>\n    resize : ({ width? : ?number, height? : ?number }) => ZalgoPromise<void>\n    renderTemplate : Function\n\n    close : () => ZalgoPromise<void>\n    onError : (mixed) => ZalgoPromise<void>\n    event : EventEmitterType\n\n    constructor(component : Component<P>, source : CrossDomainWindowType, options : DelegateOptionsType) {\n        this.component = component;\n        this.context = options.context;\n        this.driver = RENDER_DRIVERS[options.context];\n        this.clean = cleanup(this);\n        \n        this.focus = ParentComponent.prototype.focus;\n        this.resize = ParentComponent.prototype.resize;\n        this.renderTemplate = ParentComponent.prototype.renderTemplate;\n\n        // $FlowFixMe\n        this.props = {};\n        \n        for (const propName of Object.keys(options.props)) {\n            const propDef = this.component.getPropDefinition(propName);\n            if (propDef && propDef.allowDelegate && options.props[propName]) {\n                // $FlowFixMe\n                this.props[propName] = options.props[propName];\n            }\n        }\n\n        this.close   = options.overrides.close;\n        this.onError = options.overrides.onError;\n        this.event   = options.overrides.event;\n\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n\n        this.watchForSourceClose(source);\n    }\n\n    getDelegate() : DelegateReturnType {\n        return {\n            overrides: this.getOverrides(),\n            destroy:   () => this.destroy()\n        };\n    }\n\n    watchForSourceClose(source : CrossDomainWindowType) {\n        const closeSourceWindowListener = onCloseWindow(source, () => this.destroy(), 3000);\n        this.clean.register(closeSourceWindowListener.cancel);\n    }\n\n    getOverrides() : { [string] : mixed } {\n        const overrides = {};\n        const self = this;\n\n        for (const key of this.driver.delegate) {\n            overrides[key] = function delegateOverride() : mixed {\n                // $FlowFixMe\n                return ParentComponent.prototype[key].apply(self, arguments);\n            };\n            overrides[key].__name__ = key;\n        }\n\n        return overrides;\n    }\n\n    destroy() : ZalgoPromise<void> {\n        return this.clean.all();\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { destroyElement, toCSS } from 'belter/src';\n\nimport { type RenderOptionsType } from '../../parent';\nimport { EVENT } from '../../constants';\n\nconst CLASS = {\n    VISIBLE:   'visible',\n    INVISIBLE: 'invisible'\n};\n\nexport function defaultContainerTemplate<P>({ uid, frame, prerenderFrame, doc, props, event, dimensions : { width, height } } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_CONTAINER__) {\n        if (!frame || !prerenderFrame) {\n            return;\n        }\n\n        const div = doc.createElement('div');\n        div.setAttribute('id', uid);\n        const style = doc.createElement('style');\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        style.appendChild(doc.createTextNode(`\n            #${ uid } {\n                display: inline-block;\n                position: relative;\n                width: ${ width };\n                height: ${ height };\n            }\n\n            #${ uid } > iframe {\n                display: inline-block;\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                top: 0;\n                left: 0;\n                transition: opacity .2s ease-in-out;\n            }\n\n            #${ uid } > iframe.${ CLASS.INVISIBLE } {\n                opacity: 0;\n            }\n\n            #${ uid } > iframe.${ CLASS.VISIBLE } {\n                opacity: 1;\n        }\n        `));\n\n        div.appendChild(frame);\n        div.appendChild(prerenderFrame);\n        div.appendChild(style);\n\n        prerenderFrame.classList.add(CLASS.VISIBLE);\n        frame.classList.add(CLASS.INVISIBLE);\n    \n        event.on(EVENT.RENDERED, () => {\n            prerenderFrame.classList.remove(CLASS.VISIBLE);\n            prerenderFrame.classList.add(CLASS.INVISIBLE);\n    \n            frame.classList.remove(CLASS.INVISIBLE);\n            frame.classList.add(CLASS.VISIBLE);\n    \n            setTimeout(() => {\n                destroyElement(prerenderFrame);\n            }, 1);\n        });\n\n        event.on(EVENT.RESIZE, ({ width: newWidth, height: newHeight }) => {\n            if (typeof newWidth === 'number') {\n                div.style.width = toCSS(newWidth);\n            }\n    \n            if (typeof newHeight === 'number') {\n                div.style.height = toCSS(newHeight);\n            }\n        });\n\n        return div;\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { type RenderOptionsType } from '../../parent';\n\nexport function defaultPrerenderTemplate<P>({ doc, props } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_PRERENDER__) {\n        const html = doc.createElement('html');\n        const body = doc.createElement('body');\n        const style = doc.createElement('style');\n        const spinner = doc.createElement('div');\n        spinner.classList.add('spinner');\n\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        html.appendChild(body);\n        body.appendChild(spinner);\n        body.appendChild(style);\n        style.appendChild(doc.createTextNode(`\n            html, body {\n                width: 100%;\n                height: 100%;\n            }\n\n            .spinner {\n                position: fixed;\n                max-height: 60vmin;\n                max-width: 60vmin;\n                height: 40px;\n                width: 40px;\n                top: 50%;\n                left: 50%;\n                box-sizing: border-box;\n                border: 3px solid rgba(0, 0, 0, .2);\n                border-top-color: rgba(33, 128, 192, 0.8);\n                border-radius: 100%;\n                animation: rotation .7s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: translateX(-50%) translateY(-50%) rotate(0deg);\n                }\n                to {\n                    transform: translateX(-50%) translateY(-50%) rotate(359deg);\n                }\n            }\n        `));\n\n        return html;\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, noop } from 'belter/src';\nimport { isWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ProxyWindow, toProxyWindow } from 'post-robot/src';\n\nimport { PROP_SERIALIZATION } from '../constants';\n\nexport type EventHandlerType<T> = (T) => void | ZalgoPromise<void>;\n\nexport type timeoutPropType = number;\nexport type windowPropType = CrossDomainWindowType | ProxyWindow;\nexport type cspNoncePropType = string;\nexport type closePropType = () => ZalgoPromise<void>;\nexport type focusPropType = () => ZalgoPromise<void>;\nexport type resizePropType = ({ width : ?number, height : ?number }) => ZalgoPromise<void>;\n\nexport type onDisplayPropType = EventHandlerType<void>;\nexport type onRenderedPropType = EventHandlerType<void>;\nexport type onRenderPropType = EventHandlerType<void>;\nexport type onClosePropType = EventHandlerType<void>;\nexport type onResizePropType = EventHandlerType<void>;\nexport type onErrorPropType = EventHandlerType<mixed>;\nexport type onPropsPropType<P> = ((PropsType<P>) => void) => void; // eslint-disable-line no-use-before-define\n\nexport type PropsInputType<P> = {\n    timeout? : timeoutPropType,\n    window? : windowPropType,\n    cspNonce? : cspNoncePropType,\n\n    onDisplay? : onDisplayPropType,\n    onRendered? : onRenderedPropType,\n    onRender? : onRenderPropType,\n    onClose? : onClosePropType,\n    onResize? : onResizePropType,\n    onError? : onErrorPropType,\n    onProps? : onPropsPropType<P>\n} & P;\n\nexport type PropsType<P> = {|\n    timeout? : timeoutPropType,\n    window? : ?windowPropType,\n    close? : ?closePropType,\n    focus? : ?focusPropType,\n    resize? : ?resizePropType,\n    cspNonce? : ?cspNoncePropType,\n\n    onDisplay : onDisplayPropType,\n    onRendered : onRenderedPropType,\n    onRender : onRenderPropType,\n    onClose : onClosePropType,\n    onResize : onResizePropType,\n    onError : onErrorPropType,\n    onProps : onPropsPropType<P>\n|} & P;\n\ntype PropDefinitionType<T, P, S : string> = {|\n    type : S,\n    alias? : string,\n    value? : ({ props : P, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => ?T,\n    required? : boolean,\n    queryParam? : boolean | string | ({ value : T }) => (string | ZalgoPromise<string>),\n    queryValue? : ({ value : T }) => (ZalgoPromise<mixed> | mixed),\n    sendToChild? : boolean,\n    allowDelegate? : boolean,\n    validate? : ({ value : T, props : PropsInputType<P> }) => void,\n    decorate? : ({ value : T, props : PropsType<P>, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => T,\n    default? : ({ props : P, state : Object }) => ?T,\n    sameDomain? : boolean,\n    serialization? : $Values<typeof PROP_SERIALIZATION>,\n    childDecorate? : ({ value : T, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void>, onProps : ((PropsType<P>) => void) => void, resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void> }) => ?T\n|};\n\nexport type BooleanPropDefinitionType<T : boolean, P> = PropDefinitionType<T, P, 'boolean'>;\nexport type StringPropDefinitionType<T : string, P> = PropDefinitionType<T, P, 'string'>;\nexport type NumberPropDefinitionType<T : number, P> = PropDefinitionType<T, P, 'number'>;\nexport type FunctionPropDefinitionType<T : Function, P> = PropDefinitionType<T, P, 'function'>;\nexport type ArrayPropDefinitionType<T : Array<*> | $ReadOnlyArray<*>, P> = PropDefinitionType<T, P, 'array'>; // eslint-disable-line flowtype/no-mutable-array\nexport type ObjectPropDefinitionType<T : Object, P> = PropDefinitionType<T, P, 'object'>;\n\nexport type MixedPropDefinitionType<P> = BooleanPropDefinitionType<*, P> | StringPropDefinitionType<*, P> | NumberPropDefinitionType<*, P> | FunctionPropDefinitionType<*, P> | ObjectPropDefinitionType<*, P> | ArrayPropDefinitionType<*, P>;\n\nexport type UserPropsDefinitionType<P> = {\n    [string] : MixedPropDefinitionType<P>\n};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type BuiltInPropsDefinitionType<P> = {\n    timeout : NumberPropDefinitionType<timeoutPropType, P>,\n    window : ObjectPropDefinitionType<windowPropType, P>,\n    close : FunctionPropDefinitionType<closePropType, P>,\n    focus : FunctionPropDefinitionType<focusPropType, P>,\n    resize : FunctionPropDefinitionType<resizePropType, P>,\n\n    onDisplay : FunctionPropDefinitionType<onDisplayPropType, P>,\n    onRendered : FunctionPropDefinitionType<onRenderedPropType, P>,\n    onRender : FunctionPropDefinitionType<onRenderPropType, P>,\n    onClose : FunctionPropDefinitionType<onClosePropType, P>,\n    onResize : FunctionPropDefinitionType<onClosePropType, P>,\n    onError : FunctionPropDefinitionType<onErrorPropType, P>,\n    onProps : FunctionPropDefinitionType<onPropsPropType<P>, P>\n};\n\nconst defaultNoop = () => noop;\nconst decorateOnce = ({ value }) => once(value);\n\nexport function getBuiltInProps<P>() : BuiltInPropsDefinitionType<P> {\n    return {\n        window: {\n            type:          'object',\n            sendToChild:   false,\n            required:      false,\n            allowDelegate: true,\n            validate({ value } : { value : CrossDomainWindowType | ProxyWindow }) {\n                if (!isWindow(value) && !ProxyWindow.isProxyWindow(value)) {\n                    throw new Error(`Expected Window or ProxyWindow`);\n                }\n            },\n            decorate({ value } : { value : CrossDomainWindowType | ProxyWindow }) : ProxyWindow {\n                return toProxyWindow(value);\n            }\n        },\n\n        timeout: {\n            type:        'number',\n            required:    false,\n            sendToChild: false\n        },\n\n        close: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ close }) => close\n        },\n\n        focus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ focus }) => focus\n        },\n\n        resize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ resize }) => resize\n        },\n\n        cspNonce: {\n            type:     'string',\n            required: false\n        },\n\n        getParent: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParent }) => getParent\n        },\n\n        getParentDomain: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParentDomain }) => getParentDomain\n        },\n\n        onDisplay: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onRendered: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onRender: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onClose: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onResize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop\n        },\n\n        onError: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ onError }) => onError\n        },\n\n        onProps: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            default:       defaultNoop,\n            childDecorate: ({ onProps }) => onProps\n        }\n    };\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { setup as setupPostRobot, on, send, bridge, toProxyWindow, destroy as destroyPostRobot } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindow, getDomainFromUrl, type CrossDomainWindowType, isSameTopWindow, getDomain, matchDomain, isSameDomain } from 'cross-domain-utils/src';\nimport { isRegex, noop, isElement } from 'belter/src';\n\nimport { ChildComponent, getChildPayload } from '../child';\nimport { ParentComponent, type RenderOptionsType, type ParentHelpers } from '../parent';\nimport { DelegateComponent } from '../delegate';\nimport { CONTEXT, POST_MESSAGE, WILDCARD, DEFAULT_DIMENSIONS } from '../constants';\nimport { react, angular, vue, angular2 } from '../drivers';\nimport { getGlobal, destroyGlobal } from '../lib';\nimport type { CssDimensionsType, StringMatcherType } from '../types';\n\nimport { validate } from './validate';\nimport { defaultContainerTemplate, defaultPrerenderTemplate } from './templates';\nimport { getBuiltInProps, type UserPropsDefinitionType, type BuiltInPropsDefinitionType, type PropsInputType, type PropsType, type MixedPropDefinitionType } from './props';\n\ntype LoggerPayload = { [string] : ?string };\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype Logger = {\n    debug : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    info : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    warn : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    error : (event : string, payload? : LoggerPayload) => any // eslint-disable-line flowtype/no-weak-types\n};\n\n/*  Component\n    ---------\n\n    This is the spec for the component. The idea is, when I call zoid.create(), it will create a new instance\n    of Component with the blueprint needed to set up ParentComponents and ChildComponents.\n\n    This is the one portion of code which is required by -- and shared to -- both the parent and child windows, and\n    contains all of the configuration needed for them to set themselves up.\n*/\n\nexport type ComponentOptionsType<P> = {|\n\n    tag : string,\n\n    url : string | ({ props : PropsType<P> }) => string,\n    domain? : string | RegExp,\n    bridgeUrl? : string,\n\n    props? : UserPropsDefinitionType<P>,\n\n    dimensions? : CssDimensionsType,\n    autoResize? : { width? : boolean, height? : boolean, element? : string },\n\n    allowedParentDomains? : StringMatcherType,\n\n    attributes? : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    },\n\n    defaultContext? : $Values<typeof CONTEXT>,\n\n    containerTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n\n    validate? : ({ props : PropsInputType<P> }) => void,\n\n    logger? : Logger\n|};\n\ntype ZoidRenderer = {|\n    render : (container? : string | HTMLElement, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    renderTo : (target : CrossDomainWindowType, container? : string, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>\n|};\n\nexport type ZoidComponentInstance<P> = {| ...ParentHelpers<P>, ...ZoidRenderer |};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type ZoidComponent<P> = {\n    (PropsInputType<P>) : ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    xprops? : PropsType<P>,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>\n};\n\nexport class Component<P> {\n\n    tag : string\n    name : string\n    \n    url : string | ({ props : PropsType<P> }) => string\n    domain : void | string | RegExp\n    bridgeUrl : void | string\n\n    props : UserPropsDefinitionType<P>\n    builtinProps : BuiltInPropsDefinitionType<P>\n\n    dimensions : CssDimensionsType\n    autoResize : void | { width? : boolean, height? : boolean, element? : string }\n\n    allowedParentDomains : StringMatcherType\n\n    defaultContext : $Values<typeof CONTEXT>\n    \n    attributes : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    }\n\n    containerTemplate : (RenderOptionsType<P>) => ?HTMLElement\n    prerenderTemplate : ?(RenderOptionsType<P>) => ?HTMLElement\n\n    validate : void | ({ props : PropsInputType<P> }) => void\n\n    driverCache : { [string] : mixed }\n\n    xprops : ?PropsType<P>\n\n    logger : Logger\n\n    propNames : $ReadOnlyArray<string>\n\n    constructor(options : ComponentOptionsType<P>) {\n        validate(options);\n\n        // The tag name of the component. Used by some drivers (e.g. angular) to turn the component into an html element,\n        // e.g. <my-component>\n\n        this.tag = options.tag;\n        this.name = this.tag.replace(/-/g, '_');\n\n        this.allowedParentDomains = options.allowedParentDomains || WILDCARD;\n\n        const global = getGlobal();\n        global.components = global.components || {};\n\n        if (global.components[this.tag]) {\n            throw new Error(`Can not register multiple components with the same tag: ${ this.tag }`);\n        }\n\n        // A json based spec describing what kind of props the component accepts. This is used to validate any props before\n        // they are passed down to the child.\n\n        this.builtinProps = getBuiltInProps();\n        this.props = options.props || {};\n\n        // The dimensions of the component, e.g. { width: '300px', height: '150px' }\n\n        const { width = DEFAULT_DIMENSIONS.WIDTH, height = DEFAULT_DIMENSIONS.HEIGHT } = options.dimensions || {};\n        this.dimensions = { width, height };\n\n        this.url = options.url;\n        this.domain = options.domain;\n        this.bridgeUrl = options.bridgeUrl;\n\n        this.attributes = options.attributes || {};\n        this.attributes.iframe = this.attributes.iframe || {};\n        this.attributes.popup = this.attributes.popup || {};\n\n        this.defaultContext = options.defaultContext || CONTEXT.IFRAME;\n\n        this.autoResize = options.autoResize;\n\n        if (options.containerTemplate) {\n            this.containerTemplate = options.containerTemplate;\n        } else if (__ZOID__.__DEFAULT_CONTAINER__) {\n            this.containerTemplate = defaultContainerTemplate;\n        }\n\n        if (options.prerenderTemplate) {\n            this.prerenderTemplate = options.prerenderTemplate;\n        } else if (__ZOID__.__DEFAULT_PRERENDER__) {\n            this.prerenderTemplate = defaultPrerenderTemplate;\n        }\n\n        this.validate = options.validate;\n\n        this.logger = options.logger || {\n            debug: noop,\n            info:  noop,\n            warn:  noop,\n            error: noop\n        };\n\n        this.registerChild();\n        this.listenDelegate();\n\n        global.components[this.tag] = this;\n    }\n\n    getPropNames() : $ReadOnlyArray<string> {\n        if (this.propNames) {\n            return this.propNames;\n        }\n\n        const propNames = Object.keys(this.props);\n        for (const key of Object.keys(this.builtinProps)) {\n            if (propNames.indexOf(key) === -1) {\n                propNames.push(key);\n            }\n        }\n\n        this.propNames = propNames;\n        return propNames;\n    }\n\n    getPropDefinition(name : string) : MixedPropDefinitionType<P> {\n        return this.props[name] || this.builtinProps[name];\n    }\n\n    driver(name : string, dep : mixed) : mixed {\n        if (__ZOID__.__FRAMEWORK_SUPPORT__) {\n            const drivers = { react, angular, vue, angular2 };\n\n            if (!drivers[name]) {\n                throw new Error(`Could not find driver for framework: ${ name }`);\n            }\n    \n            this.driverCache = this.driverCache || {};\n    \n            if (!this.driverCache[name]) {\n                this.driverCache[name] = drivers[name].register(this, dep);\n            }\n    \n            return this.driverCache[name];\n        } else {\n            throw new Error(`Driver support not enabled`);\n        }\n    }\n\n    registerChild() {\n        if (this.isChild()) {\n            if (window.xprops) {\n                throw new Error(`Can not register ${ this.name } as child - can not attach multiple components to the same window`);\n            }\n\n            const child = new ChildComponent(this);\n            window.xprops = this.xprops = child.getProps();\n        }\n    }\n\n    listenDelegate() {\n        on(`${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`, () => {\n            return true;\n        });\n\n        on(`${ POST_MESSAGE.DELEGATE }_${ this.name }`, ({ source, data: { context, props, overrides } }) => {\n            const delegate = new DelegateComponent(this, source, { context, props, overrides });\n            return delegate.getDelegate();\n        });\n    }\n\n    canRenderTo(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return send(win, `${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`).then(({ data }) => {\n            return data;\n        }).catch(() => {\n            return false;\n        });\n    }\n\n    getUrl(props : PropsType<P>) : string {\n        if (typeof this.url === 'function') {\n            return this.url({ props });\n        }\n\n        return this.url;\n    }\n\n    getChildDomain(props : PropsType<P>) : string {\n        if (this.domain && typeof this.domain === 'string') {\n            return this.domain;\n        }\n\n        return getDomainFromUrl(this.getUrl(props));\n    }\n\n    getDomain(props : PropsType<P>) : string | RegExp {\n        if (this.domain && isRegex(this.domain)) {\n            return this.domain;\n        }\n\n        return this.getChildDomain(props);\n    }\n\n    getBridgeUrl() : ?string {\n        if (this.bridgeUrl) {\n            return this.bridgeUrl;\n        }\n    }\n\n    isChild() : boolean {\n        const payload = getChildPayload();\n        return Boolean(payload && payload.tag === this.tag && payload.childDomain === getDomain());\n    }\n\n    getDefaultContainer(context : $Values<typeof CONTEXT>, container? : string | HTMLElement) : string | HTMLElement {\n        if (container) {\n            if (typeof container !== 'string' && !isElement(container)) {\n                throw new TypeError(`Expected string or element selector to be passed`);\n            }\n\n            return container;\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return 'body';\n        }\n\n        throw new Error(`Expected element to be passed to render iframe`);\n    }\n\n    getDefaultContext(context : ?$Values<typeof CONTEXT>, props : PropsInputType<P>) : $Values<typeof CONTEXT> {\n        if (props.window) {\n            return toProxyWindow(props.window).getType();\n        }\n\n        if (context) {\n            if (context !== CONTEXT.IFRAME && context !== CONTEXT.POPUP) {\n                throw new Error(`Unrecognized context: ${ context }`);\n            }\n            \n            return context;\n        }\n\n        return this.defaultContext;\n    }\n\n    init(props : PropsInputType<P>) : ZoidComponentInstance<P> {\n\n        // $FlowFixMe\n        props = props || {};\n        \n        const parent = new ParentComponent(this, props);\n\n        const render = (target, container, context) => ZalgoPromise.try(() => {\n            if (!isWindow(target)) {\n                throw new Error(`Must pass window to renderTo`);\n            }\n\n            context = this.getDefaultContext(context, props);\n            container = this.getDefaultContainer(context, container);\n            return parent.render(target, container, context);\n        });\n\n        return {\n            ...parent.getHelpers(),\n            render:   (container, context) => render(window, container, context),\n            renderTo: (target, container, context) => render(target, container, context)\n        };\n    }\n\n    checkAllowRender(target : CrossDomainWindowType, domain : string | RegExp, container : string | HTMLElement) {\n        if (target === window) {\n            return;\n        }\n\n        if (!isSameTopWindow(window, target)) {\n            throw new Error(`Can only renderTo an adjacent frame`);\n        }\n\n        const origin = getDomain();\n\n        if (!matchDomain(domain, origin) && !isSameDomain(target)) {\n            throw new Error(`Can not render remotely to ${ domain.toString() } - can only render to ${ origin }`);\n        }\n\n        if (container && typeof container !== 'string') {\n            throw new Error(`Container passed to renderTo must be a string selector, got ${ typeof container } }`);\n        }\n    }\n\n    log(event : string, payload? : LoggerPayload) {\n        this.logger.info(`${ this.name }_${ event }`, payload);\n    }\n\n    registerActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        const global = getGlobal();\n        global.activeComponents = global.activeComponents || [];\n        global.activeComponents.push(instance);\n    }\n\n    destroyActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        const global = getGlobal();\n        global.activeComponents = global.activeComponents || [];\n        global.activeComponents.splice(global.activeComponents.indexOf(instance), 1);\n    }\n}\n\nexport type ComponentDriverType<P, T : mixed> = {|\n    register : (Component<P>, T) => mixed\n|};\n\nexport function create<P>(options : ComponentOptionsType<P>) : ZoidComponent<P> {\n    setupPostRobot();\n\n    const component : Component<P> = new Component(options);\n\n    const init = (props) => component.init(props);\n    init.driver = (name, dep) => component.driver(name, dep);\n    init.isChild = () => component.isChild();\n    init.canRenderTo = (win) => component.canRenderTo(win);\n    init.xprops = component.xprops;\n    \n    return init;\n}\n\nexport function destroyAll() : ZalgoPromise<void> {\n    if (bridge) {\n        bridge.destroyBridges();\n    }\n\n    const results = [];\n\n    const global = getGlobal();\n    global.activeComponents = global.activeComponents || [];\n    while (global.activeComponents.length) {\n        results.push(global.activeComponents[0].destroy(new Error(`zoid destroyed all`), false));\n    }\n\n    return ZalgoPromise.all(results).then(noop);\n}\n\nexport const destroyComponents = destroyAll;\n\nexport function destroy() {\n    destroyAll();\n    destroyGlobal();\n    destroyPostRobot();\n}\n","/* @flow */\n\nimport { isPerc, isPx, values } from 'belter/src';\n\nimport { CONTEXT, PROP_TYPE } from '../constants';\n\nimport type { ComponentOptionsType } from './index';\n\nfunction validatePropDefinitions<P>(options : ComponentOptionsType<P>) {\n\n    if (options.props && !(typeof options.props === 'object')) {\n        throw new Error(`Expected options.props to be an object`);\n    }\n\n    const PROP_TYPE_LIST = values(PROP_TYPE);\n\n    if (options.props) {\n        for (const key of Object.keys(options.props)) {\n            const prop = options.props[key];\n\n            if (!prop || !(typeof prop === 'object')) {\n                throw new Error(`Expected options.props.${ key } to be an object`);\n            }\n\n            if (!prop.type) {\n                throw new Error(`Expected prop.type`);\n            }\n\n            if (PROP_TYPE_LIST.indexOf(prop.type) === -1) {\n                throw new Error(`Expected prop.type to be one of ${ PROP_TYPE_LIST.join(', ') }`);\n            }\n\n            if (prop.required && prop.default) {\n                throw new Error(`Required prop can not have a default value`);\n            }\n\n            if (prop.type === PROP_TYPE.FUNCTION && prop.queryParam && !prop.queryValue) {\n                throw new Error(`Do not pass queryParam for function prop`);\n            }\n        }\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function validate<P>(options : ?ComponentOptionsType<P>) { // eslint-ignore-line\n\n    if (!options) {\n        throw new Error(`Expected options to be passed`);\n    }\n\n    // eslint-disable-next-line security/detect-unsafe-regex, unicorn/no-unsafe-regex\n    if (!options.tag || !options.tag.match(/^([a-z0-9][a-z0-9-]*)+[a-z0-9]+$/)) {\n        throw new Error(`Invalid options.tag: ${ options.tag }`);\n    }\n\n    validatePropDefinitions(options);\n\n    if (options.dimensions) {\n        if (options.dimensions && !isPx(options.dimensions.width) && !isPerc(options.dimensions.width)) {\n            throw new Error(`Expected options.dimensions.width to be a px or % string value`);\n        }\n\n        if (options.dimensions && !isPx(options.dimensions.height) && !isPerc(options.dimensions.height)) {\n            throw new Error(`Expected options.dimensions.height to be a px or % string value`);\n        }\n    }\n\n    if (options.defaultContext) {\n        if (options.defaultContext !== CONTEXT.IFRAME && options.defaultContext !== CONTEXT.POPUP) {\n            throw new Error(`Unsupported context type: ${ options.defaultContext || 'unknown' }`);\n        }\n    }\n\n    if (!options.url) {\n        throw new Error(`Must pass url`);\n    }\n\n    if (typeof options.url !== 'string' && typeof options.url !== 'function') {\n        throw new TypeError(`Expected url to be string or function`);\n    }\n\n    if (options.prerenderTemplate && typeof options.prerenderTemplate !== 'function') {\n        throw new Error(`Expected options.prerenderTemplate to be a function`);\n    }\n\n    if ((options.containerTemplate || !__ZOID__.__DEFAULT_CONTAINER__) && typeof options.containerTemplate !== 'function') {\n        throw new Error(`Expected options.containerTemplate to be a function`);\n    }\n}\n","/* @flow */\n\nexport { PopupOpenError } from 'belter/src';\nexport { create, destroy, destroyComponents, destroyAll, Component } from './component';\nexport type { ZoidComponent, ZoidComponentInstance } from './component';\nexport type { RenderOptionsType } from './parent';\nexport { PROP_TYPE, PROP_SERIALIZATION, CONTEXT, EVENT } from './constants';\n"],"sourceRoot":""}