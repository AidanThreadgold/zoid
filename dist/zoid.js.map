{"version":3,"sources":["webpack://zoid/webpack/universalModuleDefinition","webpack://zoid/webpack/bootstrap","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://zoid/./node_modules/zalgo-promise/src/utils.js","webpack://zoid/./node_modules/zalgo-promise/src/exceptions.js","webpack://zoid/./node_modules/zalgo-promise/src/flush.js","webpack://zoid/./node_modules/zalgo-promise/src/promise.js","webpack://zoid/./node_modules/cross-domain-utils/src/util.js","webpack://zoid/./node_modules/cross-domain-utils/src/constants.js","webpack://zoid/./node_modules/cross-domain-utils/src/utils.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://zoid/./node_modules/belter/src/util.js","webpack://zoid/./node_modules/belter/src/dom.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://zoid/./node_modules/belter/src/css.js","webpack://zoid/./node_modules/post-robot/src/conf/config.js","webpack://zoid/./node_modules/post-robot/src/conf/constants.js","webpack://zoid/./node_modules/post-robot/src/global.js","webpack://zoid/./node_modules/post-robot/src/lib/hello.js","webpack://zoid/./node_modules/post-robot/src/lib/windows.js","webpack://zoid/./node_modules/universal-serialize/src/constants.js","webpack://zoid/./node_modules/universal-serialize/src/common.js","webpack://zoid/./node_modules/universal-serialize/src/serialize.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/function.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/error.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/promise.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/regex.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/date.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/array.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/object.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/string.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/number.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/null.js","webpack://zoid/./node_modules/universal-serialize/src/deserialize.js","webpack://zoid/./node_modules/post-robot/src/bridge/common.js","webpack://zoid/./node_modules/post-robot/src/bridge/parent.js","webpack://zoid/./node_modules/post-robot/src/bridge/setup.js","webpack://zoid/./node_modules/post-robot/src/bridge/bridge.js","webpack://zoid/./node_modules/post-robot/src/bridge/child.js","webpack://zoid/./node_modules/post-robot/src/serialize/window.js","webpack://zoid/./node_modules/post-robot/src/serialize/function.js","webpack://zoid/./node_modules/post-robot/src/serialize/serialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/promise.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/strategies.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/index.js","webpack://zoid/./node_modules/post-robot/src/lib/compat.js","webpack://zoid/./node_modules/post-robot/src/drivers/listeners.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/types.js","webpack://zoid/./node_modules/post-robot/src/index.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/index.js","webpack://zoid/./node_modules/post-robot/src/public/on.js","webpack://zoid/./node_modules/post-robot/src/public/send.js","webpack://zoid/./node_modules/post-robot/src/setup.js","webpack://zoid/./node_modules/post-robot/src/clean.js","webpack://zoid/./src/lib/global.js","webpack://zoid/./src/lib/serialize.js","webpack://zoid/./src/constants.js","webpack://zoid/./src/child/props.js","webpack://zoid/./src/child/window.js","webpack://zoid/./src/child/index.js","webpack://zoid/./src/parent/drivers.js","webpack://zoid/./src/parent/props.js","webpack://zoid/./src/parent/index.js","webpack://zoid/./src/delegate/index.js","webpack://zoid/./src/component/templates/container.js","webpack://zoid/./src/component/templates/component.js","webpack://zoid/./src/component/props.js","webpack://zoid/./src/component/component.js","webpack://zoid/./src/component/validate.js","webpack://zoid/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","isPromise","item","Promise","window","Window","constructor","toString","then","err","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","_this","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","_proto","prototype","Error","dispatch","_this2","setTimeout","indexOf","push","j","dispatchPossiblyUnhandledError","asyncReject","_this3","_loop","_handlers$i","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","_this4","clearTimeout","toPromise","TypeError","all","promises","count","results","_loop2","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","isRegex","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","location","protocol","getParent","parent","getOpener","opener","canReadFromWindow","getActualDomain","host","getDomain","domain","mockDomain","isActuallySameDomain","desc","getOwnPropertyDescriptor","isSameDomain","assertSameDomain","isAncestorParent","child","childParent","getParents","getFrames","frames","len","frame","getAllChildFrames","_i3","_getFrames2","_i5","_getAllChildFrames2","getTop","top","_i7","_getAllChildFrames4","getAllFramesInWindow","concat","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getUserAgent","navigator","mockUserAgent","userAgent","getFrameByName","winFrames","_i9","childFrame","isOpener","getAncestor","anyMatch","collection1","collection2","_i17","item1","_i19","getDistanceFromTop","distance","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","onCloseWindow","callback","maxtime","Infinity","check","isWindow","obj","normalizeMockUrl","objectIDs","awaitFrameLoadPromises","counter","Date","now","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","base64encode","str","btoa","Buffer","from","uniqueID","chars","replace","charAt","floor","toISOString","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","inlineMemoize","logic","cache","__inline_memoize_cache__","noop","once","called","stringifyError","level","newErr","extend","isDefined","cleanup","tasks","cleaned","register","task","pop","assertExists","thing","isDocumentReady","document","body","readyState","urlEncode","waitForDocumentReady","interval","setInterval","clearInterval","parseQuery","queryString","params","_i2","_queryString$split2","pair","decodeURIComponent","extendQuery","originalQuery","props","filter","appendChild","container","isElement","element","Element","nodeType","style","getElementSafe","id","querySelector","elementReady","el","PopupOpenError","awaitFrameLoad","addEventListener","cleanIframes","linkFrameWindow","awaitFrameWindow","loadedFrame","iframe","options","attempts","tag","styleText","createElement","class","className","setAttribute","attributes","_i6","_Object$keys2","styleSheet","cssText","createTextNode","html","innerHTML","allowTransparency","backgroundColor","border","getElement","event","removeEventListener","destroyElement","removeChild","isElementClosed","onResize","_temp","_ref2","_ref2$width","width","_ref2$height","height","_ref2$interval","_ref2$win","currentWidth","offsetWidth","currentHeight","offsetHeight","observer","newWidth","newHeight","ResizeObserver","observe","MutationObserver","childList","subtree","characterData","loop","disconnect","isPerc","test","isPx","toNum","parseInt","toPx","toCSS","normalizeDimension","dim","max","CHILD_WINDOW_TIMEOUT","ACK_TIMEOUT","ACK_TIMEOUT_KNOWN","RES_TIMEOUT","MESSAGE_TYPE","REQUEST","RESPONSE","ACK","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","BRIDGE_NAME_PREFIX","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","reset","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","getHelloPromise","sayHello","_ref3","send","instanceID","_ref4","data","getWindowInstanceID","_ref5","_ref6","awaitWindowHello","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","_SERIALIZER","_ref","code","toJSON","defaultSerializers","DESERIALIZER","_DESERIALIZER","RegExp","defaultDeserializers","needsBridgeForBrowser","needsBridgeForWin","needsBridgeForDomain","needsBridge","getBridgeName","sanitizedDomain","isBridge","documentBodyReady","registerRemoteWindow","findRemoteWindow","remoteWinPromise","registerRemoteSendMessage","sendMessage","remoteWin","remoteDomain","fireAndForget","rejectRemoteSendMessage","linkWindow","popupWindowsByName","popupWindowsByWin","_popupWindowsByName$k2","winName","details","setupBridge","windowOpen","on","receiveMessage","open","last","bridgePromise","bridge","winDetails","listenForOpenTunnel","openTunnelToParent","canary","tunnelWindows","parentWindow","_tunnelWindows$keys2","cleanTunnelWindows","addTunnelWindow","tunnelWindow","setupOpenTunnelToParent","openTunnelToOpener","cleanupProxyWindows","idToProxyWindow","_idToProxyWindow$keys2","shouldClean","ProxyWindow","serializedWindow","actualWindow","isProxyWindow","actualWindowPromise","setWindow","memoizedPromiseFunction","_len2","_key2","memoizePromise","getType","isPopup","isIframe","setLocation","href","setName","frameElement","close","focus","isClosed","_this5","getWindow","awaitWindow","matchWindow","_this6","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","listenForFunctionCalls","__id__","__name__","serializeMessage","_serialize","serializers","serializer","serializePromise","deserializeMessage","_deserialize","deserializers","parse","deserializer","serializedPromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","_arguments","__origin__","__source__","deserializeFunction","_ref7","SEND_MESSAGE_STRATEGIES","_serializeMessage","serializedMessage","success","strategyName","dom","forEach","postMessage","messagingChild","messagingParent","sendBridgeMessage","foreignGlobal","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","_i4","_domainListeners$__DO2","_domainListeners$__DO3","listener","regex","RECEIVE_MESSAGE_TYPES","_RECEIVE_MESSAGE_TYPE","sendResponse","ack","response","pathname","handleError","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","_win2","_i8","_i10","_domain2","_i12","existingListener","regexListeners","regexListener","strDomain","errorHandler","responseTimeout","childTimeout","reqPromises","requestPromise","actualParent","_i15","_getFrames8","isAncestor","hasResult","markResponseListenerErrored","responseListener","addResponseListener","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cycleTime","cycle","min","internalSerializeMessage","internalDeserializeMessage","cleanUpWindow","_requestPromises$get2","globalFor","getProxyElement","resize","openBridge","bridges","bridgeFrames","src","openBridgeFrame","linkUrl","hasBridge","destroyBridges","_bridgeFrames$keys2","initialized","messageEvent","sourceElement","originalEvent","messageListener","listenForMessages","initHello","setup","ZOID","POST_MESSAGE","PROP_TYPE","PROP_SERIALIZATION","DOTIFY","BASE64","CONTEXT","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","EVENT","RENDER","RENDERED","DISPLAY","CLOSE","PROPS","normalizeChildProp","component","helpers","prop","getPropDefinition","childDecorate","parseChildWindowName","windowName","_windowName$split","zoidcomp","encodedPayload","atob","base64decode","getChildPayload","ChildComponent","parentComponentWindow","onPropHandlers","autoResize","childPayload","__ZOID__","version","getParentComponentWindow","checkParentDomain","initialProps","getPropsByRef","setProps","watchForClose","init","buildExports","watchForResize","getHelpers","onProps","allowedParentDomains","ref","getNthParent","ancestor","_getAllFramesInWindow2","windows","getProps","isUpdate","existingProps","sameDomain","alias","_component$getPropNam2","getPropNames","normalizeChildProps","_this$onPropHandlers2","checkClose","destroy","getAutoResize","_ref3$width","_ref3$height","_ref3$element","_this4$getAutoResize","updateProps","RENDER_DRIVERS","getQueryParam","queryParam","getQueryValue","queryValue","openOnClick","openFrame","title","proxyFrame","frameWatcher","clean","openPrerenderFrame","openPrerender","proxyWin","proxyPrerenderFrame","prerenderFrame","prerenderFrameWindow","delegate","proxyContainer","_this3$component$dime","dimensions","left","outerWidth","round","screenX","screen","outerHeight","screenY","status","toolbar","menubar","resizable","scrollbars","popup","ParentComponent","driver","initPromise","handledErrors","state","setupEvents","registerActiveComponent","destroyActiveComponent","watchForUnload","triggered","eventName","handlerList","cancelled","trigger","_len3","_key3","triggerOnce","_len4","_key4","onRender","onDisplay","onRendered","onClose","render","log","initialDomain","getInitialDomain","checkAllowRender","buildUrl","getProxyContainer","renderContainer","setState","setProxyWin","prerender","loadUrl","setWindowName","buildWindowName","runTimeout","containerElement","buildChildPayload","getPropsRef","getPropsForChild","propRef","_ref7$target","getWindowRef","buildParentExports","_ref8","validate","instance","propNames","aliases","propDef","default","_Object$keys4","decorate","normalizeProps","_this$component$getPr2","required","propsDef","builtinProps","serialization","dotify","prefix","newobj","every","_Object$keys6","dotkey","query","originalUrl","originalHash","_url$split","_originalUrl$split","hashString","extendUrl","getUrl","sendToChild","_this7","_this8","_this9","_this10","windowProp","_this11","_this12","_this13","_this$component$getPr4","propName","allowDelegate","overridesPromise","overrides","_ref9","_this$driver$delegate2","_this14","_this15","closeWindowListener","_this16","unloadWindowListener","_this17","initChild","_this18","_this19","_ref10","_ref11","_this20","_this21","secondClosed","_this22","proxyPrerenderWin","_ref12","_this23","prerenderTemplate","prerenderWindow","isBlankDomain","renderTemplate","tagName","children","writeElementToWindow","_ref13","_ref13$width","_ref13$height","_ref13$element","_ref14","renderer","_ref15","_this24","_ref16","_this25","_ref17","innerContainer","containerTemplate","_this26","_this27","_this28","bridgeUrl","getBridgeUrl","bridgeDomain","DelegateComponent","watchForSourceClose","getDelegate","getOverrides","closeSourceWindowListener","CLASS","VISIBLE","INVISIBLE","defaultContainerTemplate","_ref$dimensions","classList","add","remove","div","defaultPrerenderTemplate","spinner","defaultNoop","decorateOnce","Component","defaultContext","driverCache","xprops","logger","PROP_TYPE_LIST","validatePropDefinitions","components","_ref$width","_ref$height","debug","info","warn","registerChild","listenDelegate","dep","isChild","_ref2$data","canRenderTo","payload","getDefaultContainer","getDefaultContext","renderTo","activeComponents","destroyAll","__webpack_exports__","component_destroyAll","component_Component"],"mappings":"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","file":"zoid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"zoid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zoid\"] = factory();\n\telse\n\t\troot[\"zoid\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<*>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : [*] | [*, *] | [*, *, *] | [*, *, *, *] | [*, *, *, *, *] | [*, *, *, *, *, *] | [*, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *, *] | Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : { [string] : * }>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        noop(obj === obj);  // eslint-disable-line no-self-compare\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        noop(obj && obj.__cross_domain_utils_window_check__);\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let values = this.values;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                keys.push(key);\n                values.push(value);\n            } else {\n                values[index] = value;\n            }\n\n        } else {\n\n            let name = this.name;\n            let entry = key[name];\n\n            if (entry && entry[0] === key) {\n                entry[1] = value;\n            } else {\n                defineProperty(key, name, {\n                    value:    [ key, value ],\n                    writable: true\n                });\n            }\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                return;\n            }\n\n            return this.values[index];\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return entry[1];\n            }\n        }\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index !== -1) {\n                keys.splice(index, 1);\n                this.values.splice(index, 1);\n            }\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                entry[0] = entry[1] = undefined;\n            }\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let index = safeIndexOf(this.keys, key);\n            return index !== -1;\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(str);\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob(str);\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs(args : Array<mixed>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoize<R>(method : (...args : Array<any>) => R, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : ((...args : Array<any>) => R) {\n    let cacheMap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedFunction(...args : Array<any>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    }\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = method.apply(this, arguments)\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (typeof err.toString === 'function') {\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && typeof item.toString === 'function') {\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Object | Array<mixed>> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n\n    return thing;\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<Element> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : Element, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    while (documentElement.children && documentElement.children.length) {\n        documentElement.removeChild(documentElement.children[0]);\n    }\n\n    while (el.children.length) {\n        documentElement.appendChild(el.children[0]);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n\n    if (frame.contentWindow) {\n        return ZalgoPromise.resolve(frame.contentWindow);\n    }\n\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement, attempts : number = 3) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    \n        // $FlowFixMe\n        let win = frame.contentWindow;\n    \n        if (win) {\n            try {\n                // $FlowFixMe\n                noop(win.name);\n            } catch (err) {\n                el.removeChild(frame);\n    \n                if (!attempts) {\n                    throw new Error(`Frame is cross-domain: ${ err.stack }`);\n                }\n    \n                return iframe(options, container, attempts - 1);\n            }\n        }\n    }\n\n    if (options.url || window.navigator.userAgent.match(/MSIE|Edge/i)) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n\nexport function isPerc(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+%$/).test(str);\n}\n\nexport function isPx(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+px$/).test(str);\n}\n\nexport function toNum(val : string | number) : number {\n\n    if (typeof val === 'number') {\n        return val;\n    }\n\n    let match = val.match(/^([0-9]+)(px|%)$/);\n\n    if (!match) {\n        throw new Error(`Could not match css value from ${ val }`);\n    }\n\n    return parseInt(match[1], 10);\n}\n\nexport function toPx(val : number | string) : string {\n    return `${ toNum(val) }px`;\n}\n\nexport function toCSS(val : number | string) : string {\n\n    if (typeof val === 'number') {\n        return toPx(val);\n    }\n\n    return isPerc(val) ? val : toPx(val);\n}\n\nexport function percOf(num : number, perc : string) : number {\n    return parseInt(num * toNum(perc)  / 100, 10);\n}\n\nexport function normalizeDimension(dim : string | number, max : number) : number {\n    if (typeof dim === 'number') {\n        return dim;\n    } else if (isPerc(dim)) {\n        return percOf(max, dim);\n    } else if (isPx(dim)) {\n        return toNum(dim);\n    } else {\n        throw new Error(`Can not normalize dimension: ${ dim }`);\n    }\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\n// $FlowFixMe\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : (message : string) => void) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, getFrameByName, isWindowClosed, getDomainFromUrl, normalizeMockUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { BRIDGE_TIMEOUT, MESSAGE_NAME } from '../conf';\nimport { awaitWindowHello } from '../lib';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { getBridgeName, documentBodyReady, registerRemoteSendMessage, registerRemoteWindow } from './common';\n\nexport function listenForOpenTunnel({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n\n    on(MESSAGE_NAME.OPEN_TUNNEL, ({ source, origin, data }) => {\n        const bridgePromise = globalStore('bridges').get(origin);\n\n        if (!bridgePromise) {\n            throw new Error(`Can not find bridge promise for domain ${ origin }`);\n        }\n\n        return bridgePromise.then(bridge => {\n\n            // $FlowFixMe\n            if (source !== bridge) {\n                // $FlowFixMe\n                throw new Error(`Message source does not matched registered bridge for domain ${ origin }`);\n            }\n\n            if (!data.name) {\n                throw new Error(`Register window expected to be passed window name`);\n            }\n\n            if (!data.sendMessage) {\n                throw new Error(`Register window expected to be passed sendMessage method`);\n            }\n\n            if (!popupWindowsByName.has(data.name)) {\n                throw new Error(`Window with name ${ data.name } does not exist, or was not opened by this window`);\n            }\n\n            // $FlowFixMe\n            if (!popupWindowsByName.get(data.name).domain) {\n                throw new Error(`We do not have a registered domain for window ${ data.name }`);\n            }\n\n            // $FlowFixMe\n            if (popupWindowsByName.get(data.name).domain !== origin) {\n                // $FlowFixMe\n                throw new Error(`Message origin ${ origin } does not matched registered window origin ${ popupWindowsByName.get(data.name).domain }`);\n            }\n\n            // $FlowFixMe\n            registerRemoteSendMessage(popupWindowsByName.get(data.name).win, origin, data.sendMessage);\n\n            return {\n                sendMessage(message) {\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    const winDetails = popupWindowsByName.get(data.name);\n\n                    if (!winDetails) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: winDetails.domain,\n                            source: winDetails.win\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n            };\n        });\n    });\n}\n\nfunction openBridgeFrame(name : string, url : string) : HTMLIFrameElement {\n\n    const iframe = document.createElement(`iframe`);\n\n    iframe.setAttribute(`name`, name);\n    iframe.setAttribute(`id`,   name);\n\n    iframe.setAttribute(`style`, `display: none; margin: 0; padding: 0; border: 0px none; overflow: hidden;`);\n    iframe.setAttribute(`frameborder`, `0`);\n    iframe.setAttribute(`border`, `0`);\n    iframe.setAttribute(`scrolling`, `no`);\n    iframe.setAttribute(`allowTransparency`, `true`);\n\n    iframe.setAttribute(`tabindex`, `-1`);\n    iframe.setAttribute(`hidden`, `true`);\n    iframe.setAttribute(`title`, ``);\n    iframe.setAttribute(`role`, `presentation`);\n\n    iframe.src = url;\n\n    return iframe;\n}\n\nexport function hasBridge(url : string, domain : string) : boolean {\n    const bridges = globalStore('bridges');\n    return bridges.has(domain || getDomainFromUrl(url));\n}\n\nexport function openBridge(url : string, domain : string) : ZalgoPromise<CrossDomainWindowType> {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n    \n    domain = domain || getDomainFromUrl(url);\n    \n    return bridges.getOrSet(domain, () => ZalgoPromise.try(() => {\n\n        if (getDomain() === domain) {\n            throw new Error(`Can not open bridge on the same domain as current domain: ${ domain }`);\n        }\n\n        const name  = getBridgeName(domain);\n        const frame = getFrameByName(window, name);\n\n        if (frame) {\n            throw new Error(`Frame with name ${ name } already exists on page`);\n        }\n\n        const iframe = openBridgeFrame(name, url);\n        bridgeFrames.set(domain, iframe);\n\n        return documentBodyReady.then(body => {\n\n            body.appendChild(iframe);\n            const bridge = iframe.contentWindow;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                iframe.addEventListener('load', resolve);\n                iframe.addEventListener('error', reject);\n\n            }).then(() => {\n\n                return awaitWindowHello(bridge, BRIDGE_TIMEOUT, `Bridge ${ url }`);\n\n            }).then(() => {\n\n                return bridge;\n            });\n        });\n    }));\n}\n\ntype WinDetails = {|\n    win : CrossDomainWindowType,\n    domain? : ?string,\n    name? : ?string\n|};\n\nexport function linkWindow({ win, name, domain } : WinDetails) : WinDetails {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n    const popupWindowsByWin = windowStore('popupWindowsByWin');\n\n    for (const winName of popupWindowsByName.keys()) {\n        // $FlowFixMe\n        if (isWindowClosed(popupWindowsByName.get(winName).win)) {\n            popupWindowsByName.del(winName);\n        }\n    }\n\n    const details : WinDetails = popupWindowsByWin.getOrSet(win, () => {\n        if (!name) {\n            return { win };\n        }\n        \n        return popupWindowsByName.getOrSet(name, () => {\n            return { win, name };\n        });\n    });\n\n    if (details.win && details.win !== win) {\n        throw new Error(`Different window already linked for window: ${ name || 'undefined' }`);\n    }\n\n    if (name) {\n        if (details.name && details.name !== name) {\n            throw new Error(`Different window already linked for name ${ name }: ${ details.name }`);\n        }\n\n        details.name = name;\n        popupWindowsByName.set(name, details);\n    }\n\n    if (domain) {\n        details.domain = domain;\n        registerRemoteWindow(win);\n    }\n\n    popupWindowsByWin.set(win, details);\n    \n    return details;\n}\n\nexport function linkUrl(win : CrossDomainWindowType, url : string) {\n    linkWindow({ win, domain: getDomainFromUrl(url) });\n}\n\nexport function listenForWindowOpen() {\n    const windowOpen = window.open;\n\n    window.open = function windowOpenWrapper(url : string, name : string, options : string, last : mixed) : mixed {\n        const win = windowOpen.call(this, normalizeMockUrl(url), name, options, last);\n    \n        if (!win) {\n            return win;\n        }\n    \n        linkWindow({ win, name, domain: url ? getDomainFromUrl(url) : null });\n    \n        return win;\n    };\n}\n\nexport function destroyBridges() {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n\n    for (const domain of bridgeFrames.keys()) {\n        const frame = bridgeFrames.get(domain);\n        if (frame && frame.parentNode) {\n            frame.parentNode.removeChild(frame);\n        }\n    }\n    bridgeFrames.reset();\n    bridges.reset();\n}\n","/* @flow */\n\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { listenForWindowOpen, listenForOpenTunnel } from './parent';\nimport { setupOpenTunnelToParent } from './bridge';\nimport { openTunnelToOpener } from './child';\n\nexport function setupBridge({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    listenForWindowOpen();\n    listenForOpenTunnel({ on, send, receiveMessage });\n    setupOpenTunnelToParent({ on, send });\n    openTunnelToOpener({ on, send, receiveMessage });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { getParent, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { getGlobal, globalStore } from '../global';\nimport type { SendType, ResponseMessageEvent } from '../types';\n\nfunction cleanTunnelWindows() {\n    const tunnelWindows = globalStore('tunnelWindows');\n\n    for (const key of tunnelWindows.keys()) {\n        const tunnelWindow = tunnelWindows[key];\n\n        try {\n            noop(tunnelWindow.source);\n        } catch (err) {\n            tunnelWindows.del(key);\n            continue;\n        }\n\n        if (isWindowClosed(tunnelWindow.source)) {\n            tunnelWindows.del(key);\n        }\n    }\n}\n\ntype TunnelWindowDataType = {|\n    name : string,\n    source : CrossDomainWindowType,\n    canary : () => void,\n    sendMessage : (message : string) => void\n|};\n\nfunction addTunnelWindow({ name, source, canary, sendMessage } : TunnelWindowDataType) : string {\n    cleanTunnelWindows();\n    const id = uniqueID();\n    const tunnelWindows = globalStore('tunnelWindows');\n    tunnelWindows.set(id, { name, source, canary, sendMessage });\n    return id;\n}\n\nexport function setupOpenTunnelToParent({ send } : { send : SendType }) {\n    getGlobal(window).openTunnelToParent = function openTunnelToParent({ name, source, canary, sendMessage } : TunnelWindowDataType) : ZalgoPromise<ResponseMessageEvent> {\n\n        const tunnelWindows = globalStore('tunnelWindows');\n        const parentWindow = getParent(window);\n    \n        if (!parentWindow) {\n            throw new Error(`No parent window found to open tunnel to`);\n        }\n    \n        const id = addTunnelWindow({ name, source, canary, sendMessage });\n    \n        return send(parentWindow, MESSAGE_NAME.OPEN_TUNNEL, {\n    \n            name,\n    \n            sendMessage() {\n    \n                const tunnelWindow = tunnelWindows.get(id);\n    \n                try {\n                    // IE gets antsy if you try to even reference a closed window\n                    noop(tunnelWindow && tunnelWindow.source);\n                } catch (err) {\n                    tunnelWindows.del(id);\n                    return;\n                }\n    \n                if (!tunnelWindow || !tunnelWindow.source || isWindowClosed(tunnelWindow.source)) {\n                    return;\n                }\n    \n                try {\n                    tunnelWindow.canary();\n                } catch (err) {\n                    return;\n                }\n    \n                tunnelWindow.sendMessage.apply(this, arguments);\n            }\n    \n        }, { domain: WILDCARD });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isSameDomain, getOpener, getDomain, getFrameByName, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { getGlobal, windowStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { needsBridge, registerRemoteWindow, rejectRemoteSendMessage, registerRemoteSendMessage, getBridgeName } from './common';\n\nfunction awaitRemoteBridgeForWindow (win : CrossDomainWindowType) : ZalgoPromise<?CrossDomainWindowType> {\n    return windowStore('remoteBridgeAwaiters').getOrSet(win, () => {\n        return ZalgoPromise.try(() => {\n            const frame = getFrameByName(win, getBridgeName(getDomain()));\n\n            if (!frame) {\n                throw new Error(`Bridge not found for domain: ${ getDomain() }`);\n            }\n\n            // $FlowFixMe\n            if (isSameDomain(frame) && getGlobal(frame)) {\n                return frame;\n            }\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                let interval;\n                let timeout; // eslint-disable-line prefer-const\n\n                interval = setInterval(() => { // eslint-disable-line prefer-const\n                    // $FlowFixMe\n                    if (frame && isSameDomain(frame) && getGlobal(frame)) {\n                        clearInterval(interval);\n                        clearTimeout(timeout);\n                        return resolve(frame);\n                    }\n                }, 100);\n\n                timeout = setTimeout(() => {\n                    clearInterval(interval);\n                    return reject(new Error(`Bridge not found for domain: ${ getDomain() }`));\n                }, 2000);\n            });\n        });\n    });\n}\n\nexport function openTunnelToOpener({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const opener = getOpener(window);\n\n        if (!opener) {\n            return;\n        }\n\n        if (!needsBridge({ win: opener })) {\n            return;\n        }\n\n        registerRemoteWindow(opener);\n\n        return awaitRemoteBridgeForWindow(opener).then(bridge => {\n\n            if (!window.name) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: window does not have a name`));\n            }\n\n            // $FlowFixMe\n            return getGlobal(bridge).openTunnelToParent({\n\n                name: window.name,\n\n                source: window,\n\n                canary() {\n                    // pass\n                },\n\n                sendMessage(message) {\n\n                    try {\n                        noop(window);\n                    } catch (err) {\n                        return;\n                    }\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: this.origin,\n                            source: this.source\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n\n            }).then(({ source, origin, data }) => {\n\n                if (source !== opener) {\n                    throw new Error(`Source does not match opener`);\n                }\n\n                registerRemoteSendMessage(source, origin, data.sendMessage);\n\n            }).catch(err => {\n\n                rejectRemoteSendMessage(opener, err);\n                throw err;\n            });\n        });\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, type DomainMatcher, getOpener, WINDOW_TYPE, isWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { OnType, SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : ?CrossDomainWindowType, { send } : { send : SendType }) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n        this.serializedWindow.getInstanceID = memoizePromise(this.serializedWindow.getInstanceID);\n        this.send = send;\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.location = href;\n            } else {\n                return this.serializedWindow.setLocation(href);\n            }\n        }).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                if (!isSameDomain(this.actualWindow)) {\n                    throw new Error(`Can not set name for window on different domain`);\n                }\n                // $FlowFixMe\n                this.actualWindow.name = name;\n                // $FlowFixMe\n                if (this.actualWindow.frameElement) {\n                    // $FlowFixMe\n                    this.actualWindow.frameElement.setAttribute('name', name);\n                }\n\n                if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                    \n                    linkWindow({ win: this.actualWindow, name });\n                }\n\n            } else {\n                return this.serializedWindow.setName(name);\n            }\n        }).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.close();\n            } else {\n                return this.serializedWindow.close();\n            }\n        }).then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.focus();\n            }\n            return this.serializedWindow.focus();\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return isWindowClosed(this.actualWindow);\n            } else {\n                return this.serializedWindow.isClosed();\n            }\n        });\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(win);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.all([\n                this.getInstanceID(),\n                getWindowInstanceID(win, { send: this.send })\n            ]).then(([ proxyInstanceID, knownWindowInstanceID ]) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        if (this.actualWindow) {\n            return getWindowInstanceID(this.actualWindow, { send: this.send });\n        } else {\n            return this.serializedWindow.getInstanceID();\n        }\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return globalStore('idToProxyWindow').getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow, null, { on, send });\n        });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        return windowStore('winToProxyWindow').getOrSet(win, () => {\n            const id = uniqueID();\n\n            return globalStore('idToProxyWindow').set(id, new ProxyWindow({\n                id,\n                // $FlowFixMe\n                type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n                // $FlowFixMe\n                getInstanceID: () => getWindowInstanceID(win, { send }),\n                close:         () => ZalgoPromise.try(() => {\n                    win.close();\n                }),\n                focus:         () => ZalgoPromise.try(() => {\n                    win.focus();\n                }),\n                isClosed:      () => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    return isWindowClosed(win);\n                }),\n                setLocation:   (href) => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    if (isSameDomain(win)) {\n                        try {\n                            if (win.location && typeof win.location.replace === 'function') {\n                                // $FlowFixMe\n                                win.location.replace(href);\n                                return;\n                            }\n                        } catch (err) {\n                            // pass\n                        }\n                    }\n    \n                    // $FlowFixMe\n                    win.location = href;\n                }),\n                setName:       (name) => ZalgoPromise.try(() => {\n                    if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                        // $FlowFixMe\n                        linkWindow({ win, name });\n                    }\n                    // $FlowFixMe\n                    win.name = name;\n                })\n            // $FlowFixMe\n            }, win, { send }));\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { on, send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on } : { on : OnType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : () => ZalgoPromise<T> | T, key : string, { on } : { on : OnType }) : SerializedFunction {\n    listenForFunctionCalls({ on });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    const name = val.__name__ || val.name || key;\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args: Array.prototype.slice.call(arguments) }, { domain: origin, fireAndForget: opts.fireAndForget })\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { on, send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n\n            if (window.location.protocol === PROTOCOL.FILE) {\n                return WILDCARD;\n            }\n\n            if (!isActuallySameDomain(win)) {\n                throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n            }\n\n            // $FlowFixMe\n            return getActualDomain(win);\n        }\n\n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id: uniqueID(),\n            ...message\n        }\n    }, { on, send });\n\n    let success = false;\n    let error;\n\n    for (const strategyName of Object.keys(SEND_MESSAGE_STRATEGIES)) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n            success = true;\n        } catch (err) {\n            error = error || err;\n        }\n    }\n\n    if (!success) {\n        throw error;\n    }\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            // $FlowFixMe\n            sendMessage(source, origin, {\n                type,\n                ack,\n                hash:   message.hash,\n                name:   message.name,\n                ...response\n            }, { on, send });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, serializeMessage, deserializeMessage, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    // $FlowFixMe\n    const messageEvent : MessageEvent = {\n        source: event.source || event.sourceElement,\n        origin: event.origin || (event.originalEvent && event.originalEvent.origin),\n        data:   event.data\n    };\n\n    if (!messageEvent.source) {\n        return;\n    }\n\n    if (!messageEvent.origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(messageEvent.source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage(messageEvent, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListeners', () => {\n        // $FlowFixMe\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { RequestOptionsType, ResponseMessageEvent } from '../types';\n\nimport { on } from './on';\n\nexport function send(win : CrossDomainWindowType, name : string, data : ?Object, options? : RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n    \n    // $FlowFixMe\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    const prom = ZalgoPromise.try(() => {\n        if (!name) {\n            throw new Error('Expected name');\n        }\n\n        if (domain) {\n            if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n                throw new TypeError(`Expected domain to be a string, array, or regex`);\n            }\n        }\n\n        if (isWindowClosed(win)) {\n            throw new Error('Target window is closed');\n        }\n\n        const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n\n        // $FlowFixMe\n        const requestPromise = ZalgoPromise.try(() => {\n\n            if (isAncestor(window, win)) {\n                return awaitWindowHello(win, childTimeout);\n            } else if (isRegex(domain)) {\n                return sayHello(win, { send });\n            }\n\n        // $FlowFixMe\n        }).then(({ domain: origin } = {}) => {\n\n            if (isRegex(domain)) {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Remote window domain ${ origin } does not match regex: ${ domain.source }`);\n                }\n                domain = origin;\n            }\n\n            const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n            if (__DEBUG__) {\n                console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n            }\n\n            let hasResult = false;\n\n            const promise = new ZalgoPromise();\n            promise.finally(() => {\n                hasResult = true;\n                reqPromises.splice(reqPromises.indexOf(requestPromise, 1));\n            }).catch(noop);\n\n            const hash = `${ name }_${ uniqueID() }`;\n\n            sendMessage(win, domain, {\n                type: MESSAGE_TYPE.REQUEST,\n                hash,\n                name,\n                data,\n                fireAndForget\n            }, { on, send });\n\n            if (fireAndForget) {\n                return promise.resolve();\n            }\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const responseListener : ResponseListenerType = {\n                name,\n                win,\n                domain,\n                promise\n            };\n\n            addResponseListener(hash, responseListener);\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n\n            let cycleTime = 100;\n\n            const cycle = () => {\n                if (hasResult) {\n                    return;\n                }\n\n                if (isWindowClosed(win)) {\n                    if (!responseListener.ack) {\n                        return promise.reject(new Error(`Window closed for ${ name } before ack`));\n                    } else {\n                        return promise.reject(new Error(`Window closed for ${ name } before response`));\n                    }\n                }\n\n                ackTimeout = Math.max(ackTimeout - cycleTime, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - cycleTime, 0);\n                }\n\n                const hasAck = responseListener.ack;\n\n                if (hasAck) {\n                    if (resTimeout === -1) {\n                        return;\n                    }\n\n                    cycleTime = Math.min(resTimeout, 2000);\n\n                } else if (ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ name } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ name } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n\n                setTimeout(cycle, cycleTime);\n            };\n\n            setTimeout(cycle, cycleTime);\n\n            return promise;\n        });\n\n        reqPromises.push(requestPromise);\n        return requestPromise;\n    });\n\n    return prom;\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, receiveMessage, setupGlobalReceiveMessage } from './drivers';\nimport { getGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n        setupGlobalReceiveMessage({ on, send });\n    }\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport { isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nexport function globalFor(win : CrossDomainWindowType) : Object {\n\n    if (!isSameDomain(win)) {\n        throw new Error(`Can not get global for window on different domain`);\n    }\n\n    if (!win[__ZOID__.__GLOBAL_KEY__]) {\n        win[__ZOID__.__GLOBAL_KEY__] = {};\n    }\n\n    return win[__ZOID__.__GLOBAL_KEY__];\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { toCSS } from 'belter/src';\n\nexport type ProxyElement<T : HTMLElement> = {|\n    resize : ({ width : ?number, height : ?number }) => void,\n    getElement : () => ZalgoPromise<T>\n|};\n\nexport function getProxyElement<T : HTMLElement>(element : T) : ProxyElement<T> {\n    return {\n        resize({ width, height } : { width : ?number, height : ?number }) {\n            if (typeof width === 'number') {\n                element.style.width = toCSS(width);\n            }\n    \n            if (typeof height === 'number') {\n                element.style.height = toCSS(height);\n            }\n        },\n\n        getElement() : ZalgoPromise<T> {\n            return ZalgoPromise.try(() => {\n                if (this.source && this.source !== window) {\n                    throw new Error(`Can not call getElement from a remote window`);\n                }\n    \n                return element;\n            });\n        }\n    };\n}\n","/* @flow */\n\nimport { WINDOW_TYPE } from 'cross-domain-utils/src';\n\nexport const ZOID = `zoid`;\n\nexport const POST_MESSAGE = {\n    DELEGATE:       `${ ZOID }_delegate`,\n    ALLOW_DELEGATE: `${ ZOID }_allow_delegate`\n};\n\nexport const PROP_TYPE = {\n    STRING:   `string`,\n    OBJECT:   `object`,\n    FUNCTION: `function`,\n    BOOLEAN:  `boolean`,\n    NUMBER:   `number`,\n    ARRAY:    `array`\n};\n\nexport const INITIAL_PROPS = {\n    RAW: 'raw',\n    UID: 'uid'\n};\n\nexport const WINDOW_REFERENCES = {\n    OPENER: `opener`,\n    TOP:    `top`,\n    PARENT: `parent`,\n    GLOBAL: `global`\n};\n\nexport const PROP_SERIALIZATION = {\n    JSON:   ('json' : 'json'),\n    DOTIFY: ('dotify' : 'dotify'),\n    BASE64: ('base64' : 'base64')\n};\n\nexport const CONTEXT = WINDOW_TYPE;\n\nexport const WILDCARD = '*';\n\nexport const DEFAULT_DIMENSIONS = {\n    WIDTH:  '300px',\n    HEIGHT: '150px'\n};\n\nexport const EVENT = {\n    RENDER:   'zoid-render',\n    RENDERED: 'zoid-rendered',\n    DISPLAY:  'zoid-display',\n    ERROR:    'zoid-error',\n    CLOSE:    'zoid-close',\n    PROPS:    'zoid-props'\n};\n","/* @flow */\n\nimport { getDomain, isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport type { Component } from '../component';\nimport type { PropsType, MixedPropDefinitionType } from '../component/props';\n\nimport type { ChildHelpers } from './index';\n\nexport function normalizeChildProp<T, P>(component : Component<P>, props : (PropsType<P>), key : string, value : T, helpers : ChildHelpers<P>) : ?T  {\n\n    // $FlowFixMe\n    const prop : MixedPropDefinitionType<P> = component.getPropDefinition(key);\n\n    if (!prop) {\n        return value;\n    }\n\n    if (typeof prop.childDecorate === 'function') {\n        return prop.childDecorate({ value, ...helpers });\n    }\n\n    return value;\n}\n\n// eslint-disable-next-line max-params\nexport function normalizeChildProps<P>(parentComponentWindow : CrossDomainWindowType, component : Component<P>, props : (PropsType<P>), origin : string, helpers : ChildHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) {\n\n    const result = {};\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        const prop = component.getPropDefinition(key);\n\n        if (prop && prop.sameDomain && (origin !== getDomain(window) || !isSameDomain(parentComponentWindow))) {\n            continue;\n        }\n\n        const value = normalizeChildProp(component, props, key, props[key], helpers);\n\n        result[key] = value;\n        if (prop && prop.alias && !result[prop.alias]) {\n            result[prop.alias] = value;\n        }\n    }\n\n    if (!isUpdate) {\n        for (const key of component.getPropNames()) {\n            if (!props.hasOwnProperty(key)) {\n                result[key] = normalizeChildProp(component, props, key, props[key], helpers);\n            }\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n","/* @flow */\n\nimport { inlineMemoize, stringifyError, base64decode } from 'belter/src';\n\nimport { ZOID } from '../constants';\nimport type { ChildPayload } from '../parent';\n\nfunction parseChildWindowName(windowName : string) : ChildPayload {\n    return inlineMemoize(parseChildWindowName, () => {\n        if (!windowName) {\n            throw new Error(`No window name`);\n        }\n    \n        const [ , zoidcomp, name, encodedPayload ] = windowName.split('__');\n    \n        if (zoidcomp !== ZOID) {\n            throw new Error(`Window not rendered by zoid - got ${ zoidcomp }`);\n        }\n    \n        if (!name) {\n            throw new Error(`Expected component name`);\n        }\n    \n        if (!encodedPayload) {\n            throw new Error(`Expected encoded payload`);\n        }\n    \n        try {\n            return JSON.parse(base64decode(encodedPayload));\n        } catch (err) {\n            throw new Error(`Can not decode window name payload: ${ encodedPayload }: ${ stringifyError(err) }`);\n        }\n    }, [ windowName ]);\n}\n\nexport function getChildPayload() : ?ChildPayload {\n    try {\n        return parseChildWindowName(window.name);\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isSameDomain, matchDomain, getDomain, getOpener,\n    getNthParentFromTop, getAncestor, getAllFramesInWindow,\n    type CrossDomainWindowType, onCloseWindow } from 'cross-domain-utils/src';\nimport { markWindowKnown, deserializeMessage } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { extend, waitForDocumentBody, onResize, getElementSafe, assertExists } from 'belter/src';\n\nimport { globalFor } from '../lib';\nimport { CONTEXT, INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component } from '../component';\nimport type { PropsType } from '../component/props';\nimport type { WindowRef, PropRef, ParentExportsType } from '../parent';\n\nimport { normalizeChildProps } from './props';\nimport { getChildPayload } from './window';\n\nexport * from './window';\n\nexport type ChildExportsType<P> = {|\n    updateProps : (props : (PropsType<P>)) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>\n|};\n\nexport type ChildHelpers<P> = {|\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    onProps : ((PropsType<P>) => void) => void,\n    getParent : () => CrossDomainWindowType\n|};\n\n/*  Child Component\n    ---------------\n\n    This is the portion of code which runs inside the frame or popup window containing the component's implementation.\n\n    When the component author calls myComponent.attach(), it creates a new instance of ChildComponent, which is then\n    responsible for managing the state and messaging back up to the parent, and providing props for the component to\n    utilize.\n*/\n\nexport class ChildComponent<P> {\n\n    component : Component<P>\n    props : PropsType<P>\n    context : string\n    parent : ParentExportsType<P>\n    parentComponentWindow : CrossDomainWindowType\n\n    onPropHandlers : Array<(PropsType<P>) => void> // eslint-disable-line flowtype/no-mutable-array\n    autoResize : { width : boolean, height : boolean, element? : string }\n\n    constructor(component : Component<P>) {\n        ZalgoPromise.try(() => {\n            this.component = component;\n            this.onPropHandlers = [];\n            \n            const childPayload = getChildPayload();\n\n            if (!childPayload) {\n                throw new Error(`No child payload found`);\n            }\n\n            if (childPayload.version !== __ZOID__.__VERSION__) {\n                throw new Error(`Parent window has zoid version ${ childPayload.version }, child window has version ${ __ZOID__.__VERSION__ }`);\n            }\n\n            const { parent, domain, exports, context, props } = childPayload;\n\n            this.context = context;\n            this.parentComponentWindow = this.getParentComponentWindow(parent);\n            this.parent = deserializeMessage(this.parentComponentWindow, domain, exports);\n\n            this.checkParentDomain(domain);\n\n            const initialProps = this.getPropsByRef(this.parentComponentWindow, domain, props);\n            this.setProps(initialProps, domain);\n            markWindowKnown(this.parentComponentWindow);\n            \n            this.watchForClose();\n\n            return this.parent.init(this.buildExports());\n\n        }).then(() => {\n            return this.watchForResize();\n\n        }).catch(err => {\n            this.onError(err);\n        });\n    }\n\n    getHelpers() : ChildHelpers<P> {\n        return {\n            focus:         () => this.focus(),\n            close:         () => this.close(),\n            resize:        ({ width, height }) => this.resize({ width, height }),\n            onError:       (err) => this.onError(err),\n            onProps:       (handler) => this.onProps(handler),\n            getParent:     () => this.parentComponentWindow\n        };\n    }\n\n    checkParentDomain(domain : string) {\n        if (!matchDomain(this.component.allowedParentDomains, domain)) {\n            throw new Error(`Can not be rendered by domain: ${ domain }`);\n        }\n    }\n\n    onProps(handler : Function) {\n        this.onPropHandlers.push(handler);\n    }\n\n    getPropsByRef(parentComponentWindow : CrossDomainWindowType, domain : string, { type, value, uid } : PropRef) : (PropsType<P>) {\n        let props;\n\n        if (type === INITIAL_PROPS.RAW) {\n            props = value;\n        } else if (type === INITIAL_PROPS.UID) {\n            if (!isSameDomain(parentComponentWindow)) {\n                throw new Error(`Parent component window is on a different domain - expected ${ getDomain() } - can not retrieve props`);\n            }\n\n            const global = globalFor(parentComponentWindow);\n            props = assertExists('props', global && global.props[uid]);\n        }\n\n        if (!props) {\n            throw new Error(`Could not find props`);\n        }\n\n        return deserializeMessage(parentComponentWindow, domain, props);\n    }\n\n    getParentComponentWindow(ref : WindowRef) : CrossDomainWindowType {\n        const { type } = ref;\n    \n        if (type === WINDOW_REFERENCES.OPENER) {\n            return assertExists('opener', getOpener(window));\n    \n        } else if (type === WINDOW_REFERENCES.PARENT) {\n            // $FlowFixMe\n            const distance = ref.distance;\n            return assertExists('parent', getNthParentFromTop(window, distance));\n\n        } else if (type === WINDOW_REFERENCES.GLOBAL) {\n            // $FlowFixMe\n            const { uid } = ref;\n            const ancestor = getAncestor(window);\n\n            if (!ancestor) {\n                throw new Error(`Can not find ancestor window`);\n            }\n\n            for (const frame of getAllFramesInWindow(ancestor)) {\n                if (isSameDomain(frame)) {\n                    const global = globalFor(frame);\n\n                    if (global && global.windows && global.windows[uid]) {\n                        return global.windows[uid];\n                    }\n                }\n            }\n        }\n    \n        throw new Error(`Unable to find ${ type } parent component window`);\n    }\n\n    getProps() : PropsType<P> {\n        // $FlowFixMe\n        this.props = this.props || {};\n        return this.props;\n    }\n\n\n    setProps(props : PropsType<P>, origin : string, isUpdate : boolean = false) {\n        const helpers = this.getHelpers();\n        const existingProps = this.getProps();\n        const normalizedProps = normalizeChildProps(this.parentComponentWindow, this.component, props, origin, helpers, isUpdate);\n\n        extend(existingProps, normalizedProps);\n\n        for (const handler of this.onPropHandlers) {\n            handler.call(this, existingProps);\n        }\n    }\n\n    watchForClose() {\n        window.addEventListener('beforeunload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        window.addEventListener('unload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        onCloseWindow(this.parentComponentWindow, () => {\n            this.destroy();\n        });\n    }\n\n    getAutoResize() : { width : boolean, height : boolean, element : ?HTMLElement } {\n        let { width = false, height = false, element = 'body' } = this.autoResize || this.component.autoResize || {};\n        element = getElementSafe(element);\n        return { width, height, element };\n    }\n\n    watchForResize() : ?ZalgoPromise<void> {\n        return waitForDocumentBody().then(() => {\n            const { width, height, element } = this.getAutoResize();\n\n            if (!element || (!width && !height) || this.context === CONTEXT.POPUP) {\n                return;\n            }\n\n            onResize(element, ({ width: newWidth, height: newHeight }) => {\n                this.resize({\n                    width:  width ? newWidth : undefined,\n                    height: height ? newHeight : undefined\n                });\n            }, { width, height });\n        });\n    }\n\n    buildExports() : ChildExportsType<P> {\n\n        const self = this;\n\n        return {\n            updateProps(props : (PropsType<P>)) : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.setProps(props, this.__origin__, true));\n            },\n\n            close() : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.destroy());\n            }\n        };\n    }\n\n    resize({ width, height } : { width : ?number, height : ?number }) : ZalgoPromise<void> {\n        return this.parent.resize.fireAndForget({ width, height });\n    }\n\n    close() : ZalgoPromise<void> {\n        return this.parent.close();\n    }\n    \n    destroy() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.close();\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.focus();\n        });\n    }\n\n    onError(err : mixed) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.parent && this.parent.onError) {\n                return this.parent.onError(err);\n            } else {\n                throw err;\n            }\n        });\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { cleanUpWindow, ProxyWindow, toProxyWindow } from 'post-robot/src';\nimport { assertSameDomain } from 'cross-domain-utils/src';\nimport { iframe, popup, destroyElement, normalizeDimension, watchElementForClose,\n    awaitFrameWindow, uniqueID } from 'belter/src';\n\nimport { CONTEXT } from '../constants';\nimport { getProxyElement, type ProxyElement } from '../lib';\n\n\nexport type ContextDriverType = {|\n    openOnClick : boolean,\n    openFrame? : () => ProxyElement<HTMLIFrameElement>,\n    open : (?ProxyElement<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    openPrerenderFrame? : () => ProxyElement<HTMLIFrameElement>,\n    openPrerender : (ProxyWindow, ?ProxyElement<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    resize? : ({ width : ?number, height : ?number }) => void,\n    delegate : $ReadOnlyArray<string>\n|};\n\nexport const RENDER_DRIVERS : { [string] : ContextDriverType } = {};\n\nRENDER_DRIVERS[CONTEXT.IFRAME] = {\n    openOnClick: false,\n\n    openFrame() : ProxyElement<HTMLIFrameElement> {\n        return getProxyElement(iframe({\n            attributes: {\n                title: this.component.name,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    open(proxyFrame : ?ProxyElement<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n\n        return proxyFrame.getElement().then(frame => {\n            return awaitFrameWindow(frame).then(win => {\n\n                const frameWatcher = watchElementForClose(frame, () => this.close());\n                this.clean.register(() => frameWatcher.cancel());\n                this.clean.register(() => destroyElement(frame));\n                this.clean.register(() => cleanUpWindow(win));\n\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    openPrerenderFrame() : ProxyElement<HTMLIFrameElement> {\n        return getProxyElement(iframe({\n            attributes: {\n                name:  `__zoid_prerender_frame__${ this.component.name }_${ uniqueID() }__`,\n                title: `prerender__${ this.component.name }`,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyElement<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyPrerenderFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n        \n        return proxyPrerenderFrame.getElement().then(prerenderFrame => {\n            this.clean.register(() => destroyElement(prerenderFrame));\n\n            return awaitFrameWindow(prerenderFrame).then(prerenderFrameWindow => {\n                return assertSameDomain(prerenderFrameWindow);\n            }).then(win => {\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    delegate: [\n        'getProxyContainer',\n        'renderContainer',\n        'openFrame',\n        'openPrerenderFrame',\n        'prerender',\n        'open',\n        'openPrerender'\n    ],\n\n    resize({ width, height } : { width : ?number, height : ?number }) {\n        if (this.proxyContainer) {\n            this.proxyContainer.resize({ width, height });\n        }\n    }\n};\n\nif (__ZOID__.__POPUP_SUPPORT__) {\n    RENDER_DRIVERS[CONTEXT.POPUP] = {\n        openOnClick: true,\n\n        open() : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                let { width, height } = this.component.dimensions;\n\n                width = normalizeDimension(width, window.outerWidth);\n                height = normalizeDimension(height, window.outerWidth);\n\n                const win = popup('', {\n                    width,\n                    height,\n                    ...this.component.attributes.popup\n                });\n\n                this.clean.register(() => {\n                    win.close();\n                    cleanUpWindow(win);\n                });\n\n                return toProxyWindow(win);\n            });\n        },\n\n        openPrerender(proxyWin : ProxyWindow) : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                return proxyWin;\n            });\n        },\n\n        delegate: [\n            'getProxyContainer',\n            'renderContainer',\n            'setProxyWin'\n        ]\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { dotify, isDefined } from 'belter/src';\n\nimport type { Component } from '../component';\nimport type { BuiltInPropsDefinitionType, PropsInputType, PropsType, MixedPropDefinitionType } from '../component/props';\nimport { PROP_SERIALIZATION } from '../constants';\n\nimport type { ParentComponent, ParentHelpers } from './index';\n\n/*  Normalize Props\n    ---------------\n\n    Turn props into normalized values, using defaults, function options, etc.\n*/\n\nexport function normalizeProps<P>(component : Component<P>, instance : ParentComponent<P>, props : PropsInputType<P>, helpers : ParentHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) { // eslint-disable-line complexity\n\n    // $FlowFixMe\n    props = props || {};\n    const result : $Shape<P> = { ...props }; // eslint-disable-line no-undef\n\n    const propNames = isUpdate\n        ? []\n        : [ ...component.getPropNames() ];\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        if (propNames.indexOf(key) === -1) {\n            propNames.push(key);\n        }\n    }\n\n    const aliases = [];\n\n    const { state, close, focus, onError } = helpers;\n\n    for (const key of propNames) {\n        const propDef = component.getPropDefinition(key);\n        // $FlowFixMe\n        let value = props[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        const alias = propDef.alias;\n        if (alias) {\n            if (!isDefined(value) && isDefined(props[alias])) {\n                value = props[alias];\n            }\n            aliases.push(alias);\n        }\n\n        if (propDef.value) {\n            value = propDef.value({ props: result, state, close, focus, onError });\n        }\n\n        if (!isDefined(value) && propDef.default) {\n            value = propDef.default({ props: result, state, close, focus, onError });\n        }\n\n        if (isDefined(value)) {\n            if (propDef.type === 'array' ? !Array.isArray(value) : (typeof value !== propDef.type)) {\n                throw new TypeError(`Prop is not of type ${ propDef.type }: ${ key }`);\n            }\n        }\n        \n        // $FlowFixMe\n        result[key] = value;\n    }\n\n    for (const alias of aliases) {\n        // $FlowFixMe\n        delete result[alias];\n    }\n\n    // $FlowFixMe\n    for (const key of Object.keys(result)) {\n        const propDef = component.getPropDefinition(key);\n        // $FlowFixMe\n        const value = result[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        if (isDefined(value) && propDef.validate) {\n            // $FlowFixMe\n            propDef.validate({ value, props: result });\n        }\n\n        if (isDefined(value) && propDef.decorate) {\n            // $FlowFixMe\n            result[key] = propDef.decorate({ value, props: result, state, close, focus, onError });\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n\n// $FlowFixMe\nfunction getQueryParam<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryParam === 'function') {\n            return prop.queryParam({ value });\n        } else if (typeof prop.queryParam === 'string') {\n            return prop.queryParam;\n        } else {\n            return key;\n        }\n    });\n}\n\n// $FlowFixMe\nfunction getQueryValue<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<mixed> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryValue === 'function' && isDefined(value)) {\n            return prop.queryValue({ value });\n        } else {\n            return value;\n        }\n    });\n}\n\nexport function propsToQuery<P>(propsDef : BuiltInPropsDefinitionType<P>, props : (PropsType<P>)) : ZalgoPromise<{ [string] : string }> {\n\n    const params = {};\n\n    return ZalgoPromise.all(Object.keys(props).map(key => {\n\n        const prop = propsDef[key];\n\n        if (!prop) {\n            return; // eslint-disable-line array-callback-return\n        }\n\n        return ZalgoPromise.resolve().then(() => {\n\n            const value = props[key];\n\n            if (!value) {\n                return;\n            }\n\n            if (!prop.queryParam) {\n                return;\n            }\n\n            return value;\n\n        }).then(value => {\n\n            if (value === null || typeof value === 'undefined') {\n                return;\n            }\n\n            return ZalgoPromise.all([\n                // $FlowFixMe\n                getQueryParam(prop, key, value),\n                // $FlowFixMe\n                getQueryValue(prop, key, value)\n            ]).then(([ queryParam, queryValue ]) => {\n\n                let result;\n\n                if (typeof queryValue === 'boolean') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'string') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'object' && queryValue !== null) {\n\n                    if (prop.serialization === PROP_SERIALIZATION.JSON) {\n                        result = JSON.stringify(queryValue);\n                    } else if (prop.serialization === PROP_SERIALIZATION.BASE64) {\n                        result = btoa(JSON.stringify(queryValue));\n                    } else if (prop.serialization === PROP_SERIALIZATION.DOTIFY || !prop.serialization) {\n                        result = dotify(queryValue, key);\n\n                        for (const dotkey of Object.keys(result)) {\n                            params[dotkey] = result[dotkey];\n                        }\n\n                        return;\n                    }\n\n                } else if (typeof queryValue === 'number') {\n                    result = queryValue.toString();\n                }\n\n                params[queryParam] = result;\n            });\n        });\n\n    })).then(() => {\n        return params;\n    });\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { send, bridge, serializeMessage, ProxyWindow, toProxyWindow } from 'post-robot/src';\nimport { isSameDomain, matchDomain, getDomainFromUrl, isBlankDomain,\n    onCloseWindow, getDomain, type CrossDomainWindowType,\n    getDistanceFromTop, normalizeMockUrl, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { addEventListener, uniqueID, elementReady, writeElementToWindow, eventEmitter, type EventEmitterType,\n    noop, onResize, extend, extendUrl, appendChild, cleanup, type CleanupType, base64encode,\n    once, stringifyError, destroyElement, isDefined, getElementSafe } from 'belter/src';\n\nimport { ZOID, POST_MESSAGE, CONTEXT, EVENT,\n    INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component, onErrorPropType } from '../component';\nimport { globalFor, getProxyElement, type ProxyElement } from '../lib';\nimport type { PropsInputType, PropsType } from '../component/props';\nimport type { ChildExportsType } from '../child';\nimport type { DimensionsType } from '../types';\n\nimport { RENDER_DRIVERS, type ContextDriverType } from './drivers';\nimport { propsToQuery, normalizeProps } from './props';\n\nexport type RenderOptionsType<P> = {|\n    uid : string,\n    props : PropsInputType<P>,\n    tag : string,\n    context : string,\n    close : (?string) => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<ProxyWindow>,\n    doc : Document,\n    container? : HTMLElement,\n    dimensions : DimensionsType,\n    state : Object,\n    event : EventEmitterType,\n    frame : ?HTMLIFrameElement,\n    prerenderFrame : ?HTMLIFrameElement\n|};\n\nexport type ParentExportsType<P> = {|\n    init : (ChildExportsType<P>) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>,\n    checkClose : () => ZalgoPromise<void>,\n    resize : ({ width? : ?number, height? : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>\n|};\n\nexport type PropRef =\n    {| type : typeof INITIAL_PROPS.RAW, uid? : string, value? : string |};\n\nexport type WindowRef =\n    {| type : typeof WINDOW_REFERENCES.OPENER |} |\n    {| type : typeof WINDOW_REFERENCES.PARENT, distance : number |} |\n    {| type : typeof WINDOW_REFERENCES.GLOBAL, uid : string |};\n\nexport type ChildPayload = {|\n    uid : string,\n    tag : string,\n    version : string,\n    context : $Values<typeof CONTEXT>,\n    domain : string,\n    parent : WindowRef,\n    props : PropRef,\n    exports : string\n|};\n\nexport type StateType = Object;\n\nexport type ParentHelpers<P> = {|\n    state : StateType,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    updateProps : PropsInputType<P> => ZalgoPromise<void>,\n    event : EventEmitterType\n|};\n\nexport class ParentComponent<P> {\n\n    component : Component<P>\n    driver : ContextDriverType\n    clean : CleanupType\n    event : EventEmitterType\n\n    initPromise : ZalgoPromise<void>\n    handledErrors : Array<mixed> // eslint-disable-line flowtype/no-mutable-array\n    \n    props : PropsType<P>\n    state : StateType\n    child : ?ChildExportsType<P>\n\n    proxyWin : ?ProxyWindow\n    proxyContainer : ?ProxyElement<HTMLElement>\n\n    constructor(component : Component<P>, props : PropsInputType<P>) {\n        this.initPromise = new ZalgoPromise();\n        this.handledErrors = [];\n\n        this.clean = cleanup(this);\n        this.state = {};\n\n        this.component = component;\n\n        this.setupEvents(props.onError);\n        this.setProps(props);\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n        this.watchForUnload();\n    }\n\n    setupEvents(onError : ?onErrorPropType) {\n        this.event = eventEmitter();\n        \n        this.event.on(EVENT.RENDER,   () => this.props.onRender());\n        this.event.on(EVENT.DISPLAY,  () => this.props.onDisplay());\n        this.event.on(EVENT.RENDERED, () => this.props.onRendered());\n        this.event.on(EVENT.CLOSE,    () => this.props.onClose());\n        this.event.on(EVENT.PROPS,    (props) => this.props.onProps(props));\n\n        this.event.on(EVENT.ERROR, err => {\n            if (this.props && this.props.onError) {\n                return this.props.onError(err);\n            } else if (onError) {\n                return onError(err);\n            } else {\n                return this.initPromise.reject(err).then(() => {\n                    setTimeout(() => {\n                        throw err;\n                    }, 1);\n                });\n            }\n        });\n    }\n\n    render(target : CrossDomainWindowType, container : string | HTMLElement, context : $Values<typeof CONTEXT>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`render`);\n\n            this.driver = RENDER_DRIVERS[context];\n            const uid = `${ ZOID }-${ this.component.tag }-${ uniqueID() }`;\n            const domain = this.getDomain();\n            const initialDomain = this.getInitialDomain();\n            \n            this.component.checkAllowRender(target, domain, container);\n\n            if (target !== window) {\n                this.delegate(context, target);\n            }\n\n            const tasks = {};\n\n            tasks.init = this.initPromise;\n            tasks.buildUrl = this.buildUrl();\n            tasks.onRender = this.event.trigger(EVENT.RENDER);\n\n            tasks.getProxyContainer = this.getProxyContainer(container);\n\n            tasks.openFrame = this.openFrame();\n            tasks.openPrerenderFrame = this.openPrerenderFrame();\n\n            tasks.renderContainer = ZalgoPromise.all([ tasks.getProxyContainer, tasks.openFrame, tasks.openPrerenderFrame ]).then(([ proxyContainer, proxyFrame, proxyPrerenderFrame ]) => {\n                return this.renderContainer(proxyContainer, { context, uid, proxyFrame, proxyPrerenderFrame });\n            });\n\n            tasks.open = this.driver.openOnClick\n                ? this.open()\n                : tasks.openFrame.then(proxyFrame => this.open(proxyFrame));\n\n            tasks.openPrerender = ZalgoPromise.all([ tasks.open, tasks.openPrerenderFrame ]).then(([ proxyWin, proxyPrerenderFrame ]) => {\n                return this.openPrerender(proxyWin, proxyPrerenderFrame);\n            });\n\n            tasks.setState = ZalgoPromise.all([\n                tasks.open.then(proxyWin => {\n                    this.proxyWin = proxyWin;\n                    return this.setProxyWin(proxyWin);\n                }),\n                tasks.renderContainer.then(proxyContainer => {\n                    this.proxyContainer = proxyContainer;\n                })\n            ]);\n            \n            tasks.prerender = ZalgoPromise.all([ tasks.openPrerender, tasks.setState ]).then(([ proxyPrerenderWin ]) => {\n                return this.prerender(proxyPrerenderWin, { context, uid });\n            });\n\n            tasks.loadUrl = ZalgoPromise.all([ tasks.open, tasks.buildUrl, tasks.setWindowName, tasks.prerender ]).then(([ proxyWin, url ]) => {\n                return proxyWin.setLocation(url);\n            });\n\n            tasks.buildWindowName = tasks.open.then(proxyWin => {\n                return this.buildWindowName({ proxyWin, initialDomain, domain, target, context, uid });\n            });\n\n            tasks.setWindowName =  ZalgoPromise.all([ tasks.open, tasks.buildWindowName ]).then(([ proxyWin, windowName ]) => {\n                return proxyWin.setName(windowName);\n            });\n\n            tasks.watchForClose = tasks.open.then(proxyWin => {\n                return this.watchForClose(proxyWin);\n            });\n\n            tasks.onDisplay = tasks.prerender.then(() => {\n                return this.event.trigger(EVENT.DISPLAY);\n            });\n\n            tasks.openBridge = tasks.open.then(proxyWin => {\n                return this.openBridge(proxyWin, initialDomain, context);\n            });\n\n            tasks.runTimeout = tasks.loadUrl.then(() => {\n                return this.runTimeout();\n            });\n\n            tasks.onRender = tasks.init.then(() => {\n                return this.event.trigger(EVENT.RENDERED);\n            });\n\n            return ZalgoPromise.hash(tasks);\n            \n        }).catch(err => {\n            return ZalgoPromise.all([\n                this.onError(err),\n                this.destroy(err)\n            ]).then(() => {\n                throw err;\n            });\n        }).then(noop);\n    }\n\n    getProxyContainer(container : string | HTMLElement) : ZalgoPromise<ProxyElement<HTMLElement>> {\n        return ZalgoPromise.try(() => {\n            return elementReady(container);\n        }).then(containerElement => {\n            return getProxyElement(containerElement);\n        });\n    }\n\n    buildWindowName({ proxyWin, initialDomain, domain, target, uid, context } : { proxyWin : ProxyWindow, initialDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string }) : string {\n        const childPayload = this.buildChildPayload({ proxyWin, initialDomain, domain, target, context, uid });\n        return `__${ ZOID }__${ this.component.name }__${ base64encode(JSON.stringify(childPayload)) }__`;\n    }\n\n    getPropsRef(proxyWin : ProxyWindow, target : CrossDomainWindowType, domain : string | RegExp, uid : string) : PropRef {\n        const value = serializeMessage(proxyWin, domain, this.getPropsForChild(domain));\n\n        const propRef = isSameDomain(target)\n            ? { type: INITIAL_PROPS.RAW, value }\n            : { type: INITIAL_PROPS.UID, uid };\n\n        if (propRef.type === INITIAL_PROPS.UID) {\n            const global = globalFor(window);\n            global.props = global.props || {};\n            global.props[uid] = value;\n\n            this.clean.register(() => {\n                delete global.props[uid];\n            });\n        }\n\n        return propRef;\n    }\n\n    buildChildPayload({ proxyWin, initialDomain, domain, target = window, context, uid } : { proxyWin : ProxyWindow, initialDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string } = {}) : ChildPayload {\n        return {\n            uid,\n            context,\n            version: __ZOID__.__VERSION__,\n            domain:  getDomain(window),\n            tag:     this.component.tag,\n            parent:  this.getWindowRef(target, initialDomain, uid, context),\n            props:   this.getPropsRef(proxyWin, target, domain, uid),\n            exports: serializeMessage(proxyWin, domain, this.buildParentExports(proxyWin))\n        };\n    }\n\n    setProxyWin(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.proxyWin = proxyWin;\n        });\n    }\n\n    getHelpers() : ParentHelpers<P> {\n        return {\n            state:       this.state,\n            event:       this.event,\n            close:       () => this.close(),\n            focus:       () => this.focus(),\n            resize:      ({ width, height }) => this.resize({ width, height }),\n            onError:     (err) => this.onError(err),\n            updateProps: (props) => this.updateProps(props)\n        };\n    }\n\n    setProps(props : PropsInputType<P>, isUpdate : boolean = false) {\n        if (this.component.validate) {\n            this.component.validate({ props });\n        }\n\n        const helpers = this.getHelpers();\n\n        // $FlowFixMe\n        this.props = this.props || {};\n        extend(this.props, normalizeProps(this.component, this, props, helpers, isUpdate));\n\n        for (const key of this.component.getPropNames()) {\n            const propDef = this.component.getPropDefinition(key);\n            if (propDef.required !== false && !isDefined(this.props[key])) {\n                throw new Error(`Expected prop \"${ key }\" to be defined`);\n            }\n        }\n    }\n\n    buildUrl() : ZalgoPromise<string> {\n        return propsToQuery({ ...this.component.props, ...this.component.builtinProps }, this.props).then(query => {\n            return extendUrl(normalizeMockUrl(this.component.getUrl(this.props)), { query });\n        });\n    }\n\n    getDomain() : string | RegExp {\n        return this.component.getDomain(this.props);\n    }\n\n    getInitialDomain() : string {\n        return this.component.getInitialDomain(this.props);\n    }\n\n    getPropsForChild(domain : string | RegExp) : (PropsType<P>) {\n        const result = {};\n\n        for (const key of Object.keys(this.props)) {\n            const prop = this.component.getPropDefinition(key);\n\n            if (prop && prop.sendToChild === false) {\n                continue;\n            }\n\n            if (prop && prop.sameDomain && !matchDomain(domain, getDomain(window))) {\n                continue;\n            }\n\n            // $FlowFixMe\n            result[key] = this.props[key];\n        }\n\n        // $FlowFixMe\n        return result;\n    }\n\n    updateProps(props : PropsInputType<P>) : ZalgoPromise<void> {\n        this.setProps(props, true);\n\n        return this.initPromise.then(() => {\n            if (this.child) {\n                return this.child.updateProps(this.getPropsForChild(this.getDomain()));\n            }\n        });\n    }\n\n    openFrame() : ZalgoPromise<?ProxyElement<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openFrame) {\n                return this.driver.openFrame.call(this);\n            }\n        });\n    }\n\n    openPrerenderFrame() : ZalgoPromise<?ProxyElement<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openPrerenderFrame) {\n                return this.driver.openPrerenderFrame.call(this);\n            }\n        });\n    }\n    \n    open(proxyFrame : ?ProxyElement<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`open`);\n\n            const windowProp = this.props.window;\n\n            if (windowProp) {\n                this.clean.register(() => windowProp.close());\n                return toProxyWindow(windowProp);\n            }\n\n            return this.driver.open.call(this, proxyFrame);\n\n        }).then(proxyWin => {\n            this.proxyWin = proxyWin;\n            return proxyWin;\n        });\n    }\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyElement<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return this.driver.openPrerender.call(this, proxyWin, proxyPrerenderFrame);\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.proxyWin) {\n                return this.proxyWin.focus().then(noop);\n            }\n        });\n    }\n\n    delegate(context : $Values<typeof CONTEXT>, target : CrossDomainWindowType) {\n        this.component.log(`delegate`);\n\n        const props = {};\n        for (const propName of this.component.getPropNames()) {\n            if (this.component.getPropDefinition(propName).allowDelegate) {\n                props[propName] = this.props[propName];\n            }\n        }\n\n        const overridesPromise = send(target, `${ POST_MESSAGE.DELEGATE }_${ this.component.name }`, {\n            context,\n            props,\n            overrides: {\n                event:   this.event,\n                close:   () => this.close(),\n                onError: (err) => this.onError(err)\n            }\n\n        }).then(({ data }) => {\n            this.clean.register(data.destroy);\n            return data.overrides;\n\n        }).catch(err => {\n            throw new Error(`Unable to delegate rendering. Possibly the component is not loaded in the target window.\\n\\n${ stringifyError(err) }`);\n        });\n\n        for (const key of this.driver.delegate) {\n            // $FlowFixMe\n            this[key] = function overriddenFunction() : ZalgoPromise<mixed> {\n                return overridesPromise.then(overrides => {\n                    return overrides[key].apply(this, arguments);\n                });\n            };\n        }\n    }\n\n    getWindowRef(target : CrossDomainWindowType, domain : string, uid : string, context : $Values<typeof CONTEXT>) : WindowRef {\n        \n        if (domain === getDomain(window)) {\n            const global = globalFor(window);\n            global.windows = global.windows || {};\n            global.windows[uid] = window;\n            this.clean.register(() => {\n                delete global.windows[uid];\n            });\n    \n            return { type: WINDOW_REFERENCES.GLOBAL, uid };\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return { type: WINDOW_REFERENCES.OPENER };\n        }\n\n        return { type: WINDOW_REFERENCES.PARENT, distance: getDistanceFromTop(window) };\n    }\n\n    watchForClose(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        return proxyWin.awaitWindow().then(win => {\n            const closeWindowListener = onCloseWindow(win, () => {\n                this.component.log(`detect_close_child`);\n                return this.close();\n            }, 2000);\n\n            this.clean.register(closeWindowListener.cancel);\n        });\n    }\n\n    watchForUnload() {\n        const unloadWindowListener = addEventListener(window, 'unload', once(() => {\n            this.component.log(`navigate_away`);\n            this.destroy(new Error(`Window navigated away`));\n        }));\n\n        this.clean.register(unloadWindowListener.cancel);\n    }\n\n    runTimeout() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const timeout = this.props.timeout;\n\n            if (timeout) {\n                return this.initPromise.timeout(timeout, new Error(`Loading component timed out after ${ timeout } milliseconds`));\n            }\n        });\n    }\n\n    initChild(child : ChildExportsType<P>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.clean.set('child', child);\n            this.initPromise.resolve();\n        });\n    }\n\n    buildParentExports(win : ProxyWindow) : ParentExportsType<P> {\n        const onError    = (err) => this.onError(err);\n        const init       = (child) => this.initChild(child);\n        const close      = () => this.close();\n        const checkClose = () => this.checkClose(win);\n        const resize     = ({ width, height }) => this.resize({ width, height });\n\n        init.onError = onError;\n\n        return { init, close, checkClose, resize, onError };\n    }\n\n    resize({ width, height } : { width? : ?number, height? : ?number }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.resize) {\n                return this.driver.resize.call(this, { width, height });\n            }\n        });\n    }\n\n    checkClose(win : ProxyWindow) : ZalgoPromise<void> {\n        return win.isClosed().then(closed => {\n            if (closed) {\n                return this.close();\n            }\n\n            return ZalgoPromise.delay(200)\n                .then(() => win.isClosed())\n                .then(secondClosed => {\n                    if (secondClosed) {\n                        return this.close();\n                    }\n                });\n        });\n    }\n\n    close() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`close`);\n            return this.event.trigger(EVENT.CLOSE);\n\n        }).then(() => {\n            if (this.child) {\n                this.child.close.fireAndForget().catch(noop);\n            }\n\n            return this.destroy(new Error(`Window closed`), false);\n        });\n    }\n\n    prerender(proxyPrerenderWin : ProxyWindow, { context, uid } : { context : $Values<typeof CONTEXT>, uid : string }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const prerenderTemplate = this.component.prerenderTemplate;\n\n            if (!prerenderTemplate) {\n                return;\n            }\n\n            let prerenderWindow = proxyPrerenderWin.getWindow();\n\n            if (!prerenderWindow || !isSameDomain(prerenderWindow) || !isBlankDomain(prerenderWindow)) {\n                return;\n            }\n\n            prerenderWindow = assertSameDomain(prerenderWindow);\n    \n            const doc = prerenderWindow.document;\n            const el = this.renderTemplate(prerenderTemplate, { context, uid, doc });\n\n            if (!el) {\n                return;\n            }\n\n            if (el.ownerDocument !== doc) {\n                throw new Error(`Expected prerender template to have been created with document from child window`);\n            }\n\n            writeElementToWindow(prerenderWindow, el);\n\n            let { width = false, height = false, element = 'body' } = this.component.autoResize || {};\n            element = getElementSafe(element, doc);\n            \n            if (element && (width || height)) {\n                onResize(element, ({ width: newWidth, height: newHeight }) => {\n                    this.resize({\n                        width:  width ? newWidth : undefined,\n                        height: height ? newHeight : undefined\n                    });\n                }, { width, height, win: prerenderWindow });\n            }\n        });\n    }\n\n    renderTemplate(renderer : (RenderOptionsType<P>) => ?HTMLElement, { context, uid, container, doc, frame, prerenderFrame } : { context : $Values<typeof CONTEXT>, uid : string, container? : HTMLElement, doc : Document, frame? : ?HTMLIFrameElement, prerenderFrame? : ?HTMLIFrameElement }) : ?HTMLElement {\n        // $FlowFixMe\n        return renderer.call(this, {\n            container,\n            context,\n            uid,\n            doc,\n            frame,\n            prerenderFrame,\n            focus:      () => this.focus(),\n            close:      () => this.close(),\n            state:      this.state,\n            props:      this.props,\n            tag:        this.component.tag,\n            dimensions: this.component.dimensions,\n            event:      this.event\n        });\n    }\n\n    renderContainer(proxyContainer : ProxyElement<HTMLElement>, { proxyFrame, proxyPrerenderFrame, context, uid } : { context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyElement<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyElement<HTMLIFrameElement> }) : ZalgoPromise<?ProxyElement<HTMLElement>> {\n        return ZalgoPromise.all([\n            proxyContainer.getElement().then(elementReady),\n            // $FlowFixMe\n            proxyFrame ? proxyFrame.getElement() : null,\n            // $FlowFixMe\n            proxyPrerenderFrame ? proxyPrerenderFrame.getElement() : null\n        ]).then(([ container, frame, prerenderFrame ]) => {\n            const innerContainer = this.renderTemplate(this.component.containerTemplate, { context, uid, container, frame, prerenderFrame, doc: document });\n            if (innerContainer) {\n                appendChild(container, innerContainer);\n                this.clean.register(() => destroyElement(innerContainer));\n                this.proxyContainer = getProxyElement(innerContainer);\n                return this.proxyContainer;\n            }\n        });\n    }\n\n    destroy(err? : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (!err) {\n                trigger = false;\n                err = new Error('Component destroyed');\n            }\n            this.component.log(`destroy`);\n            return this.onError(err, trigger);\n        }).then(() => {\n            return this.clean.all();\n        });\n    }\n\n    onError(err : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.handledErrors.indexOf(err) !== -1) {\n                return;\n            }\n\n            this.handledErrors.push(err);\n            this.initPromise.asyncReject(err);\n\n            if (trigger) {\n                return this.event.trigger(EVENT.ERROR, err);\n            }\n        });\n    }\n\n    openBridge(proxyWin : ProxyWindow, domain : string, context : $Values<typeof CONTEXT>) : ?ZalgoPromise<?CrossDomainWindowType> {\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            return ZalgoPromise.try(() => {\n                return proxyWin.awaitWindow();\n                \n            }).then(win => {\n                if (!bridge || !bridge.needsBridge({ win, domain }) || bridge.hasBridge(domain, domain)) {\n                    return;\n                }\n\n                const bridgeUrl = this.component.getBridgeUrl();\n\n                if (!bridgeUrl) {\n                    throw new Error(`Bridge needed to render ${ context }`);\n                }\n\n                const bridgeDomain = getDomainFromUrl(bridgeUrl);\n                bridge.linkUrl(win, domain);\n                return bridge.openBridge(normalizeMockUrl(bridgeUrl), bridgeDomain);\n            });\n        }\n    }\n}\n","/* @flow */\n\nimport { onCloseWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { ProxyWindow } from 'post-robot/src';\nimport { cleanup, type CleanupType, type EventEmitterType } from 'belter/src';\n\nimport { ParentComponent } from '../parent';\nimport { RENDER_DRIVERS, type ContextDriverType } from '../parent/drivers';\nimport type { Component } from '../component';\n\nexport type DelegatePropsType = {|\n    onClose : () => ?ZalgoPromise<void>,\n    onDisplay : () => ?ZalgoPromise<void>,\n    window : ?ProxyWindow\n|};\n\nexport type DelegateOptionsType = {|\n    context : string,\n    props : DelegatePropsType,\n    overrides : {\n        close : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    }\n|};\n\nexport type DelegateReturnType = {|\n    overrides : Object,\n    destroy : () => ZalgoPromise<void>\n|};\n\nexport class DelegateComponent<P>  {\n\n    component : Component<P>\n    source : CrossDomainWindowType\n    context : string\n    driver : ContextDriverType\n    props : DelegatePropsType\n    clean : CleanupType\n\n    focus : () => ZalgoPromise<void>\n    resize : ({ width? : ?number, height? : ?number }) => ZalgoPromise<void>\n    renderTemplate : Function\n\n    close : () => ZalgoPromise<void>\n    onError : (mixed) => ZalgoPromise<void>\n    event : EventEmitterType\n\n    constructor(component : Component<P>, source : CrossDomainWindowType, options : DelegateOptionsType) {\n        this.component = component;\n        this.context = options.context;\n        this.driver = RENDER_DRIVERS[options.context];\n        this.clean = cleanup(this);\n        \n        this.focus = ParentComponent.prototype.focus;\n        this.resize = ParentComponent.prototype.resize;\n        this.renderTemplate = ParentComponent.prototype.renderTemplate;\n\n        // $FlowFixMe\n        this.props = {};\n        for (const propName of Object.keys(options.props)) {\n            const propDef = this.component.getPropDefinition(propName);\n            if (propDef && propDef.allowDelegate && options.props[propName]) {\n                // $FlowFixMe\n                this.props[propName] = options.props[propName];\n            }\n        }\n\n        this.close   = options.overrides.close;\n        this.onError = options.overrides.onError;\n        this.event   = options.overrides.event;\n\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n\n        this.watchForSourceClose(source);\n    }\n\n    getDelegate() : DelegateReturnType {\n        return {\n            overrides: this.getOverrides(),\n            destroy:   () => this.destroy()\n        };\n    }\n\n    watchForSourceClose(source : CrossDomainWindowType) {\n        const closeSourceWindowListener = onCloseWindow(source, () => this.destroy(), 3000);\n        this.clean.register(closeSourceWindowListener.cancel);\n    }\n\n    getOverrides() : { [string] : mixed } {\n        const overrides = {};\n        const self = this;\n\n        for (const key of this.driver.delegate) {\n            overrides[key] = function delegateOverride() : mixed {\n                // $FlowFixMe\n                return ParentComponent.prototype[key].apply(self, arguments);\n            };\n            overrides[key].__name__ = key;\n        }\n\n        return overrides;\n    }\n\n    destroy() : ZalgoPromise<void> {\n        return this.clean.all();\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { destroyElement } from 'belter/src';\n\nimport { type RenderOptionsType } from '../../parent';\nimport { EVENT } from '../../constants';\n\nconst CLASS = {\n    VISIBLE:   'visible',\n    INVISIBLE: 'invisible'\n};\n\nexport function defaultContainerTemplate<P>({ uid, frame, prerenderFrame, doc, event, dimensions : { width, height } } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_CONTAINER__) {\n        if (!frame || !prerenderFrame) {\n            return;\n        }\n    \n        prerenderFrame.classList.add(CLASS.VISIBLE);\n        frame.classList.add(CLASS.INVISIBLE);\n    \n        event.on(EVENT.RENDERED, () => {\n            prerenderFrame.classList.remove(CLASS.VISIBLE);\n            prerenderFrame.classList.add(CLASS.INVISIBLE);\n    \n            frame.classList.remove(CLASS.INVISIBLE);\n            frame.classList.add(CLASS.VISIBLE);\n    \n            setTimeout(() => {\n                destroyElement(prerenderFrame);\n            }, 1);\n        });\n\n        const div = doc.createElement('div');\n        div.setAttribute('id', uid);\n        const style = doc.createElement('style');\n\n        style.appendChild(doc.createTextNode(`\n            #${ uid } {\n                display: inline-block;\n                position: relative;\n                width: ${ width };\n                height: ${ height };\n            }\n\n            #${ uid } > iframe {\n                display: inline-block;\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                top: 0;\n                left: 0;\n                transition: opacity .2s ease-in-out;\n            }\n\n            #${ uid } > iframe.${ CLASS.INVISIBLE } {\n                opacity: 0;\n            }\n\n            #${ uid } > iframe.${ CLASS.VISIBLE } {\n                opacity: 1;\n        }\n        `));\n\n        div.appendChild(frame);\n        div.appendChild(prerenderFrame);\n        div.appendChild(style);\n\n        return div;\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { type RenderOptionsType } from '../../parent';\n\nexport function defaultPrerenderTemplate<P>({ doc } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_PRERENDER__) {\n        const html = doc.createElement('html');\n        const body = doc.createElement('body');\n        const style = doc.createElement('style');\n        const spinner = doc.createElement('div');\n        spinner.classList.add('spinner');\n\n        html.appendChild(body);\n        body.appendChild(spinner);\n        body.appendChild(style);\n        style.appendChild(doc.createTextNode(`\n            .spinner {\n                position: fixed;\n                max-height: 60vmin;\n                max-width: 60vmin;\n                height: 40px;\n                width: 40px;\n                top: 50%;\n                left: 50%;\n                box-sizing: border-box;\n                border: 3px solid rgba(0, 0, 0, .2);\n                border-top-color: rgba(33, 128, 192, 0.8);\n                border-radius: 100%;\n                animation: rotation .7s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: translateX(-50%) translateY(-50%) rotate(0deg);\n                }\n                to {\n                    transform: translateX(-50%) translateY(-50%) rotate(359deg);\n                }\n            }\n        `));\n\n        return html;\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, noop } from 'belter/src';\nimport { isWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ProxyWindow, toProxyWindow } from 'post-robot/src';\n\nimport { PROP_SERIALIZATION } from '../constants';\n\nexport type EventHandlerType<T> = (T) => void | ZalgoPromise<void>;\n\nexport type timeoutPropType = number;\nexport type windowPropType = CrossDomainWindowType | ProxyWindow;\nexport type closePropType = () => ZalgoPromise<void>;\nexport type focusPropType = () => ZalgoPromise<void>;\nexport type resizePropType = ({ width : ?number, height : ?number }) => ZalgoPromise<void>;\n\nexport type onDisplayPropType = EventHandlerType<void>;\nexport type onRenderedPropType = EventHandlerType<void>;\nexport type onRenderPropType = EventHandlerType<void>;\nexport type onClosePropType = EventHandlerType<void>;\nexport type onErrorPropType = EventHandlerType<mixed>;\nexport type onPropsPropType<P> = ((PropsType<P>) => void) => void; // eslint-disable-line no-use-before-define\n\nexport type PropsInputType<P> = {\n    timeout? : timeoutPropType,\n    window? : windowPropType,\n\n    onDisplay? : onDisplayPropType,\n    onRendered? : onRenderedPropType,\n    onRender? : onRenderPropType,\n    onClose? : onClosePropType,\n    onError? : onErrorPropType,\n    onProps? : onPropsPropType<P>\n} & P;\n\nexport type PropsType<P> = {|\n    timeout? : timeoutPropType,\n    window? : ?windowPropType,\n    close? : ?closePropType,\n    focus? : ?focusPropType,\n    resize? : ?resizePropType,\n\n    onDisplay : onDisplayPropType,\n    onRendered : onRenderedPropType,\n    onRender : onRenderPropType,\n    onClose : onClosePropType,\n    onError : onErrorPropType,\n    onProps : onPropsPropType<P>\n|} & P;\n\ntype PropDefinitionType<T, P, S : string> = {|\n    type : S,\n    alias? : string,\n    value? : ({ props : P, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => ?T,\n    required? : boolean,\n    queryParam? : boolean | string | ({ value : T }) => (string | ZalgoPromise<string>),\n    queryValue? : ({ value : T }) => (ZalgoPromise<mixed> | mixed),\n    sendToChild? : boolean,\n    allowDelegate? : boolean,\n    validate? : ({ value : T, props : PropsInputType<P> }) => void,\n    decorate? : ({ value : T, props : PropsType<P>, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => T,\n    default? : ({ props : P, state : Object }) => ?T,\n    sameDomain? : boolean,\n    serialization? : $Values<typeof PROP_SERIALIZATION>,\n    childDecorate? : ({ value : T, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void>, onProps : ((PropsType<P>) => void) => void, resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void> }) => ?T\n|};\n\nexport type BooleanPropDefinitionType<T : boolean, P> = PropDefinitionType<T, P, 'boolean'>;\nexport type StringPropDefinitionType<T : string, P> = PropDefinitionType<T, P, 'string'>;\nexport type NumberPropDefinitionType<T : number, P> = PropDefinitionType<T, P, 'number'>;\nexport type FunctionPropDefinitionType<T : Function, P> = PropDefinitionType<T, P, 'function'>;\nexport type ArrayPropDefinitionType<T : Array<*>, P> = PropDefinitionType<T, P, 'array'>; // eslint-disable-line flowtype/no-mutable-array\nexport type ObjectPropDefinitionType<T : Object, P> = PropDefinitionType<T, P, 'object'>;\n\nexport type MixedPropDefinitionType<P> = BooleanPropDefinitionType<*, P> | StringPropDefinitionType<*, P> | NumberPropDefinitionType<*, P> | FunctionPropDefinitionType<*, P> | ObjectPropDefinitionType<*, P> | ArrayPropDefinitionType<*, P>;\n\nexport type UserPropsDefinitionType<P> = {\n    [string] : MixedPropDefinitionType<P>\n};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type BuiltInPropsDefinitionType<P> = {\n    timeout : NumberPropDefinitionType<timeoutPropType, P>,\n    window : ObjectPropDefinitionType<windowPropType, P>,\n    close : FunctionPropDefinitionType<closePropType, P>,\n    focus : FunctionPropDefinitionType<focusPropType, P>,\n    resize : FunctionPropDefinitionType<resizePropType, P>,\n\n    onDisplay : FunctionPropDefinitionType<onDisplayPropType, P>,\n    onRendered : FunctionPropDefinitionType<onRenderedPropType, P>,\n    onRender : FunctionPropDefinitionType<onRenderPropType, P>,\n    onClose : FunctionPropDefinitionType<onClosePropType, P>,\n    onError : FunctionPropDefinitionType<onErrorPropType, P>,\n    onProps : FunctionPropDefinitionType<onPropsPropType<P>, P>\n};\n\nconst defaultNoop = () => noop;\nconst decorateOnce = ({ value }) => once(value);\n\nexport function getBuiltInProps<P>() : BuiltInPropsDefinitionType<P> {\n    return {\n        window: {\n            type:          'object',\n            sendToChild:   false,\n            required:      false,\n            allowDelegate: true,\n            validate({ value } : { value : CrossDomainWindowType | ProxyWindow }) {\n                if (!isWindow(value) && !ProxyWindow.isProxyWindow(value)) {\n                    throw new Error(`Expected Window or ProxyWindow`);\n                }\n            },\n            decorate({ value } : { value : CrossDomainWindowType | ProxyWindow }) : ProxyWindow {\n                return toProxyWindow(value);\n            }\n        },\n\n        timeout: {\n            type:        'number',\n            required:    false,\n            sendToChild: false\n        },\n\n        close: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ close }) => close\n        },\n\n        focus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ focus }) => focus\n        },\n\n        resize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ resize }) => resize\n        },\n\n        getParent: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParent }) => getParent\n        },\n\n        onDisplay: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onRendered: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onRender: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onClose: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onError: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ onError }) => onError\n        },\n\n        onProps: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            default:       defaultNoop,\n            childDecorate: ({ onProps }) => onProps\n        }\n    };\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { on, send, bridge, toProxyWindow } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindow, getDomainFromUrl, type CrossDomainWindowType, isSameTopWindow, getDomain, matchDomain, isSameDomain } from 'cross-domain-utils/src';\nimport { isRegex, noop, isElement } from 'belter/src';\n\nimport { ChildComponent, getChildPayload } from '../child';\nimport { ParentComponent, type RenderOptionsType, type ParentHelpers } from '../parent';\nimport { DelegateComponent } from '../delegate';\nimport { CONTEXT, POST_MESSAGE, WILDCARD, DEFAULT_DIMENSIONS } from '../constants';\nimport { react, angular, vue, angular2 } from '../drivers';\nimport type { CssDimensionsType, StringMatcherType } from '../types';\n\nimport { validate } from './validate';\nimport { defaultContainerTemplate, defaultPrerenderTemplate } from './templates';\nimport { getBuiltInProps, type UserPropsDefinitionType, type BuiltInPropsDefinitionType, type PropsInputType, type PropsType, type MixedPropDefinitionType } from './props';\n\ntype LoggerPayload = { [string] : ?string };\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype Logger = {\n    debug : (event : string, payload? : LoggerPayload) => void,\n    info : (event : string, payload? : LoggerPayload) => void,\n    warn : (event : string, payload? : LoggerPayload) => void,\n    error : (event : string, payload? : LoggerPayload) => void\n};\n\n/*  Component\n    ---------\n\n    This is the spec for the component. The idea is, when I call zoid.create(), it will create a new instance\n    of Component with the blueprint needed to set up ParentComponents and ChildComponents.\n\n    This is the one portion of code which is required by -- and shared to -- both the parent and child windows, and\n    contains all of the configuration needed for them to set themselves up.\n*/\n\nexport type ComponentOptionsType<P> = {|\n\n    tag : string,\n\n    url : string | ({ props : PropsType<P> }) => string,\n    domain? : string | RegExp,\n    bridgeUrl? : string,\n\n    props? : UserPropsDefinitionType<P>,\n\n    dimensions? : CssDimensionsType,\n    autoResize? : { width? : boolean, height? : boolean, element? : string },\n\n    allowedParentDomains? : StringMatcherType,\n\n    attributes? : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    },\n\n    defaultContext? : $Values<typeof CONTEXT>,\n\n    containerTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n\n    validate? : ({ props : PropsInputType<P> }) => void,\n\n    logger? : Logger\n|};\n\ntype ZoidRenderer = {|\n    render : (container? : string | HTMLElement, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    renderTo : (target : CrossDomainWindowType, container? : string, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>\n|};\n\nexport type ZoidComponentInstance<P> = {| ...ParentHelpers<P>, ...ZoidRenderer |};\n\nexport type ZoidComponent<P> = {|\n    (PropsInputType<P>) : ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    xprops? : PropsType<P>,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>\n|};\n\nexport class Component<P> {\n\n    tag : string\n    name : string\n    \n    url : string | ({ props : PropsType<P> }) => string\n    domain : void | string | RegExp\n    bridgeUrl : void | string\n\n    props : UserPropsDefinitionType<P>\n    builtinProps : BuiltInPropsDefinitionType<P>\n\n    dimensions : CssDimensionsType\n    autoResize : void | { width? : boolean, height? : boolean, element? : string }\n\n    allowedParentDomains : StringMatcherType\n\n    defaultContext : $Values<typeof CONTEXT>\n    \n    attributes : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    }\n\n    containerTemplate : (RenderOptionsType<P>) => ?HTMLElement\n    prerenderTemplate : ?(RenderOptionsType<P>) => ?HTMLElement\n\n    validate : void | ({ props : PropsInputType<P> }) => void\n\n    driverCache : { [string] : mixed }\n\n    xprops : ?PropsType<P>\n\n    logger : Logger\n\n    propNames : $ReadOnlyArray<string>\n\n    constructor(options : ComponentOptionsType<P>) {\n        validate(options);\n\n        // The tag name of the component. Used by some drivers (e.g. angular) to turn the component into an html element,\n        // e.g. <my-component>\n\n        this.tag = options.tag;\n        this.name = this.tag.replace(/-/g, '_');\n\n        this.allowedParentDomains = options.allowedParentDomains || WILDCARD;\n\n        if (Component.components[this.tag]) {\n            throw new Error(`Can not register multiple components with the same tag: ${ this.tag }`);\n        }\n\n        // A json based spec describing what kind of props the component accepts. This is used to validate any props before\n        // they are passed down to the child.\n\n        this.builtinProps = getBuiltInProps();\n        this.props = options.props || {};\n\n        // The dimensions of the component, e.g. { width: '300px', height: '150px' }\n\n        const { width = DEFAULT_DIMENSIONS.WIDTH, height = DEFAULT_DIMENSIONS.HEIGHT } = options.dimensions || {};\n        this.dimensions = { width, height };\n\n        this.url = options.url;\n        this.domain = options.domain;\n        this.bridgeUrl = options.bridgeUrl;\n\n        this.attributes = options.attributes || {};\n        this.attributes.iframe = this.attributes.iframe || {};\n        this.attributes.popup = this.attributes.popup || {};\n\n        this.defaultContext = options.defaultContext || CONTEXT.IFRAME;\n\n        this.autoResize = options.autoResize;\n\n        if (options.containerTemplate) {\n            this.containerTemplate = options.containerTemplate;\n        } else if (__ZOID__.__DEFAULT_CONTAINER__) {\n            this.containerTemplate = defaultContainerTemplate;\n        }\n\n        if (options.prerenderTemplate) {\n            this.prerenderTemplate = options.prerenderTemplate;\n        } else if (__ZOID__.__DEFAULT_PRERENDER__) {\n            this.prerenderTemplate = defaultPrerenderTemplate;\n        }\n\n        this.validate = options.validate;\n\n        this.logger = options.logger || {\n            debug: noop,\n            info:  noop,\n            warn:  noop,\n            error: noop\n        };\n\n        this.registerChild();\n        this.listenDelegate();\n\n        Component.components[this.tag] = this;\n    }\n\n    getPropNames() : $ReadOnlyArray<string> {\n        if (this.propNames) {\n            return this.propNames;\n        }\n\n        const propNames = Object.keys(this.props);\n        for (const key of Object.keys(this.builtinProps)) {\n            if (propNames.indexOf(key) === -1) {\n                propNames.push(key);\n            }\n        }\n\n        this.propNames = propNames;\n        return propNames;\n    }\n\n    // $FlowFixMe\n    getPropDefinition(name : string) : MixedPropDefinitionType<P> {\n        // $FlowFixMe\n        return this.props[name] || this.builtinProps[name];\n    }\n\n    driver(name : string, dep : mixed) : mixed {\n        if (__ZOID__.__FRAMEWORK_SUPPORT__) {\n            const drivers = { react, angular, vue, angular2 };\n\n            if (!drivers[name]) {\n                throw new Error(`Could not find driver for framework: ${ name }`);\n            }\n    \n            this.driverCache = this.driverCache || {};\n    \n            if (!this.driverCache[name]) {\n                this.driverCache[name] = drivers[name].register(this, dep);\n            }\n    \n            return this.driverCache[name];\n        } else {\n            throw new Error(`Driver support not enabled`);\n        }\n    }\n\n    registerChild() {\n        if (this.isChild()) {\n            if (window.xprops) {\n                throw new Error(`Can not register ${ this.name } as child - can not attach multiple components to the same window`);\n            }\n\n            const child = new ChildComponent(this);\n            window.xprops = this.xprops = child.getProps();\n        }\n    }\n\n    listenDelegate() {\n        on(`${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`, () => {\n            return true;\n        });\n\n        on(`${ POST_MESSAGE.DELEGATE }_${ this.name }`, ({ source, data: { context, props, overrides } }) => {\n            const delegate = new DelegateComponent(this, source, { context, props, overrides });\n            return delegate.getDelegate();\n        });\n    }\n\n    canRenderTo(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return send(win, `${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`).then(({ data }) => {\n            return data;\n        }).catch(() => {\n            return false;\n        });\n    }\n\n    getUrl(props : PropsType<P>) : string {\n        if (typeof this.url === 'function') {\n            return this.url({ props });\n        }\n\n        return this.url;\n    }\n\n    getInitialDomain(props : PropsType<P>) : string {\n        if (this.domain && typeof this.domain === 'string') {\n            return this.domain;\n        }\n\n        return getDomainFromUrl(this.getUrl(props));\n    }\n\n    getDomain(props : PropsType<P>) : string | RegExp {\n        if (isRegex(this.domain)) {\n            // $FlowFixMe\n            return this.domain;\n        }\n\n        return this.getInitialDomain(props);\n    }\n\n    getBridgeUrl() : ?string {\n        if (this.bridgeUrl) {\n            return this.bridgeUrl;\n        }\n    }\n\n    isChild() : boolean {\n        const payload = getChildPayload();\n        return Boolean(payload && payload.tag === this.tag);\n    }\n\n    getDefaultContainer<T : (string | HTMLElement)>(context : $Values<typeof CONTEXT>, container? : T) : T {\n        if (container) {\n            if (typeof container !== 'string' && !isElement(container)) {\n                throw new TypeError(`Expected string or element selector to be passed`);\n            }\n\n            return container;\n        }\n\n        if (context === CONTEXT.POPUP) {\n            // $FlowFixMe\n            return 'body';\n        }\n\n        throw new Error(`Expected element to be passed to render iframe`);\n    }\n\n    getDefaultContext(context : ?$Values<typeof CONTEXT>, props : PropsInputType<P>) : $Values<typeof CONTEXT> {\n        if (props.window) {\n            return toProxyWindow(props.window).getType();\n        }\n\n        if (context) {\n            if (context !== CONTEXT.IFRAME && context !== CONTEXT.POPUP) {\n                throw new Error(`Unrecognized context: ${ context }`);\n            }\n            \n            return context;\n        }\n\n        return this.defaultContext;\n    }\n\n    init(props : PropsInputType<P>) : ZoidComponentInstance<P> {\n\n        // $FlowFixMe\n        props = props || {};\n        \n        const parent = new ParentComponent(this, props);\n\n        const render = (target, container, context) => ZalgoPromise.try(() => {\n            if (!isWindow(target)) {\n                throw new Error(`Must pass window to renderTo`);\n            }\n\n            context = this.getDefaultContext(context, props);\n            container = this.getDefaultContainer(context, container);\n            return parent.render(target, container, context);\n        });\n\n        return {\n            ...parent.getHelpers(),\n            render:   (container, context) => render(window, container, context),\n            renderTo: (target, container, context) => render(target, container, context)\n        };\n    }\n\n    checkAllowRender(target : CrossDomainWindowType, domain : string | RegExp, container : string | HTMLElement) {\n        if (target === window) {\n            return;\n        }\n\n        if (!isSameTopWindow(window, target)) {\n            throw new Error(`Can only renderTo an adjacent frame`);\n        }\n\n        const origin = getDomain();\n\n        if (!matchDomain(domain, origin) && !isSameDomain(target)) {\n            throw new Error(`Can not render remotely to ${ domain.toString() } - can only render to ${ origin }`);\n        }\n\n        if (container && typeof container !== 'string') {\n            throw new Error(`Container passed to renderTo must be a string selector, got ${ typeof container } }`);\n        }\n    }\n\n    log(event : string, payload? : LoggerPayload) {\n        this.logger.info(`${ this.name }_${ event }`, payload);\n    }\n\n    static components : { [string] : Component<*> } = {}\n    static activeComponents : Array<ParentComponent<*> | DelegateComponent<*>> = [] // eslint-disable-line flowtype/no-mutable-array\n\n    registerActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        Component.activeComponents.push(instance);\n    }\n\n    destroyActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        Component.activeComponents.splice(Component.activeComponents.indexOf(instance), 1);\n    }\n\n    static destroyAll() : ZalgoPromise<void> {\n        if (bridge) {\n            bridge.destroyBridges();\n        }\n\n        const results = [];\n\n        while (Component.activeComponents.length) {\n            results.push(Component.activeComponents[0].destroy());\n        }\n\n        return ZalgoPromise.all(results).then(noop);\n    }\n}\n\nexport type ComponentDriverType<P, T : mixed> = {|\n    register : (Component<P>, T) => mixed\n|};\n\nexport function create<P>(options : ComponentOptionsType<P>) : ZoidComponent<P> {\n    const component : Component<P> = new Component(options);\n\n    const init = (props) => component.init(props);\n    init.driver = (name, dep) => component.driver(name, dep);\n    init.isChild = () => component.isChild();\n    init.canRenderTo = (win) => component.canRenderTo(win);\n    init.xprops = component.xprops;\n\n    // $FlowFixMe\n    return init;\n}\n\nexport function destroyAll() : ZalgoPromise<void> {\n    return Component.destroyAll();\n}\n","/* @flow */\n\nimport { isPerc, isPx, values } from 'belter/src';\n\nimport { CONTEXT, PROP_TYPE } from '../constants';\n\nimport type { ComponentOptionsType } from './index';\n\nfunction validatePropDefinitions<P>(options : ComponentOptionsType<P>) {\n\n    if (options.props && !(typeof options.props === 'object')) {\n        throw new Error(`Expected options.props to be an object`);\n    }\n\n    const PROP_TYPE_LIST = values(PROP_TYPE);\n\n    if (options.props) {\n        for (const key of Object.keys(options.props)) {\n\n            // $FlowFixMe\n            const prop = options.props[key];\n\n            if (!prop || !(typeof prop === 'object')) {\n                throw new Error(`Expected options.props.${ key } to be an object`);\n            }\n\n            if (!prop.type) {\n                throw new Error(`Expected prop.type`);\n            }\n\n            if (PROP_TYPE_LIST.indexOf(prop.type) === -1) {\n                throw new Error(`Expected prop.type to be one of ${ PROP_TYPE_LIST.join(', ') }`);\n            }\n\n            if (prop.required && prop.default) {\n                throw new Error(`Required prop can not have a default value`);\n            }\n\n            if (prop.type === PROP_TYPE.FUNCTION && prop.queryParam && !prop.queryValue) {\n                throw new Error(`Do not pass queryParam for function prop`);\n            }\n        }\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function validate<P>(options : ?ComponentOptionsType<P>) { // eslint-ignore-line\n\n    if (!options) {\n        throw new Error(`Expected options to be passed`);\n    }\n\n    // eslint-disable-next-line security/detect-unsafe-regex, unicorn/no-unsafe-regex\n    if (!options.tag || !options.tag.match(/^([a-z0-9]+-)+[a-z0-9]+$/)) {\n        throw new Error(`Invalid options.tag: ${ options.tag }`);\n    }\n\n    validatePropDefinitions(options);\n\n    if (options.dimensions) {\n        if (options.dimensions && !isPx(options.dimensions.width) && !isPerc(options.dimensions.width)) {\n            throw new Error(`Expected options.dimensions.width to be a px or % string value`);\n        }\n\n        if (options.dimensions && !isPx(options.dimensions.height) && !isPerc(options.dimensions.height)) {\n            throw new Error(`Expected options.dimensions.height to be a px or % string value`);\n        }\n    }\n\n    if (options.defaultContext) {\n        if (options.defaultContext !== CONTEXT.IFRAME && options.defaultContext !== CONTEXT.POPUP) {\n            throw new Error(`Unsupported context type: ${ options.defaultContext || 'unknown' }`);\n        }\n    }\n\n    if (!options.url) {\n        throw new Error(`Must pass url`);\n    }\n\n    if (typeof options.url !== 'string' && typeof options.url !== 'function') {\n        throw new TypeError(`Expected url to be string or function`);\n    }\n\n    if (options.prerenderTemplate && typeof options.prerenderTemplate !== 'function') {\n        throw new Error(`Expected options.prerenderTemplate to be a function`);\n    }\n\n    if ((options.containerTemplate || !__ZOID__.__DEFAULT_CONTAINER__) && typeof options.containerTemplate !== 'function') {\n        throw new Error(`Expected options.containerTemplate to be a function`);\n    }\n}\n","/* @flow */\n\nexport { PopupOpenError } from 'belter/src';\nexport { create, destroyAll, Component } from './component';\nexport type { ZoidComponent, ZoidComponentInstance } from './component';\nexport type { RenderOptionsType } from './parent';\nexport { PROP_TYPE, PROP_SERIALIZATION, CONTEXT, EVENT } from './constants';\n"],"sourceRoot":""}