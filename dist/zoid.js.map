{"version":3,"sources":["webpack://zoid/webpack/universalModuleDefinition","webpack://zoid/webpack/bootstrap","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://zoid/./node_modules/zalgo-promise/src/utils.js","webpack://zoid/./node_modules/zalgo-promise/src/exceptions.js","webpack://zoid/./node_modules/zalgo-promise/src/flush.js","webpack://zoid/./node_modules/zalgo-promise/src/promise.js","webpack://zoid/./node_modules/cross-domain-utils/src/util.js","webpack://zoid/./node_modules/cross-domain-utils/src/constants.js","webpack://zoid/./node_modules/cross-domain-utils/src/utils.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://zoid/./node_modules/belter/src/util.js","webpack://zoid/./node_modules/belter/src/dom.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://zoid/./node_modules/belter/src/css.js","webpack://zoid/./node_modules/post-robot/src/conf/config.js","webpack://zoid/./node_modules/post-robot/src/conf/constants.js","webpack://zoid/./node_modules/post-robot/src/global.js","webpack://zoid/./node_modules/post-robot/src/lib/hello.js","webpack://zoid/./node_modules/post-robot/src/lib/windows.js","webpack://zoid/./node_modules/universal-serialize/src/constants.js","webpack://zoid/./node_modules/universal-serialize/src/common.js","webpack://zoid/./node_modules/universal-serialize/src/serialize.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/function.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/error.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/promise.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/regex.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/date.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/array.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/object.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/string.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/number.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/null.js","webpack://zoid/./node_modules/universal-serialize/src/deserialize.js","webpack://zoid/./node_modules/post-robot/src/bridge/common.js","webpack://zoid/./node_modules/post-robot/src/bridge/parent.js","webpack://zoid/./node_modules/post-robot/src/bridge/setup.js","webpack://zoid/./node_modules/post-robot/src/bridge/bridge.js","webpack://zoid/./node_modules/post-robot/src/bridge/child.js","webpack://zoid/./node_modules/post-robot/src/serialize/window.js","webpack://zoid/./node_modules/post-robot/src/serialize/function.js","webpack://zoid/./node_modules/post-robot/src/serialize/serialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/promise.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/strategies.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/index.js","webpack://zoid/./node_modules/post-robot/src/lib/compat.js","webpack://zoid/./node_modules/post-robot/src/drivers/listeners.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/types.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/index.js","webpack://zoid/./node_modules/post-robot/src/public/on.js","webpack://zoid/./node_modules/post-robot/src/public/send.js","webpack://zoid/./node_modules/post-robot/src/index.js","webpack://zoid/./node_modules/post-robot/src/setup.js","webpack://zoid/./node_modules/post-robot/src/clean.js","webpack://zoid/./src/lib/global.js","webpack://zoid/./src/lib/serialize.js","webpack://zoid/./src/constants.js","webpack://zoid/./src/child/props.js","webpack://zoid/./src/child/window.js","webpack://zoid/./src/child/index.js","webpack://zoid/./src/parent/drivers.js","webpack://zoid/./src/parent/props.js","webpack://zoid/./src/parent/index.js","webpack://zoid/./src/delegate/index.js","webpack://zoid/./src/component/templates/container.js","webpack://zoid/./src/component/templates/component.js","webpack://zoid/./src/component/props.js","webpack://zoid/./src/component/component.js","webpack://zoid/./src/component/validate.js","webpack://zoid/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","isPromise","item","Promise","window","Window","constructor","toString","then","err","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","Error","dispatch","setTimeout","indexOf","push","j","dispatchPossiblyUnhandledError","asyncReject","chain","firstPromise","secondPromise","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","all","promises","count","results","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","isRegex","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","location","protocol","getParent","parent","getOpener","opener","canReadFromWindow","getActualDomain","host","getDomain","domain","mockDomain","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","getParents","getFrames","frames","len","frame","getAllChildFrames","getTop","top","getAllFramesInWindow","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getUserAgent","navigator","mockUserAgent","userAgent","getFrameByName","winFrames","childFrame","isOpener","getAncestor","anyMatch","collection1","collection2","item1","getDistanceFromTop","distance","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","onCloseWindow","callback","maxtime","Infinity","check","isWindow","obj","__cross_domain_utils_window_check__","normalizeMockUrl","closeWindow","close","objectIDs","awaitFrameLoadPromises","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","getFunctionName","fn","__name__","displayName","setFunctionName","base64encode","str","btoa","encodeURIComponent","replace","p1","String","fromCharCode","parseInt","Buffer","from","uniqueID","chars","charAt","floor","Date","toISOString","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","memoizePromise","cache","memoizedPromiseFunction","reset","inlineMemoize","logic","__inline_memoize_cache__","noop","once","called","stringifyError","level","newErr","extend","safeInterval","loop","arrayFrom","isDefined","cleanup","tasks","cleaned","register","task","pop","assertExists","thing","isDocumentReady","document","body","readyState","urlEncode","waitForDocumentReady","interval","setInterval","clearInterval","parseQuery","queryString","params","pair","decodeURIComponent","extendQuery","originalQuery","props","filter","appendChild","container","isElement","element","Element","nodeType","style","getElementSafe","id","querySelector","elementReady","el","PopupOpenError","awaitFrameLoad","addEventListener","cleanIframes","linkFrameWindow","awaitFrameWindow","loadedFrame","iframe","options","tag","styleText","createElement","class","className","setAttribute","attributes","styleSheet","cssText","createTextNode","html","innerHTML","allowTransparency","backgroundColor","border","isIE","hasAttribute","getElement","event","removeEventListener","prototype","STYLE","DISPLAY","NONE","BLOCK","VISIBILITY","VISIBLE","HIDDEN","IMPORTANT","showElement","setProperty","hideElement","destroyElement","removeChild","isElementClosed","onResize","width","height","currentWidth","offsetWidth","currentHeight","offsetHeight","observer","newWidth","newHeight","ResizeObserver","observe","MutationObserver","childList","subtree","characterData","disconnect","isPerc","test","isPx","toNum","toPx","toCSS","normalizeDimension","dim","max","num","perc","percOf","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","BRIDGE_NAME_PREFIX","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","resolveHelloPromise","helloPromises","existingPromise","newPromise","sayHello","send","instanceID","data","getWindowInstanceID","awaitWindowHello","getHelloPromise","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","needsBridgeForBrowser","needsBridgeForWin","needsBridgeForDomain","needsBridge","getBridgeName","sanitizedDomain","isBridge","documentBodyReady","registerRemoteWindow","findRemoteWindow","remoteWinPromise","registerRemoteSendMessage","sendMessage","remoteWin","remoteDomain","fireAndForget","rejectRemoteSendMessage","linkWindow","popupWindowsByName","popupWindowsByWin","winName","details","setupBridge","windowOpen","on","receiveMessage","open","last","bridgePromise","bridge","winDetails","listenForOpenTunnel","openTunnelToParent","canary","tunnelWindows","parentWindow","cleanTunnelWindows","addTunnelWindow","tunnelWindow","setupOpenTunnelToParent","openTunnelToOpener","cleanupProxyWindows","idToProxyWindow","shouldClean","getSerializedWindow","winPromise","windowName","getType","getName","focus","isClosed","setLocation","href","setName","sameDomainWin","frameElement","ProxyWindow","serializedWindow","isProxyWindow","actualWindow","actualWindowPromise","getID","setWindow","isPopup","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","listenForFunctionCalls","__id__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","deserializePromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","serializedMessage","strategies","errors","strategyName","dom","forEach","postMessage","messagingChild","messagingParent","sendBridgeMessage","foreignGlobal","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","RECEIVE_MESSAGE_TYPES","logName","sendResponse","ack","response","pathname","handleError","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","existingListener","regexListeners","regexListener","strDomain","errorHandler","responseTimeout","childTimeout","validateOptions","actualParent","isAncestor","targetDomain","actualDomain","normalizedDomain","normalizeDomain","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","internalSerializeMessage","internalDeserializeMessage","cleanUpWindow","getProxyObject","openBridge","bridges","bridgeFrames","src","openBridgeFrame","linkUrl","hasBridge","destroyBridges","ZOID","POST_MESSAGE","PROP_TYPE","PROP_SERIALIZATION","DOTIFY","BASE64","CONTEXT","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","EVENT","RENDER","RENDERED","CLOSE","PROPS","RESIZE","FOCUS","normalizeChildProp","component","helpers","prop","getPropDefinition","childDecorate","onProps","resize","getParentDomain","show","hide","parseChildWindowName","zoidcomp","encodedPayload","atob","charCodeAt","base64decode","getChildPayload","ChildComponent","parentDomain","parentComponentWindow","onPropHandlers","autoResize","childPayload","__ZOID__","version","getParentComponentWindow","checkParentDomain","initialProps","getPropsByRef","setProps","watchForClose","init","buildExports","watchForResize","getHelpers","allowedParentDomains","ref","getNthParent","ancestor","windows","getProps","isUpdate","existingProps","sameDomain","alias","getPropNames","normalizeChildProps","checkClose","destroy","getAutoResize","updateProps","RENDER_DRIVERS","getQueryParam","queryParam","getQueryValue","queryValue","openOnClick","openFrame","title","proxyFrame","frameWatcher","clean","openPrerenderFrame","openPrerender","proxyWin","proxyPrerenderFrame","prerenderFrame","prerenderFrameWindow","delegate","dimensions","left","outerWidth","round","screenX","screen","outerHeight","screenY","status","toolbar","menubar","resizable","scrollbars","popup","ParentComponent","driver","initPromise","handledErrors","state","proxyContainer","visible","setupEvents","registerActiveComponent","destroyActiveComponent","watchForUnload","triggered","eventName","handlerList","trigger","triggerOnce","onRender","onDisplay","onRendered","onClose","onFocus","render","log","childDomain","getChildDomain","checkAllowRender","buildUrl","getProxyContainer","renderContainer","setState","setProxyWin","prerender","proxyPrerenderWin","buildWindowName","setWindowName","loadUrl","runTimeout","containerElement","buildChildPayload","getPropsRef","getPropsForChild","propRef","getWindowRef","buildParentExports","validate","inputProps","propNames","aliases","propDef","default","decorate","required","extendProps","propsDef","builtinProps","serialization","dotify","prefix","newobj","every","dotkey","query","originalUrl","originalHash","hashString","extendUrl","getUrl","sendToChild","windowProp","propName","allowDelegate","overridesPromise","overrides","unloadWindowListener","initChild","secondClosed","prerenderTemplate","prerenderWindow","isBlankDomain","renderTemplate","tagName","children","writeElementToWindow","renderer","innerContainer","containerTemplate","bridgeUrl","getBridgeUrl","bridgeDomain","DelegateComponent","watchForSourceClose","getDelegate","getOverrides","closeSourceWindowListener","CLASS","INVISIBLE","defaultContainerTemplate","div","cspNonce","classList","add","remove","defaultPrerenderTemplate","spinner","defaultNoop","decorateOnce","Component","defaultContext","driverCache","xprops","logger","PROP_TYPE_LIST","validatePropDefinitions","components","debug","info","warn","registerChild","listenDelegate","dep","isChild","canRenderTo","payload","getDefaultContainer","getDefaultContext","finalContext","renderTo","instance","activeComponents","initialized","setupGlobalReceiveMessage","sourceElement","originalEvent","messageListener","initHello","destroyAll","destroyComponents","responseListeners","cancelResponseListeners"],"mappings":"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","file":"zoid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"zoid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zoid\"] = factory();\n\telse\n\t\troot[\"zoid\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.Window === 'function' && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.constructor === 'function' && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        const chain = <T>(firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                secondPromise.resolve(res);\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    chain(result, promise);\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        const chain = <T>(i : number, firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                results[i] = res;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            chain(i, ZalgoPromise.resolve(prom), promise);\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win? : SameDomainWindowType = window) : string {\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win? : SameDomainWindowType = window) : string {\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getOpener(win));\n}\n\nexport function isIframe(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getParent(win));\n}\n\nexport function isFullpage(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(!isIframe(win) && !isPopup(win));\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function getFunctionName <T : Function>(fn : T) : string {\n    return fn.name || fn.__name__ || fn.displayName || 'anonymous';\n}\n\nexport function setFunctionName <T : Function>(fn : T, name : string) : T {\n    try {\n        delete fn.name;\n        fn.name = name;\n    } catch (err) {\n        // pass\n    }\n\n    fn.__name__ = fn.displayName = name;\n    return fn;\n}\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        }));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : Array<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\nexport function memoize<A, R, F : (...args : Array<A>) => R, X : { (...args : Array<A>) : R, displayName : string, reset : () => void }>(method : F, options : { time? : number, thisNamespace? : boolean } = {}) : X {\n    let cacheMap = new WeakMap();\n\n    // $FlowFixMe\n    let memoizedFunction : X = function memoizedFunction(...args : Array<A>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    return setFunctionName(memoizedFunction, `${ getFunctionName(method) }::memoized`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return setFunctionName(memoizedPromiseFunction, `${ getFunctionName(method) }::promiseMemoized`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return setFunctionName(promisifiedFunction, `${ getFunctionName(method) }::promisified`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    // $FlowFixMe\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    const onceFunction = function() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n\n    return setFunctionName(onceFunction, `${ getFunctionName(method) }::once`);\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    const promiseDebounced = function() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n\n    return setFunctionName(promiseDebounced, `${ getFunctionName(method) }::promiseDebounced`);\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : Array<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Array<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    const debounceWrapper = function() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n\n    return setFunctionName(debounceWrapper, `${ getFunctionName(method) }::debounced`);\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n                            \nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        // eslint-disable-next-line const-immutable/no-mutation\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    if (width && height) {\n        options = {\n            top,\n            left,\n            width,\n            height,\n            status:     1,\n            toolbar:    0,\n            menubar:    0,\n            resizable:  1,\n            scrollbars: 1,\n            ...options\n        };\n    }\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key] !== null && options[key] !== undefined) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n    \n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n\n    if (!enablePerformance()) {\n        return;\n    }\n\n    if (!window.performance || typeof window.performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = window.performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n\nexport function isPerc(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+%$/).test(str);\n}\n\nexport function isPx(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+px$/).test(str);\n}\n\nexport function toNum(val : string | number) : number {\n\n    if (typeof val === 'number') {\n        return val;\n    }\n\n    let match = val.match(/^([0-9]+)(px|%)$/);\n\n    if (!match) {\n        throw new Error(`Could not match css value from ${ val }`);\n    }\n\n    return parseInt(match[1], 10);\n}\n\nexport function toPx(val : number | string) : string {\n    return `${ toNum(val) }px`;\n}\n\nexport function toCSS(val : number | string) : string {\n\n    if (typeof val === 'number') {\n        return toPx(val);\n    }\n\n    return isPerc(val) ? val : toPx(val);\n}\n\nexport function percOf(num : number, perc : string) : number {\n    return parseInt(num * toNum(perc)  / 100, 10);\n}\n\nexport function normalizeDimension(dim : string | number, max : number) : number {\n    if (typeof dim === 'number') {\n        return dim;\n    } else if (isPerc(dim)) {\n        return percOf(max, dim);\n    } else if (isPx(dim)) {\n        return toNum(dim);\n    } else {\n        throw new Error(`Can not normalize dimension: ${ dim }`);\n    }\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction resolveHelloPromise(win : CrossDomainWindowType, { domain }) : ZalgoPromise<{ domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    const existingPromise = helloPromises.get(win);\n    if (existingPromise) {\n        existingPromise.resolve({ domain });\n    }\n    const newPromise = ZalgoPromise.resolve({ domain });\n    helloPromises.set(win, newPromise);\n    return newPromise;\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        resolveHelloPromise(source, { domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            resolveHelloPromise(win, { domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, getFrameByName, isWindowClosed, getDomainFromUrl, normalizeMockUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { BRIDGE_TIMEOUT, MESSAGE_NAME } from '../conf';\nimport { awaitWindowHello } from '../lib';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { getBridgeName, documentBodyReady, registerRemoteSendMessage, registerRemoteWindow } from './common';\n\nexport function listenForOpenTunnel({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n\n    on(MESSAGE_NAME.OPEN_TUNNEL, ({ source, origin, data }) => {\n        const bridgePromise = globalStore('bridges').get(origin);\n\n        if (!bridgePromise) {\n            throw new Error(`Can not find bridge promise for domain ${ origin }`);\n        }\n\n        return bridgePromise.then(bridge => {\n            if (source !== bridge) {\n                throw new Error(`Message source does not matched registered bridge for domain ${ origin }`);\n            }\n\n            if (!data.name) {\n                throw new Error(`Register window expected to be passed window name`);\n            }\n\n            if (!data.sendMessage) {\n                throw new Error(`Register window expected to be passed sendMessage method`);\n            }\n\n            if (!popupWindowsByName.has(data.name)) {\n                throw new Error(`Window with name ${ data.name } does not exist, or was not opened by this window`);\n            }\n\n            if (!popupWindowsByName.get(data.name).domain) {\n                throw new Error(`We do not have a registered domain for window ${ data.name }`);\n            }\n\n            if (popupWindowsByName.get(data.name).domain !== origin) {\n                throw new Error(`Message origin ${ origin } does not matched registered window origin ${ popupWindowsByName.get(data.name).domain }`);\n            }\n\n            registerRemoteSendMessage(popupWindowsByName.get(data.name).win, origin, data.sendMessage);\n\n            return {\n                sendMessage(message) {\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    const winDetails = popupWindowsByName.get(data.name);\n\n                    if (!winDetails) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: winDetails.domain,\n                            source: winDetails.win\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n            };\n        });\n    });\n}\n\nfunction openBridgeFrame(name : string, url : string) : HTMLIFrameElement {\n\n    const iframe = document.createElement(`iframe`);\n\n    iframe.setAttribute(`name`, name);\n    iframe.setAttribute(`id`,   name);\n\n    iframe.setAttribute(`style`, `display: none; margin: 0; padding: 0; border: 0px none; overflow: hidden;`);\n    iframe.setAttribute(`frameborder`, `0`);\n    iframe.setAttribute(`border`, `0`);\n    iframe.setAttribute(`scrolling`, `no`);\n    iframe.setAttribute(`allowTransparency`, `true`);\n\n    iframe.setAttribute(`tabindex`, `-1`);\n    iframe.setAttribute(`hidden`, `true`);\n    iframe.setAttribute(`title`, ``);\n    iframe.setAttribute(`role`, `presentation`);\n\n    iframe.src = url;\n\n    return iframe;\n}\n\nexport function hasBridge(url : string, domain : string) : boolean {\n    const bridges = globalStore('bridges');\n    return bridges.has(domain || getDomainFromUrl(url));\n}\n\nexport function openBridge(url : string, domain : string) : ZalgoPromise<CrossDomainWindowType> {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n    \n    domain = domain || getDomainFromUrl(url);\n    \n    return bridges.getOrSet(domain, () => ZalgoPromise.try(() => {\n\n        if (getDomain() === domain) {\n            throw new Error(`Can not open bridge on the same domain as current domain: ${ domain }`);\n        }\n\n        const name  = getBridgeName(domain);\n        const frame = getFrameByName(window, name);\n\n        if (frame) {\n            throw new Error(`Frame with name ${ name } already exists on page`);\n        }\n\n        const iframe = openBridgeFrame(name, url);\n        bridgeFrames.set(domain, iframe);\n\n        return documentBodyReady.then(body => {\n\n            body.appendChild(iframe);\n            const bridge = iframe.contentWindow;\n\n            return new ZalgoPromise((resolve, reject) => {\n\n                iframe.addEventListener('load', resolve);\n                iframe.addEventListener('error', reject);\n\n            }).then(() => {\n\n                return awaitWindowHello(bridge, BRIDGE_TIMEOUT, `Bridge ${ url }`);\n\n            }).then(() => {\n\n                return bridge;\n            });\n        });\n    }));\n}\n\ntype WinDetails = {|\n    win : CrossDomainWindowType,\n    domain? : ?string,\n    name? : ?string\n|};\n\nexport function linkWindow({ win, name, domain } : WinDetails) : WinDetails {\n    const popupWindowsByName = globalStore('popupWindowsByName');\n    const popupWindowsByWin = windowStore('popupWindowsByWin');\n\n    for (const winName of popupWindowsByName.keys()) {\n        // $FlowFixMe\n        const details = popupWindowsByName.get(winName);\n        if (!details || isWindowClosed(details.win)) {\n            popupWindowsByName.del(winName);\n        }\n    }\n\n    const details = popupWindowsByWin.getOrSet(win, () : WinDetails => {\n        if (!name) {\n            return { win };\n        }\n        \n        return popupWindowsByName.getOrSet(name, () : WinDetails => {\n            return { win, name };\n        });\n    });\n\n    if (details.win && details.win !== win) {\n        throw new Error(`Different window already linked for window: ${ name || 'undefined' }`);\n    }\n\n    if (name) {\n        details.name = name;\n        popupWindowsByName.set(name, details);\n    }\n\n    if (domain) {\n        details.domain = domain;\n        registerRemoteWindow(win);\n    }\n\n    popupWindowsByWin.set(win, details);\n    \n    return details;\n}\n\nexport function linkUrl(win : CrossDomainWindowType, url : string) {\n    linkWindow({ win, domain: getDomainFromUrl(url) });\n}\n\nexport function listenForWindowOpen() {\n    const windowOpen = window.open;\n\n    window.open = function windowOpenWrapper(url : string, name : string, options : string, last : mixed) : mixed {\n        const win = windowOpen.call(this, normalizeMockUrl(url), name, options, last);\n    \n        if (!win) {\n            return win;\n        }\n    \n        linkWindow({ win, name, domain: url ? getDomainFromUrl(url) : null });\n    \n        return win;\n    };\n}\n\nexport function destroyBridges() {\n    const bridges = globalStore('bridges');\n    const bridgeFrames = globalStore('bridgeFrames');\n\n    for (const domain of bridgeFrames.keys()) {\n        const frame = bridgeFrames.get(domain);\n        if (frame && frame.parentNode) {\n            frame.parentNode.removeChild(frame);\n        }\n    }\n    bridgeFrames.reset();\n    bridges.reset();\n}\n","/* @flow */\n\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { listenForWindowOpen, listenForOpenTunnel } from './parent';\nimport { setupOpenTunnelToParent } from './bridge';\nimport { openTunnelToOpener } from './child';\n\nexport function setupBridge({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) {\n    listenForWindowOpen();\n    listenForOpenTunnel({ on, send, receiveMessage });\n    setupOpenTunnelToParent({ on, send });\n    openTunnelToOpener({ on, send, receiveMessage });\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { getParent, isWindowClosed, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { getGlobal, globalStore } from '../global';\nimport type { SendType, ResponseMessageEvent } from '../types';\n\nfunction cleanTunnelWindows() {\n    const tunnelWindows = globalStore('tunnelWindows');\n\n    for (const key of tunnelWindows.keys()) {\n        const tunnelWindow = tunnelWindows[key];\n\n        try {\n            noop(tunnelWindow.source);\n        } catch (err) {\n            tunnelWindows.del(key);\n            continue;\n        }\n\n        if (isWindowClosed(tunnelWindow.source)) {\n            tunnelWindows.del(key);\n        }\n    }\n}\n\ntype TunnelWindowDataType = {|\n    name : string,\n    source : CrossDomainWindowType,\n    canary : () => void,\n    sendMessage : (message : string) => void\n|};\n\nfunction addTunnelWindow({ name, source, canary, sendMessage } : TunnelWindowDataType) : string {\n    cleanTunnelWindows();\n    const id = uniqueID();\n    const tunnelWindows = globalStore('tunnelWindows');\n    tunnelWindows.set(id, { name, source, canary, sendMessage });\n    return id;\n}\n\nexport function setupOpenTunnelToParent({ send } : { send : SendType }) {\n    getGlobal(window).openTunnelToParent = function openTunnelToParent({ name, source, canary, sendMessage } : TunnelWindowDataType) : ZalgoPromise<ResponseMessageEvent> {\n\n        const tunnelWindows = globalStore('tunnelWindows');\n        const parentWindow = getParent(window);\n    \n        if (!parentWindow) {\n            throw new Error(`No parent window found to open tunnel to`);\n        }\n    \n        const id = addTunnelWindow({ name, source, canary, sendMessage });\n    \n        return send(parentWindow, MESSAGE_NAME.OPEN_TUNNEL, {\n    \n            name,\n    \n            sendMessage() {\n    \n                const tunnelWindow = tunnelWindows.get(id);\n    \n                try {\n                    // IE gets antsy if you try to even reference a closed window\n                    noop(tunnelWindow && tunnelWindow.source);\n                } catch (err) {\n                    tunnelWindows.del(id);\n                    return;\n                }\n    \n                if (!tunnelWindow || !tunnelWindow.source || isWindowClosed(tunnelWindow.source)) {\n                    return;\n                }\n    \n                try {\n                    tunnelWindow.canary();\n                } catch (err) {\n                    return;\n                }\n    \n                tunnelWindow.sendMessage.apply(this, arguments);\n            }\n    \n        }, { domain: WILDCARD });\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isSameDomain, getOpener, getDomain, getFrameByName, assertSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { getGlobal, windowStore } from '../global';\nimport type { OnType, SendType, ReceiveMessageType } from '../types';\n\nimport { needsBridge, registerRemoteWindow, rejectRemoteSendMessage, registerRemoteSendMessage, getBridgeName } from './common';\n\nfunction awaitRemoteBridgeForWindow (win : CrossDomainWindowType) : ZalgoPromise<?CrossDomainWindowType> {\n    return windowStore('remoteBridgeAwaiters').getOrSet(win, () => {\n        return ZalgoPromise.try(() => {\n            const frame = getFrameByName(win, getBridgeName(getDomain()));\n\n            if (!frame) {\n                return;\n            }\n\n            if (isSameDomain(frame) && getGlobal(assertSameDomain(frame))) {\n                return frame;\n            }\n\n            return new ZalgoPromise(resolve => {\n\n                let interval;\n                let timeout; // eslint-disable-line prefer-const\n\n                interval = setInterval(() => { // eslint-disable-line prefer-const\n                    if (frame && isSameDomain(frame) && getGlobal(assertSameDomain(frame))) {\n                        clearInterval(interval);\n                        clearTimeout(timeout);\n                        return resolve(frame);\n                    }\n                }, 100);\n\n                timeout = setTimeout(() => {\n                    clearInterval(interval);\n                    return resolve();\n                }, 2000);\n            });\n        });\n    });\n}\n\nexport function openTunnelToOpener({ on, send, receiveMessage } : { on : OnType, send : SendType, receiveMessage : ReceiveMessageType }) : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        const opener = getOpener(window);\n        \n        if (!opener || !needsBridge({ win: opener })) {\n            return;\n        }\n\n        registerRemoteWindow(opener);\n\n        return awaitRemoteBridgeForWindow(opener).then(bridge => {\n\n            if (!bridge) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: no bridge found in opener`));\n            }\n\n            if (!window.name) {\n                return rejectRemoteSendMessage(opener, new Error(`Can not register with opener: window does not have a name`));\n            }\n\n            return getGlobal(assertSameDomain(bridge)).openTunnelToParent({\n\n                name: window.name,\n\n                source: window,\n\n                canary() {\n                    // pass\n                },\n\n                sendMessage(message) {\n\n                    try {\n                        noop(window);\n                    } catch (err) {\n                        return;\n                    }\n\n                    if (!window || window.closed) {\n                        return;\n                    }\n\n                    try {\n                        receiveMessage({\n                            data:   message,\n                            origin: this.origin,\n                            source: this.source\n                        }, { on, send });\n                    } catch (err) {\n                        ZalgoPromise.reject(err);\n                    }\n                }\n\n            }).then(({ source, origin, data }) => {\n\n                if (source !== opener) {\n                    throw new Error(`Source does not match opener`);\n                }\n\n                registerRemoteSendMessage(source, origin, data.sendMessage);\n\n            }).catch(err => {\n\n                rejectRemoteSendMessage(opener, err);\n                throw err;\n            });\n        });\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedWindowType = {|\n    id : string,\n    getType : () => ZalgoPromise<$Values<typeof WINDOW_TYPE>>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(winPromise : ZalgoPromise<CrossDomainWindowType>, { send, id = uniqueID() } : { send : SendType, id? : string }) : SerializedWindowType {\n    let windowName;\n    \n    return {\n        id,\n        getType: () => winPromise.then(win => {\n            return getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME;\n        }),\n        getInstanceID: memoizePromise(() => winPromise.then(win => getWindowInstanceID(win, { send }))),\n        close:         () => winPromise.then(closeWindow),\n        getName:       () => winPromise.then(win => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            return windowName;\n        }),\n        focus:   () => winPromise.then(win => {\n            win.focus();\n        }),\n        isClosed: () => winPromise.then(win => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => winPromise.then(win => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => winPromise.then(win => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            const sameDomainWin = assertSameDomain(win);\n\n            sameDomainWin.name = name;\n\n            if (sameDomainWin.frameElement) {\n                sameDomainWin.frameElement.setAttribute('name', name);\n            }\n\n            windowName = name;\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    id : string\n    isProxyWindow : true = true\n    serializedWindow : SerializedWindowType\n    actualWindow : ?CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor({ send, win, serializedWindow } : { win? : CrossDomainWindowType, serializedWindow? : SerializedWindowType, send : SendType }) {\n        this.actualWindowPromise = new ZalgoPromise();\n        this.serializedWindow = serializedWindow || getSerializedWindow(this.actualWindowPromise, { send });\n        globalStore('idToProxyWindow').set(this.getID(), this);\n        if (win) {\n            this.setWindow(win, { send });\n        }\n    }\n\n    getID() : string {\n        return this.serializedWindow.id;\n    }\n\n    getType() : ZalgoPromise<$Values<typeof WINDOW_TYPE>> {\n        return this.serializedWindow.getType();\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    getName() : ZalgoPromise<?string> {\n        return this.serializedWindow.getName();\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.all([\n            this.isPopup() && this.getName().then(name => {\n                if (name) {\n                    window.open('', name);\n                }\n            }),\n            this.serializedWindow.focus()\n        ]).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType, { send } : { send : SendType }) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(this.actualWindow);\n        this.serializedWindow = getSerializedWindow(this.actualWindowPromise, { send, id: this.getID() });\n        windowStore('winToProxyWindow').set(win, this);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win, { send });\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    shouldClean() : boolean {\n        return Boolean(this.actualWindow && isWindowClosed(this.actualWindow));\n    }\n\n    serialize() : SerializedWindowType {\n        return this.serializedWindow;\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedWindowType {\n        cleanupProxyWindows();\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        return globalStore('idToProxyWindow').get(serializedWindow.id) || new ProxyWindow({ serializedWindow, send });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const actualWindow : CrossDomainWindowType = win;\n        \n        return windowStore('winToProxyWindow').get(actualWindow) || new ProxyWindow({ win: actualWindow, send });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedWindowType>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source, { send }).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }()\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedFunction {\n    listenForFunctionCalls({ on, send });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    let name = val.__name__ || val.name || key;\n\n    if (name.indexOf('anonymous::') === 0) {\n        name = name.replace('anonymous::', `${ key }::`);\n    }\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                const windowDomain = getDomain(win);\n                \n                if (windowDomain !== dom) {\n                    throw new Error(`Mock domain target ${ dom } does not match window domain ${ windowDomain }`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            throw new Error(`Bridge not needed for browser`);\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            throw new Error(`Global messaging not needed for browser`);\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map((err, i) => `${ i }. ${ stringifyError(err) }`).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                delete nameListeners[name];\n            }\n\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, stringifyError } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            try {\n                // $FlowFixMe\n                sendMessage(source, origin, {\n                    type,\n                    ack,\n                    hash:   message.hash,\n                    name:   message.name,\n                    ...response\n                }, { on, send });\n            } catch (err) {\n                throw new Error(`Send response message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n            }\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        try {\n            if (!matchDomain(options.domain, origin)) {\n                throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n            }\n    \n            if (source !== options.win) {\n                throw new Error(`Ack source does not match registered window`);\n            }\n        } catch (err) {\n            options.promise.reject(err);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify, stringifyError } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, targetDomain : DomainMatcher, actualDomain : ?string, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    if (typeof targetDomain === 'string') {\n        return ZalgoPromise.resolve(targetDomain);\n    }\n    \n    return ZalgoPromise.try(() => {\n        return actualDomain || sayHello(win, { send }).then(({ domain }) => domain);\n\n    }).then(normalizedDomain => {\n        if (!matchDomain(targetDomain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(targetDomain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        }\n        \n    }).then(({ domain: actualDomain } = {}) => {\n\n        return normalizeDomain(win, domain, actualDomain, { send });\n    }).then(targetDomain => {\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        try {\n            sendMessage(win, domain, {\n                type: MESSAGE_TYPE.REQUEST,\n                hash,\n                name,\n                data,\n                fireAndForget\n            }, { on, send });\n        } catch (err) {\n            throw new Error(`Send request message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n        }\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, destroy, serializeMessage, deserializeMessage, createProxyWindow, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function createProxyWindow(win? : CrossDomainWindowType) : ProxyWindow {\n    return new ProxyWindow({ send, win });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport { isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nexport function getGlobal(win? : CrossDomainWindowType = window) : Object {\n\n    if (!isSameDomain(win)) {\n        throw new Error(`Can not get global for window on different domain`);\n    }\n\n    if (!win[__ZOID__.__GLOBAL_KEY__]) {\n        win[__ZOID__.__GLOBAL_KEY__] = {};\n    }\n\n    return win[__ZOID__.__GLOBAL_KEY__];\n}\n\nexport function destroyGlobal() {\n    delete window[__ZOID__.__GLOBAL_KEY__];\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nexport type ProxyObject<T> = {|\n    get : () => ZalgoPromise<T>\n|};\n\nexport function getProxyObject<T>(obj : T) : ProxyObject<T> {\n    return {\n        get() : ZalgoPromise<T> {\n            return ZalgoPromise.try(() => {\n                if (this.source && this.source !== window) {\n                    throw new Error(`Can not call get on proxy object from a remote window`);\n                }\n    \n                return obj;\n            });\n        }\n    };\n}\n","/* @flow */\n\nimport { WINDOW_TYPE } from 'cross-domain-utils/src';\n\nexport const ZOID = `zoid`;\n\nexport const POST_MESSAGE = {\n    DELEGATE:       `${ ZOID }_delegate`,\n    ALLOW_DELEGATE: `${ ZOID }_allow_delegate`\n};\n\nexport const PROP_TYPE = {\n    STRING:   `string`,\n    OBJECT:   `object`,\n    FUNCTION: `function`,\n    BOOLEAN:  `boolean`,\n    NUMBER:   `number`,\n    ARRAY:    `array`\n};\n\nexport const INITIAL_PROPS = {\n    RAW: 'raw',\n    UID: 'uid'\n};\n\nexport const WINDOW_REFERENCES = {\n    OPENER: ('opener' : 'opener'),\n    PARENT: ('parent' : 'parent'),\n    GLOBAL: ('global' : 'global')\n};\n\nexport const PROP_SERIALIZATION = {\n    JSON:   ('json' : 'json'),\n    DOTIFY: ('dotify' : 'dotify'),\n    BASE64: ('base64' : 'base64')\n};\n\nexport const CONTEXT = WINDOW_TYPE;\n\nexport const WILDCARD = '*';\n\nexport const DEFAULT_DIMENSIONS = {\n    WIDTH:  '300px',\n    HEIGHT: '150px'\n};\n\nexport const EVENT = {\n    RENDER:   'zoid-render',\n    RENDERED: 'zoid-rendered',\n    DISPLAY:  'zoid-display',\n    ERROR:    'zoid-error',\n    CLOSE:    'zoid-close',\n    PROPS:    'zoid-props',\n    RESIZE:   'zoid-resize',\n    FOCUS:    'zoid-focus'\n};\n","/* @flow */\n\nimport { getDomain, isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport type { Component } from '../component';\nimport type { PropsType, MixedPropDefinitionType } from '../component/props';\n\nimport type { ChildHelpers } from './index';\n\nexport function normalizeChildProp<T, P>(component : Component<P>, props : (PropsType<P>), key : string, value : T, helpers : ChildHelpers<P>) : ?T  {\n\n    // $FlowFixMe\n    const prop : MixedPropDefinitionType<P> = component.getPropDefinition(key);\n\n    if (!prop) {\n        return value;\n    }\n\n    if (typeof prop.childDecorate === 'function') {\n        const { close, focus, onError, onProps, resize, getParent, getParentDomain, show, hide } = helpers;\n        return prop.childDecorate({ value, close, focus, onError, onProps, resize, getParent, getParentDomain, show, hide });\n    }\n\n    return value;\n}\n\n// eslint-disable-next-line max-params\nexport function normalizeChildProps<P>(parentComponentWindow : CrossDomainWindowType, component : Component<P>, props : (PropsType<P>), origin : string, helpers : ChildHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) {\n\n    const result = {};\n\n    for (const key of Object.keys(props)) {\n        const prop = component.getPropDefinition(key);\n\n        if (prop && prop.sameDomain && (origin !== getDomain(window) || !isSameDomain(parentComponentWindow))) {\n            continue;\n        }\n\n        // $FlowFixMe\n        const value = normalizeChildProp(component, props, key, props[key], helpers);\n\n        result[key] = value;\n        if (prop && prop.alias && !result[prop.alias]) {\n            result[prop.alias] = value;\n        }\n    }\n\n    if (!isUpdate) {\n        for (const key of component.getPropNames()) {\n            if (!props.hasOwnProperty(key)) {\n                result[key] = normalizeChildProp(component, props, key, props[key], helpers);\n            }\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n","/* @flow */\n\nimport { inlineMemoize, stringifyError, base64decode } from 'belter/src';\n\nimport { ZOID } from '../constants';\nimport type { ChildPayload } from '../parent';\n\nfunction parseChildWindowName(windowName : string) : ChildPayload {\n    return inlineMemoize(parseChildWindowName, () => {\n        if (!windowName) {\n            throw new Error(`No window name`);\n        }\n    \n        const [ , zoidcomp, name, encodedPayload ] = windowName.split('__');\n    \n        if (zoidcomp !== ZOID) {\n            throw new Error(`Window not rendered by zoid - got ${ zoidcomp }`);\n        }\n    \n        if (!name) {\n            throw new Error(`Expected component name`);\n        }\n    \n        if (!encodedPayload) {\n            throw new Error(`Expected encoded payload`);\n        }\n    \n        try {\n            return JSON.parse(base64decode(encodedPayload));\n        } catch (err) {\n            throw new Error(`Can not decode window name payload: ${ encodedPayload }: ${ stringifyError(err) }`);\n        }\n    }, [ windowName ]);\n}\n\nexport function getChildPayload() : ?ChildPayload {\n    try {\n        return parseChildWindowName(window.name);\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isSameDomain, matchDomain, getDomain, getOpener,\n    getNthParentFromTop, getAncestor, getAllFramesInWindow,\n    type CrossDomainWindowType, onCloseWindow } from 'cross-domain-utils/src';\nimport { markWindowKnown, deserializeMessage, type CrossDomainFunctionType } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { extend, waitForDocumentBody, onResize, getElementSafe, assertExists } from 'belter/src';\n\nimport { getGlobal } from '../lib';\nimport { CONTEXT, INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component } from '../component';\nimport type { PropsType } from '../component/props';\nimport type { WindowRef, PropRef, ParentExportsType } from '../parent';\n\nimport { normalizeChildProps } from './props';\nimport { getChildPayload } from './window';\n\nexport * from './window';\n\nexport type ChildExportsType<P> = {|\n    updateProps : CrossDomainFunctionType<[ PropsType<P> ], void>,\n    close : CrossDomainFunctionType<[], void>\n|};\n\nexport type ChildHelpers<P> = {|\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    onProps : ((PropsType<P>) => void) => void,\n    getParent : () => CrossDomainWindowType,\n    getParentDomain : () => string,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\n/*  Child Component\n    ---------------\n\n    This is the portion of code which runs inside the frame or popup window containing the component's implementation.\n\n    When the component author calls myComponent.attach(), it creates a new instance of ChildComponent, which is then\n    responsible for managing the state and messaging back up to the parent, and providing props for the component to\n    utilize.\n*/\n\nexport class ChildComponent<P> {\n\n    component : Component<P>\n    props : PropsType<P>\n    context : string\n    parent : ParentExportsType<P>\n    parentDomain : string\n    parentComponentWindow : CrossDomainWindowType\n\n    onPropHandlers : Array<(PropsType<P>) => void> // eslint-disable-line flowtype/no-mutable-array\n    autoResize : { width : boolean, height : boolean, element? : string }\n\n    constructor(component : Component<P>) {\n        ZalgoPromise.try(() => {\n            this.component = component;\n            this.onPropHandlers = [];\n            \n            const childPayload = getChildPayload();\n\n            if (!childPayload) {\n                throw new Error(`No child payload found`);\n            }\n\n            if (childPayload.version !== __ZOID__.__VERSION__) {\n                throw new Error(`Parent window has zoid version ${ childPayload.version }, child window has version ${ __ZOID__.__VERSION__ }`);\n            }\n\n            const { parent, parentDomain, exports, context, props } = childPayload;\n\n            this.context = context;\n            this.parentComponentWindow = this.getParentComponentWindow(parent);\n            this.parentDomain = parentDomain;\n            this.parent = deserializeMessage(this.parentComponentWindow, parentDomain, exports);\n\n            this.checkParentDomain(parentDomain);\n\n            const initialProps = this.getPropsByRef(this.parentComponentWindow, parentDomain, props);\n            this.setProps(initialProps, parentDomain);\n            markWindowKnown(this.parentComponentWindow);\n            \n            this.watchForClose();\n\n            return this.parent.init(this.buildExports());\n\n        }).then(() => {\n            return this.watchForResize();\n\n        }).catch(err => {\n            this.onError(err);\n        });\n    }\n\n    getHelpers() : ChildHelpers<P> {\n        return {\n            focus:           () => this.focus(),\n            close:           () => this.close(),\n            resize:          ({ width, height }) => this.resize({ width, height }),\n            onError:         (err) => this.onError(err),\n            onProps:         (handler) => this.onProps(handler),\n            getParent:       () => this.parentComponentWindow,\n            getParentDomain: () => this.parentDomain,\n            show:            () => this.show(),\n            hide:            () => this.hide()\n        };\n    }\n\n    show() : ZalgoPromise<void> {\n        return this.parent.show();\n    }\n\n    hide() : ZalgoPromise<void> {\n        return this.parent.hide();\n    }\n\n    checkParentDomain(domain : string) {\n        if (!matchDomain(this.component.allowedParentDomains, domain)) {\n            throw new Error(`Can not be rendered by domain: ${ domain }`);\n        }\n    }\n\n    onProps(handler : Function) {\n        this.onPropHandlers.push(handler);\n    }\n\n    getPropsByRef(parentComponentWindow : CrossDomainWindowType, domain : string, { type, value, uid } : PropRef) : (PropsType<P>) {\n        let props;\n\n        if (type === INITIAL_PROPS.RAW) {\n            props = value;\n        } else if (type === INITIAL_PROPS.UID) {\n            if (!isSameDomain(parentComponentWindow)) {\n                throw new Error(`Parent component window is on a different domain - expected ${ getDomain() } - can not retrieve props`);\n            }\n\n            const global = getGlobal(parentComponentWindow);\n            props = assertExists('props', global && global.props[uid]);\n        }\n\n        if (!props) {\n            throw new Error(`Could not find props`);\n        }\n\n        return deserializeMessage(parentComponentWindow, domain, props);\n    }\n\n    getParentComponentWindow(ref : WindowRef) : CrossDomainWindowType {\n        const { type } = ref;\n    \n        if (type === WINDOW_REFERENCES.OPENER) {\n            return assertExists('opener', getOpener(window));\n    \n        } else if (type === WINDOW_REFERENCES.PARENT && typeof ref.distance === 'number') {\n            return assertExists('parent', getNthParentFromTop(window, ref.distance));\n\n        } else if (type === WINDOW_REFERENCES.GLOBAL && ref.uid && typeof ref.uid === 'string') {\n            const { uid } = ref;\n            const ancestor = getAncestor(window);\n\n            if (!ancestor) {\n                throw new Error(`Can not find ancestor window`);\n            }\n\n            for (const frame of getAllFramesInWindow(ancestor)) {\n                if (isSameDomain(frame)) {\n                    const global = getGlobal(frame);\n\n                    if (global && global.windows && global.windows[uid]) {\n                        return global.windows[uid];\n                    }\n                }\n            }\n        }\n    \n        throw new Error(`Unable to find ${ type } parent component window`);\n    }\n\n    getProps() : PropsType<P> {\n        // $FlowFixMe\n        this.props = this.props || {};\n        return this.props;\n    }\n\n    setProps(props : PropsType<P>, origin : string, isUpdate : boolean = false) {\n        const helpers = this.getHelpers();\n        const existingProps = this.getProps();\n        const normalizedProps = normalizeChildProps(this.parentComponentWindow, this.component, props, origin, helpers, isUpdate);\n\n        extend(existingProps, normalizedProps);\n\n        for (const handler of this.onPropHandlers) {\n            handler.call(this, existingProps);\n        }\n    }\n\n    watchForClose() {\n        window.addEventListener('beforeunload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        window.addEventListener('unload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        onCloseWindow(this.parentComponentWindow, () => {\n            this.destroy();\n        });\n    }\n\n    getAutoResize() : { width : boolean, height : boolean, element : ?HTMLElement } {\n        let { width = false, height = false, element = 'body' } = this.autoResize || this.component.autoResize || {};\n        element = getElementSafe(element);\n        return { width, height, element };\n    }\n\n    watchForResize() : ?ZalgoPromise<void> {\n        return waitForDocumentBody().then(() => {\n            const { width, height, element } = this.getAutoResize();\n\n            if (!element || (!width && !height) || this.context === CONTEXT.POPUP) {\n                return;\n            }\n\n            onResize(element, ({ width: newWidth, height: newHeight }) => {\n                this.resize({\n                    width:  width ? newWidth : undefined,\n                    height: height ? newHeight : undefined\n                });\n            }, { width, height });\n        });\n    }\n\n    buildExports() : ChildExportsType<P> {\n\n        const self = this;\n\n        return {\n            updateProps(props : (PropsType<P>)) : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.setProps(props, this.__origin__, true));\n            },\n\n            close() : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.destroy());\n            }\n        };\n    }\n\n    resize({ width, height } : { width : ?number, height : ?number }) : ZalgoPromise<void> {\n        return this.parent.resize.fireAndForget({ width, height });\n    }\n\n    close() : ZalgoPromise<void> {\n        return this.parent.close();\n    }\n    \n    destroy() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.close();\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.focus();\n        });\n    }\n\n    onError(err : mixed) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.parent && this.parent.onError) {\n                return this.parent.onError(err);\n            } else {\n                throw err;\n            }\n        });\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { cleanUpWindow, ProxyWindow, toProxyWindow } from 'post-robot/src';\nimport { assertSameDomain, closeWindow } from 'cross-domain-utils/src';\nimport { iframe, popup, destroyElement, normalizeDimension, watchElementForClose,\n    awaitFrameWindow, uniqueID } from 'belter/src';\n\nimport { CONTEXT } from '../constants';\nimport { getProxyObject, type ProxyObject } from '../lib';\n\n\nexport type ContextDriverType = {|\n    openOnClick : boolean,\n    openFrame? : () => ProxyObject<HTMLIFrameElement>,\n    open : (?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    openPrerenderFrame? : () => ProxyObject<HTMLIFrameElement>,\n    openPrerender : (ProxyWindow, ?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    resize? : ({ width : ?number, height : ?number }) => void,\n    delegate : $ReadOnlyArray<string>\n|};\n\nexport const RENDER_DRIVERS : { [string] : ContextDriverType } = {};\n\nRENDER_DRIVERS[CONTEXT.IFRAME] = {\n    openOnClick: false,\n\n    openFrame() : ProxyObject<HTMLIFrameElement> {\n        return getProxyObject(iframe({\n            attributes: {\n                title: this.component.name,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    open(proxyFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n\n        return proxyFrame.get().then(frame => {\n            return awaitFrameWindow(frame).then(win => {\n\n                const frameWatcher = watchElementForClose(frame, () => this.close());\n                this.clean.register(() => frameWatcher.cancel());\n                this.clean.register(() => destroyElement(frame));\n                this.clean.register(() => cleanUpWindow(win));\n\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    openPrerenderFrame() : ProxyObject<HTMLIFrameElement> {\n        return getProxyObject(iframe({\n            attributes: {\n                name:  `__zoid_prerender_frame__${ this.component.name }_${ uniqueID() }__`,\n                title: `prerender__${ this.component.name }`,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyPrerenderFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n        \n        return proxyPrerenderFrame.get().then(prerenderFrame => {\n            this.clean.register(() => destroyElement(prerenderFrame));\n\n            return awaitFrameWindow(prerenderFrame).then(prerenderFrameWindow => {\n                return assertSameDomain(prerenderFrameWindow);\n            }).then(win => {\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    delegate: [\n        'getProxyContainer',\n        'renderContainer',\n        'openFrame',\n        'openPrerenderFrame',\n        'prerender',\n        'open',\n        'openPrerender',\n        'show',\n        'hide'\n    ]\n};\n\nif (__ZOID__.__POPUP_SUPPORT__) {\n    RENDER_DRIVERS[CONTEXT.POPUP] = {\n        openOnClick: true,\n\n        open() : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                let { width, height } = this.component.dimensions;\n\n                width = normalizeDimension(width, window.outerWidth);\n                height = normalizeDimension(height, window.outerWidth);\n\n                const win = popup('', {\n                    width,\n                    height,\n                    ...this.component.attributes.popup\n                });\n\n                this.clean.register(() => {\n                    closeWindow(win);\n                    cleanUpWindow(win);\n                });\n\n                return toProxyWindow(win);\n            });\n        },\n\n        openPrerender(proxyWin : ProxyWindow) : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                return proxyWin;\n            });\n        },\n\n        delegate: [\n            'getProxyContainer',\n            'renderContainer',\n            'setProxyWin',\n            'show',\n            'hide'\n        ]\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { dotify, isDefined, extend } from 'belter/src';\n\nimport type { Component } from '../component';\nimport type { BuiltInPropsDefinitionType, PropsInputType, PropsType, MixedPropDefinitionType } from '../component/props';\nimport { PROP_SERIALIZATION } from '../constants';\n\nimport type { ParentHelpers } from './index';\n\n/*  Normalize Props\n    ---------------\n\n    Turn props into normalized values, using defaults, function options, etc.\n*/\n\nexport function extendProps<P>(component : Component<P>, props : PropsType<P>, inputProps : PropsInputType<P>, helpers : ParentHelpers<P>, isUpdate : boolean = false) { // eslint-disable-line complexity\n\n    // $FlowFixMe\n    inputProps = inputProps || {};\n    extend(props, inputProps);\n\n    const propNames = isUpdate ? [] : [ ...component.getPropNames() ];\n\n    for (const key of Object.keys(inputProps)) {\n        if (propNames.indexOf(key) === -1) {\n            propNames.push(key);\n        }\n    }\n\n    const aliases = [];\n\n    const { state, close, focus, event, onError } = helpers;\n\n    for (const key of propNames) {\n        const propDef = component.getPropDefinition(key);\n        let value = inputProps[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        const alias = propDef.alias;\n        if (alias) {\n            if (!isDefined(value) && isDefined(inputProps[alias])) {\n                value = inputProps[alias];\n            }\n            aliases.push(alias);\n        }\n\n        if (propDef.value) {\n            value = propDef.value({ props, state, close, focus, event, onError });\n        }\n\n        if (!isDefined(value) && propDef.default) {\n            value = propDef.default({ props, state, close, focus, event, onError });\n        }\n\n        if (isDefined(value)) {\n            if (propDef.type === 'array' ? !Array.isArray(value) : (typeof value !== propDef.type)) {\n                throw new TypeError(`Prop is not of type ${ propDef.type }: ${ key }`);\n            }\n        }\n        \n        // $FlowFixMe\n        props[key] = value;\n    }\n\n    for (const alias of aliases) {\n        delete props[alias];\n    }\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        const propDef = component.getPropDefinition(key);\n        const value = props[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        if (isDefined(value) && propDef.validate) {\n            // $FlowFixMe\n            propDef.validate({ value, props });\n        }\n\n        if (isDefined(value) && propDef.decorate) {\n            props[key] = propDef.decorate({ value, props, state, close, focus, event, onError });\n        }\n    }\n\n    for (const key of component.getPropNames()) {\n        const propDef = component.getPropDefinition(key);\n        if (propDef.required !== false && !isDefined(props[key])) {\n            throw new Error(`Expected prop \"${ key }\" to be defined`);\n        }\n    }\n}\n\n// $FlowFixMe\nfunction getQueryParam<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryParam === 'function') {\n            return prop.queryParam({ value });\n        } else if (typeof prop.queryParam === 'string') {\n            return prop.queryParam;\n        } else {\n            return key;\n        }\n    });\n}\n\n// $FlowFixMe\nfunction getQueryValue<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<mixed> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryValue === 'function' && isDefined(value)) {\n            return prop.queryValue({ value });\n        } else {\n            return value;\n        }\n    });\n}\n\nexport function propsToQuery<P>(propsDef : BuiltInPropsDefinitionType<P>, props : (PropsType<P>)) : ZalgoPromise<{ [string] : string }> {\n\n    const params = {};\n\n    // $FlowFixMe\n    const keys = Object.keys(props);\n    \n    return ZalgoPromise.all(keys.map(key => {\n\n        const prop = propsDef[key];\n\n        if (!prop) {\n            return; // eslint-disable-line array-callback-return\n        }\n\n        return ZalgoPromise.resolve().then(() => {\n\n            const value = props[key];\n\n            if (!value) {\n                return;\n            }\n\n            if (!prop.queryParam) {\n                return;\n            }\n\n            return value;\n\n        }).then(value => {\n\n            if (value === null || typeof value === 'undefined') {\n                return;\n            }\n\n            return ZalgoPromise.all([\n                getQueryParam(prop, key, value),\n                getQueryValue(prop, key, value)\n            ]).then(([ queryParam, queryValue ]) => {\n\n                let result;\n\n                if (typeof queryValue === 'boolean') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'string') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'object' && queryValue !== null) {\n\n                    if (prop.serialization === PROP_SERIALIZATION.JSON) {\n                        result = JSON.stringify(queryValue);\n                    } else if (prop.serialization === PROP_SERIALIZATION.BASE64) {\n                        result = btoa(JSON.stringify(queryValue));\n                    } else if (prop.serialization === PROP_SERIALIZATION.DOTIFY || !prop.serialization) {\n                        result = dotify(queryValue, key);\n\n                        for (const dotkey of Object.keys(result)) {\n                            params[dotkey] = result[dotkey];\n                        }\n\n                        return;\n                    }\n\n                } else if (typeof queryValue === 'number') {\n                    result = queryValue.toString();\n                }\n\n                params[queryParam] = result;\n            });\n        });\n\n    })).then(() => {\n        return params;\n    });\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { send, bridge, serializeMessage, ProxyWindow, toProxyWindow, type CrossDomainFunctionType } from 'post-robot/src';\nimport { isSameDomain, matchDomain, getDomainFromUrl, isBlankDomain,\n    getDomain, type CrossDomainWindowType,\n    getDistanceFromTop, normalizeMockUrl, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { addEventListener, uniqueID, elementReady, writeElementToWindow, eventEmitter, type EventEmitterType,\n    noop, onResize, extendUrl, appendChild, cleanup, type CleanupType, base64encode,\n    once, stringifyError, destroyElement, getElementSafe, showElement, hideElement } from 'belter/src';\n\nimport { ZOID, POST_MESSAGE, CONTEXT, EVENT,\n    INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component, onErrorPropType } from '../component';\nimport { getGlobal, getProxyObject, type ProxyObject } from '../lib';\nimport type { PropsInputType, PropsType } from '../component/props';\nimport type { ChildExportsType } from '../child';\nimport type { DimensionsType } from '../types';\n\nimport { RENDER_DRIVERS, type ContextDriverType } from './drivers';\nimport { propsToQuery, extendProps } from './props';\n\nexport type RenderOptionsType<P> = {|\n    uid : string,\n    props : PropsInputType<P>,\n    tag : string,\n    context : string,\n    close : (?string) => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<ProxyWindow>,\n    doc : Document,\n    container? : HTMLElement,\n    dimensions : DimensionsType,\n    state : Object,\n    event : EventEmitterType,\n    frame : ?HTMLIFrameElement,\n    prerenderFrame : ?HTMLIFrameElement\n|};\n\nexport type ParentExportsType<P> = {|\n    init : (ChildExportsType<P>) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>,\n    checkClose : CrossDomainFunctionType<[], void>,\n    resize : CrossDomainFunctionType<[{ width? : ?number, height? : ?number }], void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\nexport type PropRef =\n    {| type : typeof INITIAL_PROPS.RAW, uid? : string, value? : string |};\n\nexport type WindowRef =\n    {| type : typeof WINDOW_REFERENCES.OPENER |} |\n    {| type : typeof WINDOW_REFERENCES.PARENT, distance : number |} |\n    {| type : typeof WINDOW_REFERENCES.GLOBAL, uid : string |};\n\nexport type ChildPayload = {|\n    uid : string,\n    tag : string,\n    version : string,\n    context : $Values<typeof CONTEXT>,\n    parentDomain : string,\n    childDomain : string,\n    parent : WindowRef,\n    props : PropRef,\n    exports : string\n|};\n\nexport type StateType = Object;\n\nexport type ParentHelpers<P> = {|\n    state : StateType,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    updateProps : PropsInputType<P> => ZalgoPromise<void>,\n    event : EventEmitterType,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\nexport class ParentComponent<P> {\n\n    component : Component<P>\n    driver : ContextDriverType\n    clean : CleanupType\n    event : EventEmitterType\n\n    initPromise : ZalgoPromise<void>\n    handledErrors : Array<mixed> // eslint-disable-line flowtype/no-mutable-array\n    \n    props : PropsType<P>\n    state : StateType\n    child : ?ChildExportsType<P>\n\n    proxyContainer : ?ProxyObject<HTMLElement>\n    proxyWin : ?ProxyWindow\n\n    visible : boolean = true\n\n    constructor(component : Component<P>, props : PropsInputType<P>) {\n        this.initPromise = new ZalgoPromise();\n        this.handledErrors = [];\n\n        // $FlowFixMe\n        this.props = {};\n\n        this.clean = cleanup(this);\n        this.state = {};\n\n        this.component = component;\n\n        this.setupEvents(props.onError);\n        this.setProps(props);\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n        this.watchForUnload();\n    }\n\n    setupEvents(onError : ?onErrorPropType) {\n        this.event = eventEmitter();\n        \n        this.event.on(EVENT.RENDER,   () => this.props.onRender());\n        this.event.on(EVENT.DISPLAY,  () => this.props.onDisplay());\n        this.event.on(EVENT.RENDERED, () => this.props.onRendered());\n        this.event.on(EVENT.CLOSE,    () => this.props.onClose());\n        this.event.on(EVENT.RESIZE,   () => this.props.onResize());\n        this.event.on(EVENT.FOCUS,    () => this.props.onFocus());\n        this.event.on(EVENT.PROPS,    (props) => this.props.onProps(props));\n\n        this.event.on(EVENT.ERROR, err => {\n            if (this.props && this.props.onError) {\n                return this.props.onError(err);\n            } else if (onError) {\n                return onError(err);\n            } else {\n                return this.initPromise.reject(err).then(() => {\n                    setTimeout(() => {\n                        throw err;\n                    }, 1);\n                });\n            }\n        });\n    }\n\n    render(target : CrossDomainWindowType, container : string | HTMLElement, context : $Values<typeof CONTEXT>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`render`);\n\n            this.driver = RENDER_DRIVERS[context];\n            const uid = `${ ZOID }-${ this.component.tag }-${ uniqueID() }`;\n            const domain = this.getDomain();\n            const childDomain = this.getChildDomain();\n            \n            this.component.checkAllowRender(target, domain, container);\n\n            if (target !== window) {\n                this.delegate(context, target);\n            }\n\n            const init = this.initPromise;\n            const buildUrl = this.buildUrl();\n            const onRender = this.event.trigger(EVENT.RENDER);\n\n            const getProxyContainer = this.getProxyContainer(container);\n\n            const openFrame = this.openFrame();\n            const openPrerenderFrame = this.openPrerenderFrame();\n\n            const renderContainer = ZalgoPromise.hash({ proxyContainer: getProxyContainer, proxyFrame: openFrame, proxyPrerenderFrame: openPrerenderFrame }).then(({ proxyContainer, proxyFrame, proxyPrerenderFrame }) => {\n                return this.renderContainer(proxyContainer, { context, uid, proxyFrame, proxyPrerenderFrame, visible: this.visible });\n            }).then(proxyContainer => {\n                this.proxyContainer = proxyContainer;\n                return proxyContainer;\n            });\n\n            const open = this.driver.openOnClick\n                ? this.open()\n                : openFrame.then(proxyFrame => this.open(proxyFrame));\n\n            const openPrerender = ZalgoPromise.hash({ proxyWin: open, proxyPrerenderFrame: openPrerenderFrame }).then(({ proxyWin, proxyPrerenderFrame }) => {\n                return this.openPrerender(proxyWin, proxyPrerenderFrame);\n            });\n\n            const setState = open.then(proxyWin => {\n                this.proxyWin = proxyWin;\n                return this.setProxyWin(proxyWin);\n            });\n            \n            const prerender = ZalgoPromise.hash({ proxyPrerenderWin: openPrerender, state: setState }).then(({ proxyPrerenderWin }) => {\n                return this.prerender(proxyPrerenderWin, { context, uid });\n            });\n\n            const buildWindowName = open.then(proxyWin => {\n                return this.buildWindowName({ proxyWin, childDomain, domain, target, context, uid });\n            });\n\n            const setWindowName =  ZalgoPromise.hash({ proxyWin: open, windowName: buildWindowName }).then(({ proxyWin, windowName }) => {\n                return proxyWin.setName(windowName);\n            });\n\n            const loadUrl = ZalgoPromise.hash({ proxyWin: open, url: buildUrl, windowName: setWindowName, prerender }).then(({ proxyWin, url }) => {\n                return proxyWin.setLocation(url);\n            });\n\n            const watchForClose = open.then(proxyWin => {\n                this.watchForClose(proxyWin);\n            });\n\n            const onDisplay = ZalgoPromise.hash({ container: renderContainer, prerender }).then(() => {\n                return this.event.trigger(EVENT.DISPLAY);\n            });\n\n            const openBridge = open.then(proxyWin => {\n                return this.openBridge(proxyWin, childDomain, context);\n            });\n\n            const runTimeout = loadUrl.then(() => {\n                return this.runTimeout();\n            });\n\n            const onRendered = init.then(() => {\n                return this.event.trigger(EVENT.RENDERED);\n            });\n\n            return ZalgoPromise.hash({\n                init, buildUrl, onRender, getProxyContainer, openFrame, openPrerenderFrame, renderContainer, open,\n                openPrerender, setState, prerender, loadUrl, buildWindowName, setWindowName, watchForClose, onDisplay,\n                openBridge, runTimeout, onRendered\n            });\n            \n        }).catch(err => {\n            return ZalgoPromise.all([\n                this.onError(err),\n                this.destroy(err)\n            ]).then(() => {\n                throw err;\n            }, () => {\n                throw err;\n            });\n        }).then(noop);\n    }\n\n    getProxyContainer(container : string | HTMLElement) : ZalgoPromise<ProxyObject<HTMLElement>> {\n        return ZalgoPromise.try(() => {\n            return elementReady(container);\n        }).then(containerElement => {\n            return getProxyObject(containerElement);\n        });\n    }\n\n    buildWindowName({ proxyWin, childDomain, domain, target, uid, context } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string }) : string {\n        const childPayload = this.buildChildPayload({ proxyWin, childDomain, domain, target, context, uid });\n        return `__${ ZOID }__${ this.component.name }__${ base64encode(JSON.stringify(childPayload)) }__`;\n    }\n\n    getPropsRef(proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, uid : string) : PropRef {\n        const value = serializeMessage(proxyWin, domain, this.getPropsForChild(domain));\n\n        const propRef = (childDomain === getDomain())\n            ? { type: INITIAL_PROPS.UID, uid }\n            : { type: INITIAL_PROPS.RAW, value };\n\n        if (propRef.type === INITIAL_PROPS.UID) {\n            const global = getGlobal(window);\n            global.props = global.props || {};\n            global.props[uid] = value;\n\n            this.clean.register(() => {\n                delete global.props[uid];\n            });\n        }\n\n        return propRef;\n    }\n\n    buildChildPayload({ proxyWin, childDomain, domain, target = window, context, uid } : { proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string } = {}) : ChildPayload {\n        return {\n            uid,\n            context,\n            version:      __ZOID__.__VERSION__,\n            childDomain,\n            parentDomain: getDomain(window),\n            tag:          this.component.tag,\n            parent:       this.getWindowRef(target, childDomain, uid, context),\n            props:        this.getPropsRef(proxyWin, childDomain, domain, uid),\n            exports:      serializeMessage(proxyWin, domain, this.buildParentExports(proxyWin))\n        };\n    }\n\n    setProxyWin(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.proxyWin = proxyWin;\n        });\n    }\n\n    getHelpers() : ParentHelpers<P> {\n        return {\n            state:       this.state,\n            event:       this.event,\n            close:       () => this.close(),\n            focus:       () => this.focus(),\n            resize:      ({ width, height }) => this.resize({ width, height }),\n            onError:     (err) => this.onError(err),\n            updateProps: (props) => this.updateProps(props),\n            show:        () => this.show(),\n            hide:        () => this.hide()\n        };\n    }\n\n    show() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.visible = true;\n            if (this.proxyContainer) {\n                return this.proxyContainer.get()\n                    .then(showElement);\n            }\n        });\n    }\n\n    hide() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.visible = false;\n            if (this.proxyContainer) {\n                return this.proxyContainer.get()\n                    .then(hideElement);\n            }\n        });\n    }\n\n    setProps(props : PropsInputType<P>, isUpdate : boolean = false) {\n        if (this.component.validate) {\n            this.component.validate({ props });\n        }\n\n        const helpers = this.getHelpers();\n        extendProps(this.component, this.props, props, helpers, isUpdate);\n    }\n\n    buildUrl() : ZalgoPromise<string> {\n        return propsToQuery({ ...this.component.props, ...this.component.builtinProps }, this.props).then(query => {\n            return extendUrl(normalizeMockUrl(this.component.getUrl(this.props)), { query });\n        });\n    }\n\n    getDomain() : string | RegExp {\n        return this.component.getDomain(this.props);\n    }\n\n    getChildDomain() : string {\n        return this.component.getChildDomain(this.props);\n    }\n\n    getPropsForChild(domain : string | RegExp) : (PropsType<P>) {\n        const result = {};\n\n        for (const key of Object.keys(this.props)) {\n            const prop = this.component.getPropDefinition(key);\n\n            if (prop && prop.sendToChild === false) {\n                continue;\n            }\n\n            if (prop && prop.sameDomain && !matchDomain(domain, getDomain(window))) {\n                continue;\n            }\n            \n            result[key] = this.props[key];\n        }\n\n        // $FlowFixMe\n        return result;\n    }\n\n    updateProps(props : PropsInputType<P>) : ZalgoPromise<void> {\n        this.setProps(props, true);\n\n        return this.initPromise.then(() => {\n            if (this.child) {\n                return this.child.updateProps(this.getPropsForChild(this.getDomain())).catch(err => {\n                    if (!this.child || !this.proxyWin) {\n                        return;\n                    }\n\n                    return this.checkClose(this.proxyWin).then(() => {\n                        if (this.child) {\n                            throw err;\n                        }\n                    });\n                });\n            }\n        });\n    }\n\n    openFrame() : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openFrame) {\n                return this.driver.openFrame.call(this);\n            }\n        });\n    }\n\n    openPrerenderFrame() : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openPrerenderFrame) {\n                return this.driver.openPrerenderFrame.call(this);\n            }\n        });\n    }\n    \n    open(proxyFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`open`);\n\n            const windowProp = this.props.window;\n\n            if (windowProp) {\n                this.clean.register(() => windowProp.close());\n                return toProxyWindow(windowProp);\n            }\n\n            return this.driver.open.call(this, proxyFrame);\n\n        }).then(proxyWin => {\n            this.proxyWin = proxyWin;\n            return proxyWin;\n        });\n    }\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return this.driver.openPrerender.call(this, proxyWin, proxyPrerenderFrame);\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const proxyWin = this.proxyWin;\n            if (proxyWin) {\n                this.event.trigger(EVENT.FOCUS);\n                return proxyWin.focus().then(noop);\n            }\n        });\n    }\n\n    delegate(context : $Values<typeof CONTEXT>, target : CrossDomainWindowType) {\n        this.component.log(`delegate`);\n\n        const props = {};\n        for (const propName of this.component.getPropNames()) {\n            if (this.component.getPropDefinition(propName).allowDelegate) {\n                props[propName] = this.props[propName];\n            }\n        }\n\n        const overridesPromise = send(target, `${ POST_MESSAGE.DELEGATE }_${ this.component.name }`, {\n            context,\n            props,\n            overrides: {\n                event:   this.event,\n                close:   () => this.close(),\n                onError: (err) => this.onError(err)\n            }\n\n        }).then(({ data }) => {\n            this.clean.register(data.destroy);\n            return data.overrides;\n\n        }).catch(err => {\n            throw new Error(`Unable to delegate rendering. Possibly the component is not loaded in the target window.\\n\\n${ stringifyError(err) }`);\n        });\n\n        for (const key of this.driver.delegate) {\n            // $FlowFixMe\n            this[key] = function overriddenFunction() : ZalgoPromise<mixed> {\n                return overridesPromise.then(overrides => {\n                    return overrides[key].apply(this, arguments);\n                });\n            };\n        }\n    }\n\n    getWindowRef(target : CrossDomainWindowType, domain : string, uid : string, context : $Values<typeof CONTEXT>) : WindowRef {\n        \n        if (domain === getDomain(window)) {\n            const global = getGlobal(window);\n            global.windows = global.windows || {};\n            global.windows[uid] = window;\n            this.clean.register(() => {\n                delete global.windows[uid];\n            });\n    \n            return { type: WINDOW_REFERENCES.GLOBAL, uid };\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return { type: WINDOW_REFERENCES.OPENER };\n        }\n\n        return { type: WINDOW_REFERENCES.PARENT, distance: getDistanceFromTop(window) };\n    }\n\n    watchForClose(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        let cancelled = false;\n\n        this.clean.register(() => {\n            cancelled = true;\n        });\n\n        return ZalgoPromise.delay(2000).then(() => {\n            return proxyWin.isClosed();\n        }).then(isClosed => {\n            if (isClosed) {\n                this.component.log(`detect_close_child`);\n                return this.close();\n            } else if (!cancelled) {\n                return this.watchForClose(proxyWin);\n            }\n        });\n    }\n\n    watchForUnload() {\n        const unloadWindowListener = addEventListener(window, 'unload', once(() => {\n            this.component.log(`navigate_away`);\n            this.destroy(new Error(`Window navigated away`));\n        }));\n\n        this.clean.register(unloadWindowListener.cancel);\n    }\n\n    runTimeout() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const timeout = this.props.timeout;\n\n            if (timeout) {\n                return this.initPromise.timeout(timeout, new Error(`Loading component timed out after ${ timeout } milliseconds`));\n            }\n        });\n    }\n\n    initChild(child : ChildExportsType<P>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.clean.set('child', child);\n            this.initPromise.resolve();\n        });\n    }\n\n    buildParentExports(win : ProxyWindow) : ParentExportsType<P> {\n        const onError    = (err) => this.onError(err);\n        const init       = (child) => this.initChild(child);\n        const close      = () => this.close();\n        const checkClose = () => this.checkClose(win);\n        const resize     = ({ width, height }) => this.resize({ width, height });\n        const show       = () => this.show();\n        const hide       = () => this.hide();\n\n        init.onError = onError;\n\n        return { init, close, checkClose, resize, onError, show, hide };\n    }\n\n    resize({ width, height } : { width? : ?number, height? : ?number }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.event.trigger(EVENT.RESIZE, { width, height });\n        });\n    }\n\n    checkClose(win : ProxyWindow) : ZalgoPromise<void> {\n        return win.isClosed().then(closed => {\n            if (closed) {\n                return this.close();\n            }\n\n            return ZalgoPromise.delay(200)\n                .then(() => win.isClosed())\n                .then(secondClosed => {\n                    if (secondClosed) {\n                        return this.close();\n                    }\n                });\n        });\n    }\n\n    close() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`close`);\n            return this.event.trigger(EVENT.CLOSE);\n\n        }).then(() => {\n            if (this.child) {\n                this.child.close.fireAndForget().catch(noop);\n            }\n\n            return this.destroy(new Error(`Window closed`), false);\n        });\n    }\n\n    prerender(proxyPrerenderWin : ProxyWindow, { context, uid } : { context : $Values<typeof CONTEXT>, uid : string }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const prerenderTemplate = this.component.prerenderTemplate;\n\n            if (!prerenderTemplate) {\n                return;\n            }\n\n            let prerenderWindow = proxyPrerenderWin.getWindow();\n\n            if (!prerenderWindow || !isSameDomain(prerenderWindow) || !isBlankDomain(prerenderWindow)) {\n                return;\n            }\n\n            prerenderWindow = assertSameDomain(prerenderWindow);\n    \n            const doc = prerenderWindow.document;\n            const el = this.renderTemplate(prerenderTemplate, { context, uid, doc });\n\n            if (!el) {\n                return;\n            }\n\n            if (el.ownerDocument !== doc) {\n                throw new Error(`Expected prerender template to have been created with document from child window`);\n            }\n\n            writeElementToWindow(prerenderWindow, el);\n\n            let { width = false, height = false, element = 'body' } = this.component.autoResize || {};\n            element = getElementSafe(element, doc);\n            \n            if (element && (width || height)) {\n                onResize(element, ({ width: newWidth, height: newHeight }) => {\n                    this.resize({\n                        width:  width ? newWidth : undefined,\n                        height: height ? newHeight : undefined\n                    });\n                }, { width, height, win: prerenderWindow });\n            }\n        });\n    }\n\n    renderTemplate(renderer : (RenderOptionsType<P>) => ?HTMLElement, { context, uid, container, doc, frame, prerenderFrame } : { context : $Values<typeof CONTEXT>, uid : string, container? : HTMLElement, doc : Document, frame? : ?HTMLIFrameElement, prerenderFrame? : ?HTMLIFrameElement }) : ?HTMLElement {\n        // $FlowFixMe\n        return renderer.call(this, {\n            container,\n            context,\n            uid,\n            doc,\n            frame,\n            prerenderFrame,\n            focus:      () => this.focus(),\n            close:      () => this.close(),\n            state:      this.state,\n            props:      this.props,\n            tag:        this.component.tag,\n            dimensions: this.component.dimensions,\n            event:      this.event\n        });\n    }\n\n    renderContainer(proxyContainer : ProxyObject<HTMLElement>, { proxyFrame, proxyPrerenderFrame, context, uid, visible } :\n        { context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyObject<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>, visible : boolean }) : ZalgoPromise<?ProxyObject<HTMLElement>> {\n        \n\n        return ZalgoPromise.hash({\n            container:      proxyContainer.get().then(elementReady),\n            // $FlowFixMe\n            frame:          proxyFrame ? proxyFrame.get() : null,\n            // $FlowFixMe\n            prerenderFrame: proxyPrerenderFrame ? proxyPrerenderFrame.get() : null\n        }).then(({ container, frame, prerenderFrame }) => {\n            const innerContainer = this.renderTemplate(this.component.containerTemplate, { context, uid, container, frame, prerenderFrame, doc: document });\n            if (innerContainer) {\n                if (!visible) {\n                    hideElement(innerContainer);\n                }\n                appendChild(container, innerContainer);\n                this.clean.register(() => destroyElement(innerContainer));\n                this.proxyContainer = getProxyObject(innerContainer);\n                return getProxyObject(innerContainer);\n            }\n        });\n    }\n\n    destroy(err? : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (!err) {\n                trigger = false;\n                err = new Error('Component destroyed');\n            }\n            this.component.log(`destroy`);\n            return this.onError(err, trigger);\n        }).then(() => {\n            return this.clean.all();\n        });\n    }\n\n    onError(err : mixed, trigger? : boolean = true) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.handledErrors.indexOf(err) !== -1) {\n                return;\n            }\n\n            this.handledErrors.push(err);\n            this.initPromise.asyncReject(err);\n\n            if (trigger) {\n                return this.event.trigger(EVENT.ERROR, err);\n            }\n        });\n    }\n\n    openBridge(proxyWin : ProxyWindow, domain : string, context : $Values<typeof CONTEXT>) : ?ZalgoPromise<?CrossDomainWindowType> {\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            return ZalgoPromise.try(() => {\n                return proxyWin.awaitWindow();\n                \n            }).then(win => {\n                if (!bridge || !bridge.needsBridge({ win, domain }) || bridge.hasBridge(domain, domain)) {\n                    return;\n                }\n\n                const bridgeUrl = this.component.getBridgeUrl();\n\n                if (!bridgeUrl) {\n                    throw new Error(`Bridge needed to render ${ context }`);\n                }\n\n                const bridgeDomain = getDomainFromUrl(bridgeUrl);\n                bridge.linkUrl(win, domain);\n                return bridge.openBridge(normalizeMockUrl(bridgeUrl), bridgeDomain);\n            });\n        }\n    }\n}\n","/* @flow */\n\nimport { onCloseWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { ProxyWindow } from 'post-robot/src';\nimport { cleanup, type CleanupType, type EventEmitterType } from 'belter/src';\n\nimport { ParentComponent } from '../parent';\nimport { RENDER_DRIVERS, type ContextDriverType } from '../parent/drivers';\nimport type { Component } from '../component';\n\nexport type DelegatePropsType = {|\n    onClose : () => ?ZalgoPromise<void>,\n    onDisplay : () => ?ZalgoPromise<void>,\n    window : ?ProxyWindow\n|};\n\nexport type DelegateOptionsType = {|\n    context : string,\n    props : DelegatePropsType,\n    overrides : {\n        close : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    }\n|};\n\nexport type DelegateReturnType = {|\n    overrides : Object,\n    destroy : () => ZalgoPromise<void>\n|};\n\nexport class DelegateComponent<P>  {\n\n    component : Component<P>\n    source : CrossDomainWindowType\n    context : string\n    driver : ContextDriverType\n    props : DelegatePropsType\n    clean : CleanupType\n\n    focus : () => ZalgoPromise<void>\n    resize : ({ width? : ?number, height? : ?number }) => ZalgoPromise<void>\n    renderTemplate : Function\n\n    close : () => ZalgoPromise<void>\n    onError : (mixed) => ZalgoPromise<void>\n    event : EventEmitterType\n\n    constructor(component : Component<P>, source : CrossDomainWindowType, options : DelegateOptionsType) {\n        this.component = component;\n        this.context = options.context;\n        this.driver = RENDER_DRIVERS[options.context];\n        this.clean = cleanup(this);\n        \n        this.focus = ParentComponent.prototype.focus;\n        this.resize = ParentComponent.prototype.resize;\n        this.renderTemplate = ParentComponent.prototype.renderTemplate;\n\n        // $FlowFixMe\n        this.props = {};\n        \n        for (const propName of Object.keys(options.props)) {\n            const propDef = this.component.getPropDefinition(propName);\n            if (propDef && propDef.allowDelegate && options.props[propName]) {\n                // $FlowFixMe\n                this.props[propName] = options.props[propName];\n            }\n        }\n\n        this.close   = options.overrides.close;\n        this.onError = options.overrides.onError;\n        this.event   = options.overrides.event;\n\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n\n        this.watchForSourceClose(source);\n    }\n\n    getDelegate() : DelegateReturnType {\n        return {\n            overrides: this.getOverrides(),\n            destroy:   () => this.destroy()\n        };\n    }\n\n    watchForSourceClose(source : CrossDomainWindowType) {\n        const closeSourceWindowListener = onCloseWindow(source, () => this.destroy(), 3000);\n        this.clean.register(closeSourceWindowListener.cancel);\n    }\n\n    getOverrides() : { [string] : mixed } {\n        const overrides = {};\n        const self = this;\n\n        for (const key of this.driver.delegate) {\n            overrides[key] = function delegateOverride() : mixed {\n                // $FlowFixMe\n                return ParentComponent.prototype[key].apply(self, arguments);\n            };\n            overrides[key].__name__ = key;\n        }\n\n        return overrides;\n    }\n\n    destroy() : ZalgoPromise<void> {\n        return this.clean.all();\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { destroyElement, toCSS } from 'belter/src';\n\nimport { type RenderOptionsType } from '../../parent';\nimport { EVENT } from '../../constants';\n\nconst CLASS = {\n    VISIBLE:   'visible',\n    INVISIBLE: 'invisible'\n};\n\nexport function defaultContainerTemplate<P>({ uid, frame, prerenderFrame, doc, props, event, dimensions : { width, height } } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_CONTAINER__) {\n        if (!frame || !prerenderFrame) {\n            return;\n        }\n\n        const div = doc.createElement('div');\n        div.setAttribute('id', uid);\n        const style = doc.createElement('style');\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        style.appendChild(doc.createTextNode(`\n            #${ uid } {\n                display: inline-block;\n                position: relative;\n                width: ${ width };\n                height: ${ height };\n            }\n\n            #${ uid } > iframe {\n                display: inline-block;\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                top: 0;\n                left: 0;\n                transition: opacity .2s ease-in-out;\n            }\n\n            #${ uid } > iframe.${ CLASS.INVISIBLE } {\n                opacity: 0;\n            }\n\n            #${ uid } > iframe.${ CLASS.VISIBLE } {\n                opacity: 1;\n        }\n        `));\n\n        div.appendChild(frame);\n        div.appendChild(prerenderFrame);\n        div.appendChild(style);\n\n        prerenderFrame.classList.add(CLASS.VISIBLE);\n        frame.classList.add(CLASS.INVISIBLE);\n    \n        event.on(EVENT.RENDERED, () => {\n            prerenderFrame.classList.remove(CLASS.VISIBLE);\n            prerenderFrame.classList.add(CLASS.INVISIBLE);\n    \n            frame.classList.remove(CLASS.INVISIBLE);\n            frame.classList.add(CLASS.VISIBLE);\n    \n            setTimeout(() => {\n                destroyElement(prerenderFrame);\n            }, 1);\n        });\n\n        event.on(EVENT.RESIZE, ({ width: newWidth, height: newHeight }) => {\n            if (typeof newWidth === 'number') {\n                div.style.width = toCSS(newWidth);\n            }\n    \n            if (typeof newHeight === 'number') {\n                div.style.height = toCSS(newHeight);\n            }\n        });\n\n        return div;\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { type RenderOptionsType } from '../../parent';\n\nexport function defaultPrerenderTemplate<P>({ doc, props } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_PRERENDER__) {\n        const html = doc.createElement('html');\n        const body = doc.createElement('body');\n        const style = doc.createElement('style');\n        const spinner = doc.createElement('div');\n        spinner.classList.add('spinner');\n\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        html.appendChild(body);\n        body.appendChild(spinner);\n        body.appendChild(style);\n        style.appendChild(doc.createTextNode(`\n            html, body {\n                width: 100%;\n                height: 100%;\n            }\n\n            .spinner {\n                position: fixed;\n                max-height: 60vmin;\n                max-width: 60vmin;\n                height: 40px;\n                width: 40px;\n                top: 50%;\n                left: 50%;\n                box-sizing: border-box;\n                border: 3px solid rgba(0, 0, 0, .2);\n                border-top-color: rgba(33, 128, 192, 0.8);\n                border-radius: 100%;\n                animation: rotation .7s infinite linear;\n            }\n\n            @keyframes rotation {\n                from {\n                    transform: translateX(-50%) translateY(-50%) rotate(0deg);\n                }\n                to {\n                    transform: translateX(-50%) translateY(-50%) rotate(359deg);\n                }\n            }\n        `));\n\n        return html;\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, noop, type EventEmitterType } from 'belter/src';\nimport { isWindow, type CrossDomainWindowType, isWindowClosed, isSameDomain } from 'cross-domain-utils/src';\nimport { ProxyWindow, toProxyWindow } from 'post-robot/src';\n\nimport { PROP_SERIALIZATION } from '../constants';\n\nexport type EventHandlerType<T> = (T) => void | ZalgoPromise<void>;\n\nexport type timeoutPropType = number;\nexport type windowPropType = CrossDomainWindowType | ProxyWindow;\nexport type cspNoncePropType = string;\nexport type closePropType = () => ZalgoPromise<void>;\nexport type focusPropType = () => ZalgoPromise<void>;\nexport type resizePropType = ({ width : ?number, height : ?number }) => ZalgoPromise<void>;\n\nexport type onDisplayPropType = EventHandlerType<void>;\nexport type onRenderedPropType = EventHandlerType<void>;\nexport type onRenderPropType = EventHandlerType<void>;\nexport type onClosePropType = EventHandlerType<void>;\nexport type onResizePropType = EventHandlerType<void>;\nexport type onFocusPropType = EventHandlerType<void>;\nexport type onErrorPropType = EventHandlerType<mixed>;\nexport type onPropsPropType<P> = ((PropsType<P>) => void) => void; // eslint-disable-line no-use-before-define\n\nexport type PropsInputType<P> = {\n    timeout? : timeoutPropType,\n    window? : windowPropType,\n    cspNonce? : cspNoncePropType,\n\n    onDisplay? : onDisplayPropType,\n    onRendered? : onRenderedPropType,\n    onRender? : onRenderPropType,\n    onClose? : onClosePropType,\n    onResize? : onResizePropType,\n    onFocus? : onFocusPropType,\n    onError? : onErrorPropType,\n    onProps? : onPropsPropType<P>\n} & P;\n\nexport type PropsType<P> = {|\n    timeout? : timeoutPropType,\n    window? : ?windowPropType,\n    close? : ?closePropType,\n    focus? : ?focusPropType,\n    resize? : ?resizePropType,\n    cspNonce? : ?cspNoncePropType,\n\n    onDisplay : onDisplayPropType,\n    onRendered : onRenderedPropType,\n    onRender : onRenderPropType,\n    onClose : onClosePropType,\n    onResize : onResizePropType,\n    onFocus : onFocusPropType,\n    onError : onErrorPropType,\n    onProps : onPropsPropType<P>\n|} & P;\n\ntype PropDefinitionType<T, P, S : string> = {|\n    type : S,\n    alias? : string,\n    value? : ({|\n        props : P,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => ?T,\n    default? : ({|\n        props : P,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => ?T,\n    decorate? : ({|\n        value : T,\n        props : PropsType<P>,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => T,\n    childDecorate? : ({|\n        value : T,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        onProps : ((PropsType<P>) => void) => void,\n        resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n        getParentDomain : () => string,\n        getParent : () => CrossDomainWindowType,\n        show : () => ZalgoPromise<void>,\n        hide : () => ZalgoPromise<void>\n    |}) => ?T,\n    required? : boolean,\n    queryParam? : boolean | string | ({ value : T }) => (string | ZalgoPromise<string>),\n    queryValue? : ({| value : T |}) => (ZalgoPromise<mixed> | mixed),\n    sendToChild? : boolean,\n    allowDelegate? : boolean,\n    validate? : ({| value : T, props : PropsInputType<P> |}) => void,\n    sameDomain? : boolean,\n    serialization? : $Values<typeof PROP_SERIALIZATION>\n|};\n\nexport type BooleanPropDefinitionType<T : boolean, P> = PropDefinitionType<T, P, 'boolean'>;\nexport type StringPropDefinitionType<T : string, P> = PropDefinitionType<T, P, 'string'>;\nexport type NumberPropDefinitionType<T : number, P> = PropDefinitionType<T, P, 'number'>;\nexport type FunctionPropDefinitionType<T : Function, P> = PropDefinitionType<T, P, 'function'>;\nexport type ArrayPropDefinitionType<T : Array<*> | $ReadOnlyArray<*>, P> = PropDefinitionType<T, P, 'array'>; // eslint-disable-line flowtype/no-mutable-array\nexport type ObjectPropDefinitionType<T : Object, P> = PropDefinitionType<T, P, 'object'>;\n\nexport type MixedPropDefinitionType<P> = BooleanPropDefinitionType<*, P> | StringPropDefinitionType<*, P> | NumberPropDefinitionType<*, P> | FunctionPropDefinitionType<*, P> | ObjectPropDefinitionType<*, P> | ArrayPropDefinitionType<*, P>;\n\nexport type UserPropsDefinitionType<P> = {\n    [string] : MixedPropDefinitionType<P>\n};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type BuiltInPropsDefinitionType<P> = {\n    timeout : NumberPropDefinitionType<timeoutPropType, P>,\n    window : ObjectPropDefinitionType<windowPropType, P>,\n    close : FunctionPropDefinitionType<closePropType, P>,\n    focus : FunctionPropDefinitionType<focusPropType, P>,\n    resize : FunctionPropDefinitionType<resizePropType, P>,\n\n    onDisplay : FunctionPropDefinitionType<onDisplayPropType, P>,\n    onRendered : FunctionPropDefinitionType<onRenderedPropType, P>,\n    onRender : FunctionPropDefinitionType<onRenderPropType, P>,\n    onClose : FunctionPropDefinitionType<onClosePropType, P>,\n    onResize : FunctionPropDefinitionType<onClosePropType, P>,\n    onFocus : FunctionPropDefinitionType<onFocusPropType, P>,\n    onError : FunctionPropDefinitionType<onErrorPropType, P>,\n    onProps : FunctionPropDefinitionType<onPropsPropType<P>, P>\n};\n\nconst defaultNoop = () => noop;\nconst decorateOnce = ({ value }) => once(value);\n\nexport function getBuiltInProps<P>() : BuiltInPropsDefinitionType<P> {\n    return {\n        window: {\n            type:          'object',\n            sendToChild:   false,\n            required:      false,\n            allowDelegate: true,\n            validate({ value } : { value : CrossDomainWindowType | ProxyWindow }) {\n                if (!isWindow(value) && !ProxyWindow.isProxyWindow(value)) {\n                    throw new Error(`Expected Window or ProxyWindow`);\n                }\n\n                if (isWindow(value)) {\n                    // $FlowFixMe\n                    if (isWindowClosed(value)) {\n                        throw new Error(`Window is closed`);\n                    }\n\n                    // $FlowFixMe\n                    if (!isSameDomain(value)) {\n                        throw new Error(`Window is not same domain`);\n                    }\n                }\n            },\n            decorate({ value } : { value : CrossDomainWindowType | ProxyWindow }) : ProxyWindow {\n                return toProxyWindow(value);\n            }\n        },\n\n        timeout: {\n            type:        'number',\n            required:    false,\n            sendToChild: false\n        },\n\n        close: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ close }) => close\n        },\n\n        focus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ focus }) => focus\n        },\n\n        resize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ resize }) => resize\n        },\n\n        cspNonce: {\n            type:     'string',\n            required: false\n        },\n\n        getParent: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParent }) => getParent\n        },\n\n        getParentDomain: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParentDomain }) => getParentDomain\n        },\n\n        show: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ show }) => show\n        },\n\n        hide: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ hide }) => hide\n        },\n\n        onDisplay: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onRendered: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onRender: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onClose: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onResize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop\n        },\n\n        onFocus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop\n        },\n\n        onError: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ onError }) => onError\n        },\n\n        onProps: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            default:       defaultNoop,\n            childDecorate: ({ onProps }) => onProps\n        }\n    };\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { setup as setupPostRobot, on, send, bridge, toProxyWindow, destroy as destroyPostRobot } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindow, getDomainFromUrl, type CrossDomainWindowType, isSameTopWindow, getDomain, matchDomain, isSameDomain } from 'cross-domain-utils/src';\nimport { isRegex, noop, isElement } from 'belter/src';\n\nimport { ChildComponent, getChildPayload } from '../child';\nimport { ParentComponent, type RenderOptionsType, type ParentHelpers } from '../parent';\nimport { DelegateComponent } from '../delegate';\nimport { CONTEXT, POST_MESSAGE, WILDCARD, DEFAULT_DIMENSIONS } from '../constants';\nimport { react, angular, vue, angular2 } from '../drivers';\nimport { getGlobal, destroyGlobal } from '../lib';\nimport type { CssDimensionsType, StringMatcherType } from '../types';\n\nimport { validate } from './validate';\nimport { defaultContainerTemplate, defaultPrerenderTemplate } from './templates';\nimport { getBuiltInProps, type UserPropsDefinitionType, type BuiltInPropsDefinitionType, type PropsInputType, type PropsType, type MixedPropDefinitionType } from './props';\n\ntype LoggerPayload = { [string] : ?string };\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype Logger = {\n    debug : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    info : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    warn : (event : string, payload? : LoggerPayload) => any, // eslint-disable-line flowtype/no-weak-types\n    error : (event : string, payload? : LoggerPayload) => any // eslint-disable-line flowtype/no-weak-types\n};\n\n/*  Component\n    ---------\n\n    This is the spec for the component. The idea is, when I call zoid.create(), it will create a new instance\n    of Component with the blueprint needed to set up ParentComponents and ChildComponents.\n\n    This is the one portion of code which is required by -- and shared to -- both the parent and child windows, and\n    contains all of the configuration needed for them to set themselves up.\n*/\n\nexport type ComponentOptionsType<P> = {|\n\n    tag : string,\n\n    url : string | ({ props : PropsType<P> }) => string,\n    domain? : string | RegExp,\n    bridgeUrl? : string,\n\n    props? : UserPropsDefinitionType<P>,\n\n    dimensions? : CssDimensionsType,\n    autoResize? : { width? : boolean, height? : boolean, element? : string },\n\n    allowedParentDomains? : StringMatcherType,\n\n    attributes? : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    },\n\n    defaultContext? : $Values<typeof CONTEXT>,\n\n    containerTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n\n    validate? : ({ props : PropsInputType<P> }) => void,\n\n    logger? : Logger\n|};\n\ntype ZoidRenderer = {|\n    render : (container? : string | HTMLElement, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    renderTo : (target : CrossDomainWindowType, container? : string, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>\n|};\n\nexport type ZoidComponentInstance<P> = {| ...ParentHelpers<P>, ...ZoidRenderer |};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type ZoidComponent<P> = {\n    (PropsInputType<P>) : ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    xprops? : PropsType<P>,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>\n};\n\nexport class Component<P> {\n\n    tag : string\n    name : string\n    \n    url : string | ({ props : PropsType<P> }) => string\n    domain : void | string | RegExp\n    bridgeUrl : void | string\n\n    props : UserPropsDefinitionType<P>\n    builtinProps : BuiltInPropsDefinitionType<P>\n\n    dimensions : CssDimensionsType\n    autoResize : void | { width? : boolean, height? : boolean, element? : string }\n\n    allowedParentDomains : StringMatcherType\n\n    defaultContext : $Values<typeof CONTEXT>\n    \n    attributes : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    }\n\n    containerTemplate : (RenderOptionsType<P>) => ?HTMLElement\n    prerenderTemplate : ?(RenderOptionsType<P>) => ?HTMLElement\n\n    validate : void | ({ props : PropsInputType<P> }) => void\n\n    driverCache : { [string] : mixed }\n\n    xprops : ?PropsType<P>\n\n    logger : Logger\n\n    propNames : $ReadOnlyArray<string>\n\n    constructor(options : ComponentOptionsType<P>) {\n        validate(options);\n\n        // The tag name of the component. Used by some drivers (e.g. angular) to turn the component into an html element,\n        // e.g. <my-component>\n\n        this.tag = options.tag;\n        this.name = this.tag.replace(/-/g, '_');\n\n        this.allowedParentDomains = options.allowedParentDomains || WILDCARD;\n\n        const global = getGlobal();\n        global.components = global.components || {};\n\n        if (global.components[this.tag]) {\n            throw new Error(`Can not register multiple components with the same tag: ${ this.tag }`);\n        }\n\n        // A json based spec describing what kind of props the component accepts. This is used to validate any props before\n        // they are passed down to the child.\n\n        this.builtinProps = getBuiltInProps();\n        this.props = options.props || {};\n\n        // The dimensions of the component, e.g. { width: '300px', height: '150px' }\n\n        const { width = DEFAULT_DIMENSIONS.WIDTH, height = DEFAULT_DIMENSIONS.HEIGHT } = options.dimensions || {};\n        this.dimensions = { width, height };\n\n        this.url = options.url;\n        this.domain = options.domain;\n        this.bridgeUrl = options.bridgeUrl;\n\n        this.attributes = options.attributes || {};\n        this.attributes.iframe = this.attributes.iframe || {};\n        this.attributes.popup = this.attributes.popup || {};\n\n        this.defaultContext = options.defaultContext || CONTEXT.IFRAME;\n\n        this.autoResize = options.autoResize;\n\n        if (options.containerTemplate) {\n            this.containerTemplate = options.containerTemplate;\n        } else if (__ZOID__.__DEFAULT_CONTAINER__) {\n            this.containerTemplate = defaultContainerTemplate;\n        }\n\n        if (options.prerenderTemplate) {\n            this.prerenderTemplate = options.prerenderTemplate;\n        } else if (__ZOID__.__DEFAULT_PRERENDER__) {\n            this.prerenderTemplate = defaultPrerenderTemplate;\n        }\n\n        this.validate = options.validate;\n\n        this.logger = options.logger || {\n            debug: noop,\n            info:  noop,\n            warn:  noop,\n            error: noop\n        };\n\n        this.registerChild();\n        this.listenDelegate();\n\n        global.components[this.tag] = this;\n    }\n\n    getPropNames() : $ReadOnlyArray<string> {\n        if (this.propNames) {\n            return this.propNames;\n        }\n\n        const propNames = Object.keys(this.props);\n        for (const key of Object.keys(this.builtinProps)) {\n            if (propNames.indexOf(key) === -1) {\n                propNames.push(key);\n            }\n        }\n\n        this.propNames = propNames;\n        return propNames;\n    }\n\n    getPropDefinition(name : string) : MixedPropDefinitionType<P> {\n        return this.props[name] || this.builtinProps[name];\n    }\n\n    driver(name : string, dep : mixed) : mixed {\n        if (__ZOID__.__FRAMEWORK_SUPPORT__) {\n            const drivers = { react, angular, vue, angular2 };\n\n            if (!drivers[name]) {\n                throw new Error(`Could not find driver for framework: ${ name }`);\n            }\n    \n            this.driverCache = this.driverCache || {};\n    \n            if (!this.driverCache[name]) {\n                this.driverCache[name] = drivers[name].register(this, dep);\n            }\n    \n            return this.driverCache[name];\n        } else {\n            throw new Error(`Driver support not enabled`);\n        }\n    }\n\n    registerChild() {\n        if (this.isChild()) {\n            if (window.xprops) {\n                throw new Error(`Can not register ${ this.name } as child - can not attach multiple components to the same window`);\n            }\n\n            const child = new ChildComponent(this);\n            window.xprops = this.xprops = child.getProps();\n        }\n    }\n\n    listenDelegate() {\n        on(`${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`, () => {\n            return true;\n        });\n\n        on(`${ POST_MESSAGE.DELEGATE }_${ this.name }`, ({ source, data: { context, props, overrides } }) => {\n            const delegate = new DelegateComponent(this, source, { context, props, overrides });\n            return delegate.getDelegate();\n        });\n    }\n\n    canRenderTo(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return send(win, `${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`).then(({ data }) => {\n            return data;\n        }).catch(() => {\n            return false;\n        });\n    }\n\n    getUrl(props : PropsType<P>) : string {\n        if (typeof this.url === 'function') {\n            return this.url({ props });\n        }\n\n        return this.url;\n    }\n\n    getChildDomain(props : PropsType<P>) : string {\n        if (this.domain && typeof this.domain === 'string') {\n            return this.domain;\n        }\n\n        return getDomainFromUrl(this.getUrl(props));\n    }\n\n    getDomain(props : PropsType<P>) : string | RegExp {\n        if (this.domain && isRegex(this.domain)) {\n            return this.domain;\n        }\n\n        return this.getChildDomain(props);\n    }\n\n    getBridgeUrl() : ?string {\n        if (this.bridgeUrl) {\n            return this.bridgeUrl;\n        }\n    }\n\n    isChild() : boolean {\n        const payload = getChildPayload();\n        return Boolean(payload && payload.tag === this.tag && payload.childDomain === getDomain());\n    }\n\n    getDefaultContainer(context : $Values<typeof CONTEXT>, container? : string | HTMLElement) : string | HTMLElement {\n        if (container) {\n            if (typeof container !== 'string' && !isElement(container)) {\n                throw new TypeError(`Expected string or element selector to be passed`);\n            }\n\n            return container;\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return 'body';\n        }\n\n        throw new Error(`Expected element to be passed to render iframe`);\n    }\n\n    getDefaultContext(context : ?$Values<typeof CONTEXT>, props : PropsInputType<P>) : ZalgoPromise<$Values<typeof CONTEXT>> {\n        return ZalgoPromise.try(() => {\n            if (props.window) {\n                return toProxyWindow(props.window).getType();\n            }\n    \n            if (context) {\n                if (context !== CONTEXT.IFRAME && context !== CONTEXT.POPUP) {\n                    throw new Error(`Unrecognized context: ${ context }`);\n                }\n                \n                return context;\n            }\n    \n            return this.defaultContext;\n        });\n    }\n\n    init(props : PropsInputType<P>) : ZoidComponentInstance<P> {\n\n        // $FlowFixMe\n        props = props || {};\n        \n        const parent = new ParentComponent(this, props);\n\n        const render = (target, container, context) => {\n            return ZalgoPromise.try(() => {\n                if (!isWindow(target)) {\n                    throw new Error(`Must pass window to renderTo`);\n                }\n\n                return this.getDefaultContext(context, props);\n                \n            }).then(finalContext => {\n                container = this.getDefaultContainer(finalContext, container);\n                return parent.render(target, container, finalContext);\n            });\n        };\n\n        return {\n            ...parent.getHelpers(),\n            render:   (container, context) => render(window, container, context),\n            renderTo: (target, container, context) => render(target, container, context)\n        };\n    }\n\n    checkAllowRender(target : CrossDomainWindowType, domain : string | RegExp, container : string | HTMLElement) {\n        if (target === window) {\n            return;\n        }\n\n        if (!isSameTopWindow(window, target)) {\n            throw new Error(`Can only renderTo an adjacent frame`);\n        }\n\n        const origin = getDomain();\n\n        if (!matchDomain(domain, origin) && !isSameDomain(target)) {\n            throw new Error(`Can not render remotely to ${ domain.toString() } - can only render to ${ origin }`);\n        }\n\n        if (container && typeof container !== 'string') {\n            throw new Error(`Container passed to renderTo must be a string selector, got ${ typeof container } }`);\n        }\n    }\n\n    log(event : string, payload? : LoggerPayload) {\n        this.logger.info(`${ this.name }_${ event }`, payload);\n    }\n\n    registerActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        const global = getGlobal();\n        global.activeComponents = global.activeComponents || [];\n        global.activeComponents.push(instance);\n    }\n\n    destroyActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        const global = getGlobal();\n        global.activeComponents = global.activeComponents || [];\n        global.activeComponents.splice(global.activeComponents.indexOf(instance), 1);\n    }\n}\n\nexport type ComponentDriverType<P, T : mixed> = {|\n    register : (Component<P>, T) => mixed\n|};\n\nexport function create<P>(options : ComponentOptionsType<P>) : ZoidComponent<P> {\n    setupPostRobot();\n\n    const component : Component<P> = new Component(options);\n\n    const init = (props) => component.init(props);\n    init.driver = (name, dep) => component.driver(name, dep);\n    init.isChild = () => component.isChild();\n    init.canRenderTo = (win) => component.canRenderTo(win);\n    init.xprops = component.xprops;\n    \n    return init;\n}\n\nexport function destroyAll() : ZalgoPromise<void> {\n    if (bridge) {\n        bridge.destroyBridges();\n    }\n\n    const results = [];\n\n    const global = getGlobal();\n    global.activeComponents = global.activeComponents || [];\n    while (global.activeComponents.length) {\n        results.push(global.activeComponents[0].destroy(new Error(`zoid destroyed all`), false));\n    }\n\n    return ZalgoPromise.all(results).then(noop);\n}\n\nexport const destroyComponents = destroyAll;\n\nexport function destroy() {\n    destroyAll();\n    destroyGlobal();\n    destroyPostRobot();\n}\n","/* @flow */\n\nimport { isPerc, isPx, values } from 'belter/src';\n\nimport { CONTEXT, PROP_TYPE } from '../constants';\n\nimport type { ComponentOptionsType } from './index';\n\nfunction validatePropDefinitions<P>(options : ComponentOptionsType<P>) {\n\n    if (options.props && !(typeof options.props === 'object')) {\n        throw new Error(`Expected options.props to be an object`);\n    }\n\n    const PROP_TYPE_LIST = values(PROP_TYPE);\n\n    if (options.props) {\n        for (const key of Object.keys(options.props)) {\n            const prop = options.props[key];\n\n            if (!prop || !(typeof prop === 'object')) {\n                throw new Error(`Expected options.props.${ key } to be an object`);\n            }\n\n            if (!prop.type) {\n                throw new Error(`Expected prop.type`);\n            }\n\n            if (PROP_TYPE_LIST.indexOf(prop.type) === -1) {\n                throw new Error(`Expected prop.type to be one of ${ PROP_TYPE_LIST.join(', ') }`);\n            }\n\n            if (prop.required && prop.default) {\n                throw new Error(`Required prop can not have a default value`);\n            }\n\n            if (prop.type === PROP_TYPE.FUNCTION && prop.queryParam && !prop.queryValue) {\n                throw new Error(`Do not pass queryParam for function prop`);\n            }\n        }\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function validate<P>(options : ?ComponentOptionsType<P>) { // eslint-ignore-line\n\n    if (!options) {\n        throw new Error(`Expected options to be passed`);\n    }\n\n    // eslint-disable-next-line security/detect-unsafe-regex, unicorn/no-unsafe-regex\n    if (!options.tag || !options.tag.match(/^([a-z0-9][a-z0-9-]*)+[a-z0-9]+$/)) {\n        throw new Error(`Invalid options.tag: ${ options.tag }`);\n    }\n\n    validatePropDefinitions(options);\n\n    if (options.dimensions) {\n        if (options.dimensions && !isPx(options.dimensions.width) && !isPerc(options.dimensions.width)) {\n            throw new Error(`Expected options.dimensions.width to be a px or % string value`);\n        }\n\n        if (options.dimensions && !isPx(options.dimensions.height) && !isPerc(options.dimensions.height)) {\n            throw new Error(`Expected options.dimensions.height to be a px or % string value`);\n        }\n    }\n\n    if (options.defaultContext) {\n        if (options.defaultContext !== CONTEXT.IFRAME && options.defaultContext !== CONTEXT.POPUP) {\n            throw new Error(`Unsupported context type: ${ options.defaultContext || 'unknown' }`);\n        }\n    }\n\n    if (!options.url) {\n        throw new Error(`Must pass url`);\n    }\n\n    if (typeof options.url !== 'string' && typeof options.url !== 'function') {\n        throw new TypeError(`Expected url to be string or function`);\n    }\n\n    if (options.prerenderTemplate && typeof options.prerenderTemplate !== 'function') {\n        throw new Error(`Expected options.prerenderTemplate to be a function`);\n    }\n\n    if ((options.containerTemplate || !__ZOID__.__DEFAULT_CONTAINER__) && typeof options.containerTemplate !== 'function') {\n        throw new Error(`Expected options.containerTemplate to be a function`);\n    }\n}\n","/* @flow */\n\nexport { PopupOpenError } from 'belter/src';\nexport { create, destroy, destroyComponents, destroyAll, Component } from './component';\nexport type { ZoidComponent, ZoidComponentInstance } from './component';\nexport type { RenderOptionsType } from './parent';\nexport { PROP_TYPE, PROP_SERIALIZATION, CONTEXT, EVENT } from './constants';\n"],"sourceRoot":""}