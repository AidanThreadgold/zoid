{"version":3,"sources":["webpack://zoid/webpack/universalModuleDefinition","webpack://zoid/webpack/bootstrap","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://zoid/./node_modules/zalgo-promise/src/utils.js","webpack://zoid/./node_modules/zalgo-promise/src/exceptions.js","webpack://zoid/./node_modules/zalgo-promise/src/flush.js","webpack://zoid/./node_modules/zalgo-promise/src/promise.js","webpack://zoid/./node_modules/cross-domain-utils/src/util.js","webpack://zoid/./node_modules/cross-domain-utils/src/constants.js","webpack://zoid/./node_modules/cross-domain-utils/src/utils.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://zoid/./node_modules/belter/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://zoid/./node_modules/belter/src/dom.js","webpack://zoid/./node_modules/belter/src/css.js","webpack://zoid/./node_modules/post-robot/src/global.js","webpack://zoid/./node_modules/post-robot/src/lib/hello.js","webpack://zoid/./node_modules/post-robot/src/conf/constants.js","webpack://zoid/./node_modules/post-robot/src/lib/windows.js","webpack://zoid/./node_modules/universal-serialize/src/common.js","webpack://zoid/./node_modules/universal-serialize/src/constants.js","webpack://zoid/./node_modules/universal-serialize/src/serialize.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/function.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/error.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/promise.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/regex.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/date.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/array.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/object.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/string.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/number.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/null.js","webpack://zoid/./node_modules/universal-serialize/src/deserialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/window.js","webpack://zoid/./node_modules/post-robot/src/bridge/common.js","webpack://zoid/./node_modules/post-robot/src/serialize/function.js","webpack://zoid/./node_modules/post-robot/src/serialize/serialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/promise.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/strategies.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/index.js","webpack://zoid/./node_modules/post-robot/src/drivers/listeners.js","webpack://zoid/./node_modules/post-robot/src/lib/compat.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/types.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/index.js","webpack://zoid/./node_modules/post-robot/src/public/on.js","webpack://zoid/./node_modules/post-robot/src/public/send.js","webpack://zoid/./node_modules/post-robot/src/conf/config.js","webpack://zoid/./node_modules/post-robot/src/setup.js","webpack://zoid/./src/lib/global.js","webpack://zoid/./src/lib/serialize.js","webpack://zoid/./src/constants.js","webpack://zoid/./src/child/props.js","webpack://zoid/./src/child/window.js","webpack://zoid/./src/child/child.js","webpack://zoid/./src/parent/props.js","webpack://zoid/./src/parent/parent.js","webpack://zoid/./node_modules/post-robot/src/clean.js","webpack://zoid/./src/component/templates/container.js","webpack://zoid/./src/component/props.js","webpack://zoid/./src/component/component.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","isPromise","item","Promise","window","Window","constructor","toString","then","err","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","Error","dispatch","setTimeout","indexOf","push","j","dispatchPossiblyUnhandledError","asyncReject","chain","firstPromise","secondPromise","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","clearTimeout","toPromise","TypeError","all","promises","count","results","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","isRegex","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","location","protocol","getParent","parent","getOpener","opener","canReadFromWindow","getActualDomain","PROTOCOL","host","getDomain","domain","mockDomain","isSameDomain","desc","getOwnPropertyDescriptor","isActuallySameDomain","assertSameDomain","isAncestorParent","child","childParent","getParents","getFrames","frames","len","frame","getAllChildFrames","getTop","top","getAllFramesInWindow","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getAncestor","anyMatch","collection1","collection2","item1","getDistanceFromTop","distance","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","onCloseWindow","callback","maxtime","Infinity","check","isWindow","obj","__cross_domain_utils_window_check__","closeWindow","close","objectIDs","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","getFunctionName","fn","__name__","displayName","setFunctionName","base64encode","str","btoa","encodeURIComponent","replace","p1","String","fromCharCode","parseInt","Buffer","from","uniqueID","chars","charAt","floor","Date","toISOString","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","awaitFrameLoadPromises","memoizedFunctions","memoize","options","cacheMap","memoizedFunction","cache","thisNamespace","cacheTime","now","reset","memoizePromise","memoizedPromiseFunction","inlineMemoize","logic","__inline_memoize_cache__","noop","once","called","stringifyError","level","newErr","extend","safeInterval","loop","arrayFrom","isDefined","cleanup","tasks","cleaned","register","task","shift","assertExists","thing","isDocumentReady","document","body","readyState","urlEncode","waitForDocumentReady","interval","setInterval","clearInterval","parseQuery","queryString","params","pair","decodeURIComponent","extendQuery","originalQuery","props","filter","appendChild","container","isElement","element","Element","nodeType","style","getElementSafe","id","querySelector","PopupOpenError","awaitFrameLoad","addEventListener","cleanIframes","linkFrameWindow","awaitFrameWindow","loadedFrame","iframe","tag","el","styleText","createElement","class","className","setAttribute","attributes","styleSheet","cssText","createTextNode","html","innerHTML","allowTransparency","backgroundColor","border","isIE","navigator","userAgent","hasAttribute","getElement","event","removeEventListener","showElement","setProperty","hideElement","destroyElement","removeChild","isElementClosed","onResize","width","height","currentWidth","offsetWidth","currentHeight","offsetHeight","observer","newWidth","newHeight","ResizeObserver","observe","MutationObserver","childList","subtree","characterData","disconnect","isShadowElement","toPx","toNum","toCSS","test","getGlobal","clear","prototype","getObj","globalStore","defStore","store","storeKey","defVal","del","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","resolveHelloPromise","helloPromises","existingPromise","newPromise","sayHello","send","instanceID","data","getWindowInstanceID","markWindowKnown","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","code","toJSON","defaultSerializers","DESERIALIZER","RegExp","defaultDeserializers","cleanupProxyWindows","idToProxyWindow","shouldClean","getSerializedWindow","winPromise","windowNamePromise","getType","getName","focus","isClosed","setLocation","href","setName","sameDomain","frameElement","querySelectorAll","getFrameForWindow","ProxyWindow","serializedWindow","isProxyWindow","actualWindow","actualWindowPromise","getID","setWindow","isPopup","isPopupPromise","getNamePromise","reopenPromise","open","focusPromise","getWindow","awaitWindow","matchWindow","proxyInstanceID","knownWindowInstanceID","unwrap","serialize","toProxyWindow","deserialize","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","on","meth","methodSource","arg","__id__","serializeMessage","serializers","serializer","serializePromise","deserializeMessage","deserializers","parse","deserializer","serializedPromise","deserializePromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","fireAndForget","__origin__","__source__","deserializeFunction","SEND_MESSAGE_STRATEGIES","sendMessage","serializedMessage","strategies","errors","strategyName","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","listener","regex","dom","forEach","postMessage","mockUserAgent","getUserAgent","foreignGlobal","receiveMessage","RECEIVE_MESSAGE_TYPES","logName","sendResponse","ack","response","pathname","handleError","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","existingListener","regexListeners","regexListener","strDomain","errorHandler","responseTimeout","childTimeout","validateOptions","actualParent","isAncestor","getHelloPromise","awaitWindowHello","targetDomain","actualDomain","normalizedDomain","normalizeDomain","responseListener","addResponseListener","reqPromises","markResponseListenerErrored","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cancelled","max","internalSerializeMessage","internalDeserializeMessage","getProxyObject","PROP_TYPE","STRING","OBJECT","FUNCTION","BOOLEAN","NUMBER","ARRAY","PROP_SERIALIZATION","DOTIFY","BASE64","CONTEXT","EVENT","RENDER","RENDERED","DISPLAY","ERROR","CLOSE","DESTROY","PROPS","RESIZE","FOCUS","normalizeChildProp","propsDef","helpers","prop","childDecorate","onProps","resize","getParentDomain","show","hide","parseChildWindowName","windowName","zoidcomp","encodedPayload","atob","charCodeAt","base64decode","getChildPayload","destroy","getQueryParam","queryParam","getQueryValue","queryValue","parentComponent","overrides","parentWin","triggered","currentProxyWin","currentProxyContainer","childComponent","containerTemplate","prerenderTemplate","dimensions","autoResize","domainMatch","initPromise","handledErrors","clean","state","eventName","handlerList","trigger","triggerOnce","visible","onErrorOverride","getProxyContainerOverride","getProxyContainer","showOverride","hideOverride","closeOverride","renderContainerOverride","renderContainer","getProxyWindowOverride","getProxyWindow","setProxyWinOverride","setProxyWin","openFrameOverride","openFrame","openPrerenderFrameOverride","openPrerenderFrame","prerenderOverride","prerender","openOverride","openPrerenderOverride","openPrerender","watchForUnloadOverride","watchForUnload","getPropsForChild","sendToChild","windowProp","proxyWin","containerElement","shadowHost","shadowRoot","getShadowRoot","getShadowHost","slotName","slot","slotProvider","insertShadowSlot","getPropsRef","childDomain","propRef","getUrl","getChildDomain","getDomainMatcher","title","proxyPrerenderFrame","prerenderFrame","prerenderFrameWindow","getWindowRef","windows","initChild","childExports","proxyFrame","frameWatcher","cleanUpWindow","unloadWindowListener","closeParentWindowListener","checkWindowClose","secondIsClosed","renderTemplate","renderer","proxyPrerenderWin","prerenderWindow","isBlankDomain","tagName","children","writeElementToWindow","proxyContainer","innerContainer","getHelpers","updateProps","setProps","newProps","isUpdate","inputProps","propNames","aliases","propDef","alias","default","decorate","required","extendProps","init","onRender","onDisplay","onRendered","onClose","onDestroy","onFocus","render","ZOID","checkAllowRender","delegatePromise","delegateProps","propName","allowDelegate","childOverridesPromise","POST_MESSAGE","getDelegateOverrides","childOverrides","delegate","watchForUnloadPromise","buildUrlPromise","serialization","dotify","prefix","newobj","every","dotkey","propsToQuery","query","originalUrl","originalHash","hashString","extendUrl","normalizeMockUrl","onRenderPromise","getProxyContainerPromise","getProxyWindowPromise","buildWindowNamePromise","childPayload","version","__ZOID__","parentDomain","checkClose","buildWindowName","openFramePromise","openPrerenderFramePromise","renderContainerPromise","openPromise","openPrerenderPromise","setStatePromise","prerenderPromise","setWindowNamePromise","loadUrlPromise","builtUrl","watchForClosePromise","watchForClose","onDisplayPromise","openBridgePromise","runTimeoutPromise","onRenderedPromise","defaultContainerTemplate","div","cspNonce","classList","add","remove","defaultNoop","decorateOnce","component","bridgeUrl","allowedParentDomains","defaultContext","validate","logger","info","normalizeOptions","isChild","payload","registerChild","xprops","components","onPropHandlers","propsRef","parentComponentWindow","ref","getNthParent","ancestor","getParentComponentWindow","normalizedProps","normalizeChildProps","checkParentDomain","getAutoResize","getProps","getPropsByRef","getDefaultContext","finalContext","getDefaultContainer","renderTo","driver","driverName","dep","canRenderTo","initialized","sourceElement","originalEvent","messageListener","listenForMessages","initHello","comp","destroyAll","destroyPromise","destroyComponents","responseListeners","cancelResponseListeners"],"mappings":"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","file":"zoid.frame.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"zoid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zoid\"] = factory();\n\telse\n\t\troot[\"zoid\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.Window === 'function' && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && typeof window.constructor === 'function' && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers : Array<(mixed, promise? : ZalgoPromise<mixed>) => void> = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<mixed>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            // $FlowFixMe\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        const chain = <T>(firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                secondPromise.resolve(res);\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    chain(result, promise);\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        const chain = <T>(i : number, firstPromise : ZalgoPromise<T>, secondPromise : ZalgoPromise<T>) => {\n            return firstPromise.then(res => {\n                results[i] = res;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                secondPromise.reject(err);\n            });\n        };\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            chain(i, ZalgoPromise.resolve(prom), promise);\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : Object>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win? : SameDomainWindowType = window) : string {\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win? : SameDomainWindowType = window) : string {\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : $ReadOnlyArray<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    let result = [ ...getAllChildFrames(top), top ];\n\n    // Win may be in shadow dom\n    if (result.indexOf(win) === -1) {\n        result = [ ...result, win, ...getAllChildFrames(win) ];\n    }\n\n    return result;\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        let parent = frame;\n\n        while (parent.parentNode && parent.parentNode !== parent) {\n            parent = parent.parentNode;\n        }\n\n        // $FlowFixMe\n        if (!parent.host || !doc.documentElement.contains(parent.host)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getOpener(win));\n}\n\nexport function isIframe(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(getParent(win));\n}\n\nexport function isFullpage(win? : CrossDomainWindowType = window) : boolean {\n    return Boolean(!isIframe(win) && !isPopup(win));\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (noop(obj === obj) === '__unlikely_value__') { // eslint-disable-line no-self-compare\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (obj && obj.__cross_domain_utils_window_check__ === '__unlikely_value__') {\n            return false;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n\nexport function closeWindow(win : CrossDomainWindowType) {\n    try {\n        win.close();\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getFrameForWindow(win : CrossDomainWindowType) : ?HTMLElement {\n    if (isSameDomain(win)) {\n        return assertSameDomain(win).frameElement;\n    }\n\n    for (const frame of document.querySelectorAll('iframe')) {\n        if (frame && frame.contentWindow && frame.contentWindow === win) {\n            return frame;\n        }\n    }\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : ?WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let name = this.name;\n                let entry = key[name];\n\n                if (entry && entry[0] === key) {\n                    entry[1] = value;\n                } else {\n                    Object.defineProperty(key, name, {\n                        value:    [ key, value ],\n                        writable: true\n                    });\n                }\n\n                return;\n\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let values = this.values;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[index] = value;\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n                \n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return entry[1];\n                }\n\n                return;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index === -1) {\n            return;\n        }\n\n        return this.values[index];\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    entry[0] = entry[1] = undefined;\n                }\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let keys = this.keys;\n        let index = safeIndexOf(keys, key);\n\n        if (index !== -1) {\n            keys.splice(index, 1);\n            this.values.splice(index, 1);\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (this.isSafeToReadWrite(key)) {\n            try {\n                let entry = key[this.name];\n\n                if (entry && entry[0] === key) {\n                    return true;\n                }\n\n                return false;\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this._cleanupClosedWindows();\n\n        let index = safeIndexOf(this.keys, key);\n        return index !== -1;\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function getFunctionName <T : Function>(fn : T) : string {\n    return fn.name || fn.__name__ || fn.displayName || 'anonymous';\n}\n\nexport function setFunctionName <T : Function>(fn : T, name : string) : T {\n    try {\n        delete fn.name;\n        fn.name = name;\n    } catch (err) {\n        // pass\n    }\n\n    fn.__name__ = fn.displayName = name;\n    return fn;\n}\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, (m, p1) => {\n            return String.fromCharCode(parseInt(p1, 16));\n        }));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof atob === 'function') {\n        return decodeURIComponent(Array.prototype.map.call(atob(str), c => {\n            // eslint-disable-next-line prefer-template\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    const chars = '0123456789abcdef';\n\n    const randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    const timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs<T>(args : $ReadOnlyArray<T>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\ntype MemoizeOptions = {|\n    name? : string,\n    time? : number,\n    thisNamespace? : boolean\n|};\n\nconst getDefaultMemoizeOptions = () : MemoizeOptions => {\n    // $FlowFixMe\n    return {};\n};\n\nconst memoizedFunctions = [];\n\nexport function memoize<F : Function>(method : F, options? : MemoizeOptions = getDefaultMemoizeOptions()) : F & {| reset : () => void |} {\n    const cacheMap = new WeakMap();\n\n    const memoizedFunction = function memoizedFunction(...args) : mixed {\n        const cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        const key : string = serializeArgs(args);\n\n        const cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        const time  = Date.now();\n        const value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    };\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    memoizedFunctions.push(memoizedFunction);\n\n    // $FlowFixMe\n    const result : F = memoizedFunction;\n\n    return setFunctionName(result, `${ options.name || getFunctionName(method) }::memoized`);\n}\n\nmemoize.clear = () => {\n    for (const memoizedFunction of memoizedFunctions) {\n        memoizedFunction.reset();\n    }\n};\n\nexport function promiseIdentity<T : mixed>(item : ZalgoPromise<T> | T) : ZalgoPromise<T> {\n    // $FlowFixMe\n    return ZalgoPromise.resolve(item);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : $ReadOnlyArray<any>) : ZalgoPromise<R> {\n        const key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = ZalgoPromise.try(() => method.apply(this, arguments))\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return setFunctionName(memoizedPromiseFunction, `${ getFunctionName(method) }::promiseMemoized`);\n}\n\ntype PromisifyOptions = {|\n    name ? : string\n|};\n\nconst getDefaultPromisifyOptions = () : PromisifyOptions => {\n    // $FlowFixMe\n    return {};\n};\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : $ReadOnlyArray<any>) => R, options : PromisifyOptions = getDefaultPromisifyOptions()) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return setFunctionName(promisifiedFunction, `${ getFunctionName(method) }::promisified`);\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : $ReadOnlyArray<any>) => R, logic : (...args : $ReadOnlyArray<any>) => R, args : $ReadOnlyArray<any> = []) : R {\n    // $FlowFixMe\n    const cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    const key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    const result = cache[key] = logic(...args);\n\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : $ReadOnlyArray<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    const onceFunction = function() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n\n    return setFunctionName(onceFunction, `${ getFunctionName(method) }::once`);\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    const regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            const stack = err && err.stack;\n            const message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (err && err.toString && typeof err.toString === 'function') {\n            // $FlowFixMe\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) {\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    const defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && item.toString && typeof item.toString === 'function') {\n        // $FlowFixMe\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    const index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    const original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    // eslint-disable-next-line compat/compat\n    if (Object.assign) {\n        // eslint-disable-next-line compat/compat\n        return Object.assign(obj, source);\n    }\n\n    for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : $ReadOnlyArray<T> {\n    const result = [];\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : $ReadOnlyArray<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : $ReadOnlyArray<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : $ReadOnlyArray<T> {\n    const results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    const result = {};\n\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : $ReadOnlyArray<string> {\n    const result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    const promiseDebounced = function() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        const localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n\n    return setFunctionName(promiseDebounced, `${ getFunctionName(method) }::promiseDebounced`);\n}\n\nexport function safeInterval(method : Function, time : number) : {| cancel : () => void |} {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (const key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    const result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, -2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        const parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            const part = parts[i];\n            const isLast = (i + 1 === parts.length);\n            const isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (part === 'constructor' || part === 'prototype' || part === '__proto__') {\n                throw new Error(`Disallowed key: ${ part }`);\n            }\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {|\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    reset : () => void\n|};\n\nexport function eventEmitter() : EventEmitterType {\n    const triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            const handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            const listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            const handlerList = handlers[eventName];\n            const promises = [];\n\n            if (handlerList) {\n                for (const handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        },\n\n        reset() {\n            handlers = {};\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    const pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    const interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | $ReadOnlyArray<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            const value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function arrayFrom<T>(item : Iterable<T>) : $ReadOnlyArray<T> { // eslint-disable-line no-undef\n    return Array.prototype.slice.call(item);\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    const constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    const prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : $ReadOnlyArray<mixed> | Object> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        const length = item.length;\n        const result : Array<mixed> = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                const itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                const el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        const result = {};\n\n        for (const key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                const itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                const el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        const descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {|\n    text : string,\n    groups : $ReadOnlyArray<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n|};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    const result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    const index : number = result.index;\n    const regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : $ReadOnlyArray<RegexResultType> {\n\n    const matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : $ReadOnlyArray<mixed>) => T, time : number = 100) : (...args : $ReadOnlyArray<mixed>) => void {\n\n    let timeout;\n\n    const debounceWrapper = function() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n\n    return setFunctionName(debounceWrapper, `${ getFunctionName(method) }::debounced`);\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport const weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : $ReadOnlyArray<any>) => R) => {\n\n    const weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport const weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : $ReadOnlyArray<any>) => ZalgoPromise<R>) => {\n\n    const weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            }));\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.shift();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\n// eslint-disable-next-line flowtype/no-mutable-array\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n                            \n    return thing;\n}\n\nexport function unique(arr : $ReadOnlyArray<string>) : $ReadOnlyArray<string> {\n    const result = {};\n    for (const item of arr) {\n        result[item] = true;\n    }\n    return Object.keys(result);\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval, uniqueID, arrayFrom } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            const interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        const params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : {| query? : { [string] : string }, hash? : { [string] : string } |}) : string {\n\n    const query = options.query || {};\n    const hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    const queryString = extendQuery(originalQuery, query);\n    const hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    const meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function getPerformance() : ?Performance {\n    return inlineMemoize(getPerformance, () : ?Performance => {\n        // eslint-disable-next-line compat/compat\n        const performance = window.performance;\n\n        if (\n            performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        ) {\n            return performance;\n        }\n    });\n}\n\nexport function enablePerformance() : boolean {\n    return Boolean(getPerformance());\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n        const performance = getPerformance();\n\n        if (!performance) {\n            return;\n        }\n        \n        const timing = performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : $ReadOnlyArray<HTMLElement> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : HTMLElement, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER || event.keyCode === KEY_CODES.SPACE) { // eslint-disable-line unicorn/prefer-event-key\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : {| host? : string, path : string |}) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        const url = `${ host }${ path }`;\n        const scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (const script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            const src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                const value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                const result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : $ReadOnlyArray<{| country? : string, lang : string |}> {\n    const nav = window.navigator;\n\n    const locales = nav.languages\n        ? [ ...nav.languages ]\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            const [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    const element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        const name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        const interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    const { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    if (width && height) {\n        // $FlowFixMe\n        options = {\n            top,\n            left,\n            width,\n            height,\n            status:     1,\n            toolbar:    0,\n            menubar:    0,\n            resizable:  1,\n            scrollbars: 1,\n            ...options\n        };\n    }\n\n    const name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    const params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key] !== null && options[key] !== undefined) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        const err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    const tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    const documentElement = win.document.documentElement;\n\n    for (const child of arrayFrom(documentElement.children)) {\n        documentElement.removeChild(child);\n    }\n\n    for (const child of arrayFrom(el.children)) {\n        documentElement.appendChild(child);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {|\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?$ReadOnlyArray<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n|};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        const promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    const promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nconst getDefaultCreateElementOptions = () : ElementOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = getDefaultCreateElementOptions(), container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    const element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (const key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {|\n    style? : {| [ string ] : string |},\n    class? : ?$ReadOnlyArray<string>,\n    attributes? : {| [ string ] : string |},\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n|};\n\nconst getDefaultIframeOptions = () : IframeElementOptionsType => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function iframe(options : IframeElementOptionsType = getDefaultIframeOptions(), container : ?HTMLElement) : HTMLIFrameElement {\n\n    const attributes = options.attributes || {};\n    const style = options.style || {};\n\n    const frame = createElement('iframe', {\n        attributes: {\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            border:          'none',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    const isIE = window.navigator.userAgent.match(/MSIE|Edge/i);\n\n    if (!frame.hasAttribute('id')) {\n        frame.setAttribute('id', uniqueID());\n    }\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        const el = getElement(container);\n        el.appendChild(frame);\n    }\n\n    if (options.url || isIE) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : $ReadOnlyArray<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (const eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (const eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    const capitalizedName = capitalizeFirstLetter(name);\n\n    for (const prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        const el = getElement(element);\n\n        if (!el) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        // eslint-disable-next-line prefer-const\n        let startTimeout;\n        let endTimeout;\n        // eslint-disable-next-line prefer-const\n        let startEvent;\n        // eslint-disable-next-line prefer-const\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', 'hidden', 'important');\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', 'none', 'important');\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    const animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (const script of querySelectorAll('script', el)) {\n        const parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        const newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({| width : number, height : number |}) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {| cancel : () => void |} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    const check = () => {\n        const newWidth = el.offsetWidth;\n        const newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        const loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function getResourceLoadTime(url : string) : ?number {\n    const performance = getPerformance();\n\n    if (!performance) {\n        return;\n    }\n\n    if (typeof performance.getEntries !== 'function') {\n        return;\n    }\n\n    const entries = performance.getEntries();\n\n    for (let i = 0; i < entries.length; i++) {\n        const entry = entries[i];\n\n        if (entry && entry.name && entry.name.indexOf(url) === 0 && typeof entry.duration === 'number') {\n            return Math.floor(entry.duration);\n        }\n    }\n}\n\nexport function isShadowElement(element : Node) : boolean {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    return element.toString() === '[object ShadowRoot]';\n}\n\nexport function getShadowRoot(element : Node) : ?Node {\n    while (element.parentNode) {\n        element = element.parentNode;\n    }\n\n    if (isShadowElement(element)) {\n        return element;\n    }\n}\n\nexport function getShadowHost(element : Node) : ?HTMLElement {\n    const shadowRoot = getShadowRoot(element);\n\n    // $FlowFixMe\n    if (shadowRoot.host) {\n        // $FlowFixMe\n        return shadowRoot.host;\n    }\n}\n\nexport function insertShadowSlot(element : HTMLElement) : HTMLElement {\n    const shadowHost = getShadowHost(element);\n\n    if (!shadowHost) {\n        throw new Error(`Element is not in shadow dom`);\n    }\n\n    if (isShadowElement(shadowHost)) {\n        throw new Error(`Host element is also in shadow dom`);\n    }\n\n    const slotName = `shadow-slot-${ uniqueID() }`;\n\n    const slot = document.createElement('slot');\n    slot.setAttribute('name', slotName);\n    element.appendChild(slot);\n    \n    const slotProvider = document.createElement('div');\n    slotProvider.setAttribute('slot', slotName);\n    shadowHost.appendChild(slotProvider);\n\n    return slotProvider;\n}\n","/* @flow */\n\nexport function isPerc(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+%$/).test(str);\n}\n\nexport function isPx(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+px$/).test(str);\n}\n\nexport function toNum(val : string | number) : number {\n\n    if (typeof val === 'number') {\n        return val;\n    }\n\n    const match = val.match(/^([0-9]+)(px|%)$/);\n\n    if (!match) {\n        throw new Error(`Could not match css value from ${ val }`);\n    }\n\n    return parseInt(match[1], 10);\n}\n\nexport function toPx(val : number | string) : string {\n    return `${ toNum(val) }px`;\n}\n\nexport function toCSS(val : number | string) : string {\n\n    if (typeof val === 'number') {\n        return toPx(val);\n    }\n\n    return isPerc(val) ? val : toPx(val);\n}\n\nexport function percOf(num : number, perc : string) : number {\n    return parseInt(num * toNum(perc)  / 100, 10);\n}\n\nexport function normalizeDimension(dim : string | number, max : number) : number {\n    if (typeof dim === 'number') {\n        return dim;\n    } else if (isPerc(dim)) {\n        return percOf(max, dim);\n    } else if (isPx(dim)) {\n        return toNum(dim);\n    } else {\n        throw new Error(`Can not normalize dimension: ${ dim }`);\n    }\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\nexport function deleteGlobal() {\n    delete window[__POST_ROBOT__.__GLOBAL_KEY__];\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction resolveHelloPromise(win : CrossDomainWindowType, { domain }) : ZalgoPromise<{ domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    const existingPromise = helloPromises.get(win);\n    if (existingPromise) {\n        existingPromise.resolve({ domain });\n    }\n    const newPromise = ZalgoPromise.resolve({ domain });\n    helloPromises.set(win, newPromise);\n    return newPromise;\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        resolveHelloPromise(source, { domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            resolveHelloPromise(win, { domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nimport { serializeObject } from './object';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void,\n    data : mixed\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code, data } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code, data });\n}\n\nexport function deserializeError({ message, stack, code, data } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n\n    if (data) {\n        // $FlowFixMe\n        error.data = serializeObject(data);\n    }\n\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, closeWindow,\n    type DomainMatcher, getOpener, WINDOW_TYPE, isWindow, assertSameDomain, getFrameForWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedWindowType = {|\n    id : string,\n    getType : () => ZalgoPromise<$Values<typeof WINDOW_TYPE>>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    getName : () => ZalgoPromise<?string>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nfunction getSerializedWindow(winPromise : ZalgoPromise<CrossDomainWindowType>, { send, id = uniqueID() } : { send : SendType, id? : string }) : SerializedWindowType {\n    \n    let windowNamePromise = winPromise.then(win => {\n        if (isSameDomain(win)) {\n            return assertSameDomain(win).name;\n        }\n    });\n    \n    return {\n        id,\n        getType: () => winPromise.then(win => {\n            return getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME;\n        }),\n        getInstanceID: memoizePromise(() => winPromise.then(win => getWindowInstanceID(win, { send }))),\n        close:         () => winPromise.then(closeWindow),\n        getName:       () => winPromise.then(win => {\n            if (isWindowClosed(win)) {\n                return;\n            }\n\n            if (isSameDomain(win)) {\n                return assertSameDomain(win).name;\n            }\n\n            return windowNamePromise;\n        }),\n        focus:   () => winPromise.then(win => {\n            win.focus();\n        }),\n        isClosed: () => winPromise.then(win => {\n            return isWindowClosed(win);\n        }),\n        setLocation: (href) => winPromise.then(win => {\n            if (isSameDomain(win)) {\n                try {\n                    if (win.location && typeof win.location.replace === 'function') {\n                        // $FlowFixMe\n                        win.location.replace(href);\n                        return;\n                    }\n                } catch (err) {\n                    // pass\n                }\n            }\n\n            win.location = href;\n        }),\n        setName: (name) => winPromise.then(win => {\n            if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                linkWindow({ win, name });\n            }\n\n            const sameDomain = isSameDomain(win);\n            const frame = getFrameForWindow(win);\n\n            if (!sameDomain) {\n                throw new Error(`Can not set name for cross-domain window: ${ name }`);\n            }\n\n            assertSameDomain(win).name = name;\n            if (frame) {\n                frame.setAttribute('name', name);\n            }\n\n            windowNamePromise = ZalgoPromise.resolve(name);\n        })\n    };\n}\n\nexport class ProxyWindow {\n\n    id : string\n    isProxyWindow : true = true\n    serializedWindow : SerializedWindowType\n    actualWindow : ?CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n    name : string\n\n    constructor({ send, win, serializedWindow } : { win? : CrossDomainWindowType, serializedWindow? : SerializedWindowType, send : SendType }) {\n        this.actualWindowPromise = new ZalgoPromise();\n        this.serializedWindow = serializedWindow || getSerializedWindow(this.actualWindowPromise, { send });\n        globalStore('idToProxyWindow').set(this.getID(), this);\n        if (win) {\n            this.setWindow(win, { send });\n        }\n    }\n\n    getID() : string {\n        return this.serializedWindow.id;\n    }\n\n    getType() : ZalgoPromise<$Values<typeof WINDOW_TYPE>> {\n        return this.serializedWindow.getType();\n    }\n\n    isPopup() : ZalgoPromise<boolean> {\n        return this.getType().then(type => {\n            return type === WINDOW_TYPE.POPUP;\n        });\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setLocation(href).then(() => this);\n    }\n\n    getName() : ZalgoPromise<?string> {\n        return this.serializedWindow.getName();\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.setName(name).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return this.serializedWindow.close().then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        const isPopupPromise = this.isPopup();\n        const getNamePromise = this.getName();\n\n        const reopenPromise = ZalgoPromise.hash({ isPopup: isPopupPromise, name: getNamePromise }).then(({ isPopup, name }) => {\n            if (isPopup && name) {\n                window.open('', name);\n            }\n        });\n        const focusPromise = this.serializedWindow.focus();\n\n        return ZalgoPromise.all([\n            reopenPromise,\n            focusPromise\n        ]).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return this.serializedWindow.isClosed();\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType, { send } : { send : SendType }) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(this.actualWindow);\n        this.serializedWindow = getSerializedWindow(this.actualWindowPromise, { send, id: this.getID() });\n        windowStore('winToProxyWindow').set(win, this);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.hash({\n                proxyInstanceID:       this.getInstanceID(),\n                knownWindowInstanceID: getWindowInstanceID(win, { send })\n            }).then(({ proxyInstanceID, knownWindowInstanceID }) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win, { send });\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        return this.serializedWindow.getInstanceID();\n    }\n\n    shouldClean() : boolean {\n        return Boolean(this.actualWindow && isWindowClosed(this.actualWindow));\n    }\n\n    serialize() : SerializedWindowType {\n        return this.serializedWindow;\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedWindowType {\n        cleanupProxyWindows();\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        return globalStore('idToProxyWindow').get(serializedWindow.id) || new ProxyWindow({ serializedWindow, send });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        const actualWindow : CrossDomainWindowType = win;\n        \n        return windowStore('winToProxyWindow').get(actualWindow) || new ProxyWindow({ win: actualWindow, send });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedWindowType>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedWindowType, { send } : { send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { send });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\ntype SendMessageType = {|\n    (string) : void,\n    fireAndForget : (string) => void\n|};\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : SendMessageType) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex, arrayFrom } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction stringifyArguments(args : $ReadOnlyArray<mixed> = []) : string {\n    return arrayFrom(args).map(arg => {\n        if (typeof arg === 'string') {\n            return `'${ arg }'`;\n        }\n        if (arg === undefined) {\n            return 'undefined';\n        }\n        if (arg === null) {\n            return 'null';\n        }\n        if (typeof arg === 'boolean') {\n            return arg.toString();\n        }\n        if (Array.isArray(arg)) {\n            return '[ ... ]';\n        }\n        if (typeof arg === 'object') {\n            return '{ ... }';\n        }\n        if (typeof arg === 'function') {\n            return '() => { ... }';\n        }\n        return `<${ typeof arg }>`;\n    }).join(', ');\n}\n\nfunction listenForFunctionCalls({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source, { send }).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    // $FlowFixMe\n                    if (err.stack) {\n                        // $FlowFixMe\n                        err.stack = `Remote call to ${ name }(${ stringifyArguments(data.args) }) failed\\n\\n${ err.stack }`;\n                    }\n\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype SerializableFunction<T> = {\n    () : ZalgoPromise<T> | T,\n    __id__? : string,\n    __name__? : string\n};\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : SerializableFunction<T>, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedFunction {\n    listenForFunctionCalls({ on, send });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    let name = val.__name__ || val.name || key;\n\n    if (typeof name === 'string' && typeof name.indexOf === 'function' && name.indexOf('anonymous::') === 0) {\n        name = name.replace('anonymous::', `${ key }::`);\n    }\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    // $FlowFixMe\n                    const options = { domain: origin, fireAndForget: opts.fireAndForget };\n                    const args = Array.prototype.slice.call(arguments);\n\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args }, options)\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `Remote call to ${ name }(${ stringifyArguments(arguments) }) failed\\n\\n${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (__TEST__) {\n            if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n                if (window.location.protocol === PROTOCOL.FILE) {\n                    return WILDCARD;\n                }\n\n                if (!isActuallySameDomain(win)) {\n                    throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n                }\n\n                // $FlowFixMe\n                const windowDomain = getDomain(win);\n                \n                if (windowDomain !== dom) {\n                    throw new Error(`Mock domain target ${ dom } does not match window domain ${ windowDomain }`);\n                }\n\n                // $FlowFixMe\n                return getActualDomain(win);\n\n            }\n        }\n        \n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            throw new Error(`Bridge not needed for browser`);\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            throw new Error(`Global messaging not needed for browser`);\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { isWindowClosed, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, stringifyError } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id:     uniqueID(),\n            origin: getDomain(window),\n            ...message\n        }\n    }, { on, send });\n\n    const strategies = Object.keys(SEND_MESSAGE_STRATEGIES);\n    const errors = [];\n\n    for (const strategyName of strategies) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n        } catch (err) {\n            errors.push(err);\n        }\n    }\n\n    if (errors.length === strategies.length) {\n        throw new Error(`All post-robot messaging strategies failed:\\n\\n${ errors.map((err, i) => `${ i }. ${ stringifyError(err) }`).join('\\n\\n') }`);\n    }\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean,\n    cancelled? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function cancelResponseListeners() {\n    const responseListeners = globalStore('responseListeners');\n    for (const hash of responseListeners.keys()) {\n        const listener = responseListeners.get(hash);\n        if (listener) {\n            listener.cancelled = true;\n        }\n        responseListeners.del(hash);\n    }\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                delete nameListeners[name];\n            }\n\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, stringifyError } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            try {\n                // $FlowFixMe\n                sendMessage(source, origin, {\n                    type,\n                    ack,\n                    hash:   message.hash,\n                    name:   message.name,\n                    ...response\n                }, { on, send });\n            } catch (err) {\n                throw new Error(`Send response message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n            }\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        try {\n            if (!matchDomain(options.domain, origin)) {\n                throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n            }\n    \n            if (source !== options.win) {\n                throw new Error(`Ack source does not match registered window`);\n            }\n        } catch (err) {\n            options.promise.reject(err);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow, PROTOCOL  } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    try {\n        if (!window || window.closed || !event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    if (message.origin.indexOf(PROTOCOL.FILE) === 0) {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    const source = event.source || event.sourceElement;\n    let origin = event.origin || (event.originalEvent && event.originalEvent.origin);\n    const data = event.data;\n\n    if (origin === 'null') {\n        origin = `${ PROTOCOL.FILE }//`;\n    }\n\n    if (!source) {\n        return;\n    }\n\n    if (!origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage({ source, origin, data }, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListener', () => {\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n\nexport function stopListenForMessages() {\n    const listener = globalStore().get('postMessageListener');\n    if (listener) {\n        listener.cancel();\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options? : ServerOptionsType | HandlerType, handler? : HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop, safeInterval, stringify, stringifyError } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN, RESPONSE_CYCLE_TIME } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { SendType } from '../types';\n\nimport { on } from './on';\n\nfunction validateOptions(name : string, win : CrossDomainWindowType, domain : ?DomainMatcher) {\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (domain) {\n        if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n            throw new TypeError(`Expected domain to be a string, array, or regex`);\n        }\n    }\n\n    if (isWindowClosed(win)) {\n        throw new Error('Target window is closed');\n    }\n}\n\nfunction normalizeDomain(win : CrossDomainWindowType, targetDomain : DomainMatcher, actualDomain : ?string, { send } : { send : SendType }) : ZalgoPromise<string | $ReadOnlyArray<string>> {\n    if (typeof targetDomain === 'string') {\n        return ZalgoPromise.resolve(targetDomain);\n    }\n    \n    return ZalgoPromise.try(() => {\n        return actualDomain || sayHello(win, { send }).then(({ domain }) => domain);\n\n    }).then(normalizedDomain => {\n        if (!matchDomain(targetDomain, targetDomain)) {\n            throw new Error(`Domain ${ stringify(targetDomain) } does not match ${ stringify(targetDomain) }`);\n        }\n\n        return normalizedDomain;\n    });\n}\n\nexport const send : SendType = (win, name, data, options) => {\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    // $FlowFixMe\n    return ZalgoPromise.try(() => {\n        validateOptions(name, win, domain);\n\n        if (isAncestor(window, win)) {\n            return awaitWindowHello(win, childTimeout);\n        }\n        \n    }).then(({ domain: actualDomain } = {}) => {\n\n        return normalizeDomain(win, domain, actualDomain, { send });\n    }).then(targetDomain => {\n\n        domain = targetDomain;\n\n        const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n        if (__DEBUG__) {\n            console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n        }\n\n        const promise = new ZalgoPromise();\n        const hash = `${ name }_${ uniqueID() }`;\n\n        if (!fireAndForget) {\n            const responseListener : ResponseListenerType = { name, win, domain, promise };\n            addResponseListener(hash, responseListener);\n\n            const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n            reqPromises.push(promise);\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n        \n            const interval = safeInterval(() => {\n                if (isWindowClosed(win)) {\n                    return promise.reject(new Error(`Window closed for ${ name } before ${ responseListener.ack ? 'response' : 'ack' }`));\n                }\n\n                if (responseListener.cancelled) {\n                    return promise.reject(new Error(`Response listener was cancelled for ${ name }`));\n                }\n\n                ackTimeout = Math.max(ackTimeout - RESPONSE_CYCLE_TIME, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - RESPONSE_CYCLE_TIME, 0);\n                }\n\n                if (!responseListener.ack && ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ logName } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ logName } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n            }, RESPONSE_CYCLE_TIME);\n\n            promise.finally(() => {\n                interval.cancel();\n                reqPromises.splice(reqPromises.indexOf(promise, 1));\n            }).catch(noop);\n        }\n\n        try {\n            sendMessage(win, domain, {\n                type: MESSAGE_TYPE.REQUEST,\n                hash,\n                name,\n                data,\n                fireAndForget\n            }, { on, send });\n        } catch (err) {\n            throw new Error(`Send request message failed for ${ logName } in ${ getDomain() }\\n\\n${ stringifyError(err) }`);\n        }\n    \n        return fireAndForget ? promise.resolve() : promise;\n    });\n};\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\nexport const RESPONSE_CYCLE_TIME = 500;\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, stopListenForMessages, receiveMessage, setupGlobalReceiveMessage, cancelResponseListeners } from './drivers';\nimport { getGlobal, deleteGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function createProxyWindow(win? : CrossDomainWindowType) : ProxyWindow {\n    return new ProxyWindow({ send, win });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        setupGlobalReceiveMessage({ on, send });\n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n    }\n}\n\nexport function destroy() {\n    cancelResponseListeners();\n    stopListenForMessages();\n    deleteGlobal();\n}\n","/* @flow */\n\nimport { isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nexport function getGlobal(win? : CrossDomainWindowType = window) : Object {\n\n    if (!isSameDomain(win)) {\n        throw new Error(`Can not get global for window on different domain`);\n    }\n\n    if (!win[__ZOID__.__GLOBAL_KEY__]) {\n        win[__ZOID__.__GLOBAL_KEY__] = {};\n    }\n\n    return win[__ZOID__.__GLOBAL_KEY__];\n}\n\nexport function destroyGlobal() {\n    delete window[__ZOID__.__GLOBAL_KEY__];\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nexport type ProxyObject<T> = {|\n    get : () => ZalgoPromise<T>\n|};\n\nexport function getProxyObject<T>(obj : T) : ProxyObject<T> {\n    return {\n        get() : ZalgoPromise<T> {\n            return ZalgoPromise.try(() => {\n                if (this.source && this.source !== window) {\n                    throw new Error(`Can not call get on proxy object from a remote window`);\n                }\n    \n                return obj;\n            });\n        }\n    };\n}\n","/* @flow */\n\nimport { WINDOW_TYPE } from 'cross-domain-utils/src';\n\nexport const ZOID = `zoid`;\n\nexport const POST_MESSAGE = {\n    DELEGATE:       `${ ZOID }_delegate`,\n    ALLOW_DELEGATE: `${ ZOID }_allow_delegate`\n};\n\nexport const PROP_TYPE = {\n    STRING:   `string`,\n    OBJECT:   `object`,\n    FUNCTION: `function`,\n    BOOLEAN:  `boolean`,\n    NUMBER:   `number`,\n    ARRAY:    `array`\n};\n\nexport const INITIAL_PROPS = {\n    RAW: 'raw',\n    UID: 'uid'\n};\n\nexport const WINDOW_REFERENCES = {\n    OPENER: ('opener' : 'opener'),\n    PARENT: ('parent' : 'parent'),\n    GLOBAL: ('global' : 'global')\n};\n\nexport const PROP_SERIALIZATION = {\n    JSON:   ('json' : 'json'),\n    DOTIFY: ('dotify' : 'dotify'),\n    BASE64: ('base64' : 'base64')\n};\n\nexport const CONTEXT = WINDOW_TYPE;\n\nexport const WILDCARD = '*';\n\nexport const DEFAULT_DIMENSIONS = {\n    WIDTH:  '300px',\n    HEIGHT: '150px'\n};\n\nexport const EVENT = {\n    RENDER:   'zoid-render',\n    RENDERED: 'zoid-rendered',\n    DISPLAY:  'zoid-display',\n    ERROR:    'zoid-error',\n    CLOSE:    'zoid-close',\n    DESTROY:  'zoid-destroy',\n    PROPS:    'zoid-props',\n    RESIZE:   'zoid-resize',\n    FOCUS:    'zoid-focus'\n};\n","/* @flow */\n\nimport { getDomain, isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport type { PropsDefinitionType, PropsType } from '../component/props';\n\nimport type { ChildHelpers } from './index';\n\n// $FlowFixMe\nexport function normalizeChildProp<P, T>(propsDef : PropsDefinitionType<P>, props : PropsType<P>, key : string, value : ?T, helpers : ChildHelpers<P>) : ?T  {\n    if (!propsDef.hasOwnProperty(key)) {\n        return value;\n    }\n\n    const prop = propsDef[key];\n\n    if (typeof prop.childDecorate === 'function') {\n        const { close, focus, onError, onProps, resize, getParent, getParentDomain, show, hide } = helpers;\n        const decoratedValue = prop.childDecorate({ value, close, focus, onError, onProps, resize, getParent, getParentDomain, show, hide });\n\n        // $FlowFixMe\n        return decoratedValue;\n    }\n\n    return value;\n}\n\n// eslint-disable-next-line max-params\nexport function normalizeChildProps<P>(parentComponentWindow : CrossDomainWindowType, propsDef : PropsDefinitionType<P>, props : PropsType<P>, origin : string, helpers : ChildHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) {\n\n    const result = {};\n\n    for (const key of Object.keys(props)) {\n        const prop = propsDef[key];\n\n        if (prop && prop.sameDomain && (origin !== getDomain(window) || !isSameDomain(parentComponentWindow))) {\n            continue;\n        }\n\n        // $FlowFixMe\n        const value = normalizeChildProp(propsDef, props, key, props[key], helpers);\n\n        result[key] = value;\n        if (prop && prop.alias && !result[prop.alias]) {\n            result[prop.alias] = value;\n        }\n    }\n\n    if (!isUpdate) {\n        for (const key of Object.keys(propsDef)) {\n            if (!props.hasOwnProperty(key)) {\n                result[key] = normalizeChildProp(propsDef, props, key, undefined, helpers);\n            }\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n","/* @flow */\n\nimport { inlineMemoize, stringifyError, base64decode } from 'belter/src';\n\nimport { ZOID } from '../constants';\nimport type { ChildPayload } from '../parent';\n\nfunction parseChildWindowName(windowName : string) : ChildPayload {\n    return inlineMemoize(parseChildWindowName, () => {\n        if (!windowName) {\n            throw new Error(`No window name`);\n        }\n    \n        const [ , zoidcomp, name, encodedPayload ] = windowName.split('__');\n    \n        if (zoidcomp !== ZOID) {\n            throw new Error(`Window not rendered by zoid - got ${ zoidcomp }`);\n        }\n    \n        if (!name) {\n            throw new Error(`Expected component name`);\n        }\n    \n        if (!encodedPayload) {\n            throw new Error(`Expected encoded payload`);\n        }\n    \n        try {\n            return JSON.parse(base64decode(encodedPayload));\n        } catch (err) {\n            throw new Error(`Can not decode window name payload: ${ encodedPayload }: ${ stringifyError(err) }`);\n        }\n    }, [ windowName ]);\n}\n\nexport function getChildPayload() : ?ChildPayload {\n    try {\n        return parseChildWindowName(window.name);\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isSameDomain, matchDomain, getDomain, getOpener,\n    getNthParentFromTop, getAncestor, getAllFramesInWindow,\n    type CrossDomainWindowType, onCloseWindow } from 'cross-domain-utils/src';\nimport { markWindowKnown, deserializeMessage, type CrossDomainFunctionType } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { extend, waitForDocumentBody, onResize, getElementSafe, assertExists } from 'belter/src';\n\nimport { getGlobal } from '../lib';\nimport { CONTEXT, INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { NormalizedComponentOptionsType } from '../component';\nimport type { PropsType } from '../component/props';\nimport type { WindowRef, PropRef } from '../parent';\nimport type { StringMatcherType } from '../types';\n\nimport { normalizeChildProps } from './props';\nimport { getChildPayload } from './window';\n\nexport type ChildExportsType<P> = {|\n    updateProps : CrossDomainFunctionType<[ PropsType<P> ], void>,\n    close : CrossDomainFunctionType<[], void>\n|};\n\nexport type ChildHelpers<P> = {|\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({| width : ?number, height : ?number |}) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    onProps : ((PropsType<P>) => void) => void,\n    getParent : () => CrossDomainWindowType,\n    getParentDomain : () => string,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\nfunction getParentComponentWindow(ref : WindowRef) : CrossDomainWindowType {\n    const { type } = ref;\n\n    if (type === WINDOW_REFERENCES.OPENER) {\n        return assertExists('opener', getOpener(window));\n\n    } else if (type === WINDOW_REFERENCES.PARENT && typeof ref.distance === 'number') {\n        return assertExists('parent', getNthParentFromTop(window, ref.distance));\n\n    } else if (type === WINDOW_REFERENCES.GLOBAL && ref.uid && typeof ref.uid === 'string') {\n        const { uid } = ref;\n        const ancestor = getAncestor(window);\n\n        if (!ancestor) {\n            throw new Error(`Can not find ancestor window`);\n        }\n\n        for (const frame of getAllFramesInWindow(ancestor)) {\n            if (isSameDomain(frame)) {\n                const global = getGlobal(frame);\n\n                if (global && global.windows && global.windows[uid]) {\n                    return global.windows[uid];\n                }\n            }\n        }\n    }\n\n    throw new Error(`Unable to find ${ type } parent component window`);\n}\n\nfunction checkParentDomain(allowedParentDomains : StringMatcherType, domain : string) {\n    if (!matchDomain(allowedParentDomains, domain)) {\n        throw new Error(`Can not be rendered by domain: ${ domain }`);\n    }\n}\n\nfunction focus() : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        window.focus();\n    });\n}\n\nfunction destroy() : ZalgoPromise<void> {\n    return ZalgoPromise.try(() => {\n        window.close();\n    });\n}\n\nfunction getPropsByRef<P>(parentComponentWindow : CrossDomainWindowType, domain : string, { type, value, uid } : PropRef) : (PropsType<P>) {\n    let props;\n\n    if (type === INITIAL_PROPS.RAW) {\n        props = value;\n    } else if (type === INITIAL_PROPS.UID) {\n        if (!isSameDomain(parentComponentWindow)) {\n            throw new Error(`Parent component window is on a different domain - expected ${ getDomain() } - can not retrieve props`);\n        }\n\n        const global = getGlobal(parentComponentWindow);\n        props = assertExists('props', global && global.props[uid]);\n    }\n\n    if (!props) {\n        throw new Error(`Could not find props`);\n    }\n\n    return deserializeMessage(parentComponentWindow, domain, props);\n}\n\nexport type ChildComponent<P> = {|\n    getProps : () => PropsType<P>,\n    init : () => ZalgoPromise<void>\n|};\n\nexport function childComponent<P>(options : NormalizedComponentOptionsType<P>) : ChildComponent<P> {\n    const { propsDef, autoResize, allowedParentDomains } = options;\n\n    const onPropHandlers = [];\n    const childPayload = getChildPayload();\n    let props : PropsType<P>;\n\n    if (!childPayload) {\n        throw new Error(`No child payload found`);\n    }\n\n    if (childPayload.version !== __ZOID__.__VERSION__) {\n        throw new Error(`Parent window has zoid version ${ childPayload.version }, child window has version ${ __ZOID__.__VERSION__ }`);\n    }\n\n    const { parent: parentRef, parentDomain, exports, context, props: propsRef } = childPayload;\n    const parentComponentWindow = getParentComponentWindow(parentRef);\n    const parent = deserializeMessage(parentComponentWindow, parentDomain, exports);\n\n    const { show, hide, close } = parent;\n\n    const getParent = () => parentComponentWindow;\n    const getParentDomain = () => parentDomain;\n    \n    const onProps = (handler : Function) => {\n        onPropHandlers.push(handler);\n    };\n\n    const onError = (err : mixed) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            if (parent && parent.onError) {\n                return parent.onError(err);\n            } else {\n                throw err;\n            }\n        });\n    };\n\n    const resize = ({ width, height } : {| width : ?number, height : ?number |}) : ZalgoPromise<void> => {\n        return parent.resize.fireAndForget({ width, height });\n    };\n\n    const getHelpers = () : ChildHelpers<P> => {\n        return {\n            show, hide, close, focus, onError, resize,\n            onProps, getParent, getParentDomain\n        };\n    };\n\n    const watchForClose = () => {\n        window.addEventListener('beforeunload', () => {\n            parent.checkClose.fireAndForget();\n        });\n\n        window.addEventListener('unload', () => {\n            parent.checkClose.fireAndForget();\n        });\n\n        onCloseWindow(parentComponentWindow, () => {\n            destroy();\n        });\n    };\n\n    const setProps = (newProps : PropsType<P>, origin : string, isUpdate : boolean = false) => {\n        const helpers = getHelpers();\n        const normalizedProps = normalizeChildProps(parentComponentWindow, propsDef, newProps, origin, helpers, isUpdate);\n\n        if (props) {\n            extend(props, normalizedProps);\n        } else {\n            props = normalizedProps;\n        }\n\n        for (const handler of onPropHandlers) {\n            handler(props);\n        }\n    };\n    \n    const getAutoResize = () : {| width : boolean, height : boolean, element : ?HTMLElement |} => {\n        let { width = false, height = false, element = 'body' } = autoResize;\n        element = getElementSafe(element);\n        return { width, height, element };\n    };\n\n    const watchForResize = () : ?ZalgoPromise<void> => {\n        return waitForDocumentBody().then(() => {\n            const { width, height, element } = getAutoResize();\n\n            if (!element || (!width && !height) || context === CONTEXT.POPUP) {\n                return;\n            }\n\n            onResize(element, ({ width: newWidth, height: newHeight }) => {\n                resize({\n                    width:  width ? newWidth : undefined,\n                    height: height ? newHeight : undefined\n                });\n            }, { width, height });\n        });\n    };\n\n    const updateProps = (newProps : (PropsType<P>)) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => setProps(newProps, parentDomain, true));\n    };\n\n    const init = () => {\n        return ZalgoPromise.try(() => {\n            checkParentDomain(allowedParentDomains, parentDomain);\n            markWindowKnown(parentComponentWindow);\n            watchForClose();\n\n            return parent.init({ updateProps, close: destroy });\n    \n        }).then(() => {\n            return watchForResize();\n    \n        }).catch(err => {\n            onError(err);\n        });\n    };\n\n    const getProps = () => {\n        if (props) {\n            return props;\n        }\n\n        setProps(getPropsByRef(parentComponentWindow, parentDomain, propsRef), parentDomain);\n        return props;\n    };\n\n    return {\n        init,\n        getProps\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { dotify, isDefined, extend } from 'belter/src';\n\nimport type { PropsInputType, PropsType, PropsDefinitionType, MixedPropDefinitionType } from '../component/props';\nimport { PROP_SERIALIZATION } from '../constants';\n\nimport type { ParentHelpers } from './index';\n\n/*  Normalize Props\n    ---------------\n\n    Turn props into normalized values, using defaults, function options, etc.\n*/\n\nexport function extendProps<P>(propsDef : PropsDefinitionType<P>, props : PropsType<P>, inputProps : PropsInputType<P>, helpers : ParentHelpers<P>, isUpdate : boolean = false) { // eslint-disable-line complexity\n\n    // $FlowFixMe\n    inputProps = inputProps || {};\n    extend(props, inputProps);\n\n    const propNames = isUpdate ? [] : [ ...Object.keys(propsDef) ];\n\n    for (const key of Object.keys(inputProps)) {\n        if (propNames.indexOf(key) === -1) {\n            propNames.push(key);\n        }\n    }\n\n    const aliases = [];\n\n    const { state, close, focus, event, onError } = helpers;\n\n    for (const key of propNames) {\n        const propDef = propsDef[key];\n\n        // $FlowFixMe\n        let value = inputProps[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        const alias = propDef.alias;\n        if (alias) {\n            if (!isDefined(value) && isDefined(inputProps[alias])) {\n                value = inputProps[alias];\n            }\n            aliases.push(alias);\n        }\n\n        if (propDef.value) {\n            value = propDef.value({ props, state, close, focus, event, onError });\n        }\n\n        if (!isDefined(value) && propDef.default) {\n            value = propDef.default({ props, state, close, focus, event, onError });\n        }\n\n        if (isDefined(value)) {\n            if (propDef.type === 'array' ? !Array.isArray(value) : (typeof value !== propDef.type)) {\n                throw new TypeError(`Prop is not of type ${ propDef.type }: ${ key }`);\n            }\n        }\n        \n        // $FlowFixMe\n        props[key] = value;\n    }\n\n    for (const alias of aliases) {\n        delete props[alias];\n    }\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        const propDef = propsDef[key];\n        const value = props[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        if (__DEBUG__ && isDefined(value) && propDef.validate) {\n            // $FlowFixMe\n            propDef.validate({ value, props });\n        }\n\n        if (isDefined(value) && propDef.decorate) {\n            props[key] = propDef.decorate({ value, props, state, close, focus, event, onError });\n        }\n    }\n\n    for (const key of Object.keys(propsDef)) {\n        const propDef = propsDef[key];\n        // $FlowFixMe\n        const propVal = props[key];\n        if (propDef.required !== false && !isDefined(propVal)) {\n            throw new Error(`Expected prop \"${ key }\" to be defined`);\n        }\n    }\n}\n\n// $FlowFixMe\nfunction getQueryParam<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryParam === 'function') {\n            return prop.queryParam({ value });\n        } else if (typeof prop.queryParam === 'string') {\n            return prop.queryParam;\n        } else {\n            return key;\n        }\n    });\n}\n\n// $FlowFixMe\nfunction getQueryValue<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<mixed> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryValue === 'function' && isDefined(value)) {\n            return prop.queryValue({ value });\n        } else {\n            return value;\n        }\n    });\n}\n\nexport function propsToQuery<P>(propsDef : PropsDefinitionType<P>, props : (PropsType<P>)) : ZalgoPromise<{ [string] : string }> {\n\n    const params = {};\n\n    // $FlowFixMe\n    const keys = Object.keys(props);\n    \n    return ZalgoPromise.all(keys.map(key => {\n\n        const prop = propsDef[key];\n\n        if (!prop) {\n            return; // eslint-disable-line array-callback-return\n        }\n\n        return ZalgoPromise.resolve().then(() => {\n\n            const value = props[key];\n\n            if (!value) {\n                return;\n            }\n\n            if (!prop.queryParam) {\n                return;\n            }\n\n            return value;\n\n        }).then(value => {\n\n            if (value === null || typeof value === 'undefined') {\n                return;\n            }\n\n            return ZalgoPromise.all([\n                getQueryParam(prop, key, value),\n                getQueryValue(prop, key, value)\n            ]).then(([ queryParam, queryValue ]) => {\n\n                let result;\n\n                if (typeof queryValue === 'boolean') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'string') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'object' && queryValue !== null) {\n\n                    if (prop.serialization === PROP_SERIALIZATION.JSON) {\n                        result = JSON.stringify(queryValue);\n                    } else if (prop.serialization === PROP_SERIALIZATION.BASE64) {\n                        result = btoa(JSON.stringify(queryValue));\n                    } else if (prop.serialization === PROP_SERIALIZATION.DOTIFY || !prop.serialization) {\n                        result = dotify(queryValue, key);\n\n                        for (const dotkey of Object.keys(result)) {\n                            params[dotkey] = result[dotkey];\n                        }\n\n                        return;\n                    }\n\n                } else if (typeof queryValue === 'number') {\n                    result = queryValue.toString();\n                }\n\n                params[queryParam] = result;\n            });\n        });\n\n    })).then(() => {\n        return params;\n    });\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { send, bridge, serializeMessage, ProxyWindow, toProxyWindow, type CrossDomainFunctionType, cleanUpWindow } from 'post-robot/src';\nimport { isSameDomain, matchDomain, getDomainFromUrl, isBlankDomain,\n    getDomain, type CrossDomainWindowType,\n    getDistanceFromTop, normalizeMockUrl, assertSameDomain, closeWindow, onCloseWindow, isWindowClosed, isSameTopWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { addEventListener, uniqueID, elementReady, writeElementToWindow, eventEmitter, type EventEmitterType,\n    noop, onResize, extendUrl, appendChild, cleanup, base64encode, isRegex,\n    once, stringifyError, destroyElement, getElementSafe, showElement, hideElement, iframe,\n    awaitFrameWindow, popup, normalizeDimension, watchElementForClose, isShadowElement, insertShadowSlot } from 'belter/src';\n\nimport { ZOID, POST_MESSAGE, CONTEXT, EVENT,\n    INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport { getGlobal, getProxyObject, type ProxyObject } from '../lib';\nimport type { PropsInputType, PropsType } from '../component/props';\nimport type { ChildExportsType } from '../child';\nimport type { DimensionsType } from '../types';\nimport type { NormalizedComponentOptionsType } from '../component';\n\nimport { propsToQuery, extendProps } from './props';\n\nexport type RenderOptionsType<P> = {|\n    uid : string,\n    props : PropsInputType<P>,\n    tag : string,\n    context : string,\n    close : (?string) => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<ProxyWindow>,\n    doc : Document,\n    container? : HTMLElement,\n    dimensions : DimensionsType,\n    state : Object,\n    event : EventEmitterType,\n    frame : ?HTMLIFrameElement,\n    prerenderFrame : ?HTMLIFrameElement\n|};\n\nexport type ParentExportsType<P> = {|\n    init : (ChildExportsType<P>) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>,\n    checkClose : CrossDomainFunctionType<[], boolean>,\n    resize : CrossDomainFunctionType<[{| width? : ?number, height? : ?number |}], void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\nexport type PropRef =\n    {| type : typeof INITIAL_PROPS.RAW, uid? : string, value? : string |};\n\nexport type WindowRef =\n    {| type : typeof WINDOW_REFERENCES.OPENER |} |\n    {| type : typeof WINDOW_REFERENCES.PARENT, distance : number |} |\n    {| type : typeof WINDOW_REFERENCES.GLOBAL, uid : string |};\n\nexport type ChildPayload = {|\n    uid : string,\n    tag : string,\n    version : string,\n    context : $Values<typeof CONTEXT>,\n    parentDomain : string,\n    childDomain : string,\n    parent : WindowRef,\n    props : PropRef,\n    exports : string\n|};\n\nexport type StateType = Object;\n\nexport type ParentHelpers<P> = {|\n    state : StateType,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({| width : ?number, height : ?number |}) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    updateProps : PropsInputType<P> => ZalgoPromise<void>,\n    event : EventEmitterType,\n    show : () => ZalgoPromise<void>,\n    hide : () => ZalgoPromise<void>\n|};\n\nfunction getDefaultProps<P>() : PropsType<P> {\n    // $FlowFixMe\n    return {};\n}\n\ntype GetProxyContainer = (container : string | HTMLElement) => ZalgoPromise<ProxyObject<HTMLElement>>;\ntype Show = () => ZalgoPromise<void>;\ntype Hide = () => ZalgoPromise<void>;\ntype Close = () => ZalgoPromise<void>;\ntype OnError = (mixed) => ZalgoPromise<void>;\ntype RenderContainer = (proxyContainer : ProxyObject<HTMLElement>, {| context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyObject<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement> |}) => ZalgoPromise<?ProxyObject<HTMLElement>>;\ntype SetProxyWin = (ProxyWindow) => ZalgoPromise<void>;\ntype GetProxyWindow = () => ZalgoPromise<ProxyWindow>;\ntype OpenFrame = (context : $Values<typeof CONTEXT>, {| windowName : string |}) => ZalgoPromise<?ProxyObject<HTMLIFrameElement>>;\ntype OpenPrerenderFrame = (context : $Values<typeof CONTEXT>) => ZalgoPromise<?ProxyObject<HTMLIFrameElement>>;\ntype Prerender = (proxyPrerenderWin : ProxyWindow, {| context : $Values<typeof CONTEXT>, uid : string |}) => ZalgoPromise<void>;\ntype Open = (context : $Values<typeof CONTEXT>, {| proxyWin : ProxyWindow, proxyFrame : ?ProxyObject<HTMLIFrameElement>, windowName : string |}) => ZalgoPromise<ProxyWindow>;\ntype OpenPrerender = (context : $Values<typeof CONTEXT>, proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>;\ntype WatchForUnload = () => ZalgoPromise<void>;\n\ntype ParentDelegateOverrides<P> = {|\n    props : PropsType<P>,\n    event : EventEmitterType,\n    close : Close,\n    onError : OnError,\n    getProxyContainer : GetProxyContainer,\n    show : Show,\n    hide : Hide,\n    renderContainer : RenderContainer,\n    getProxyWindow : GetProxyWindow,\n    setProxyWin : SetProxyWin,\n    openFrame : OpenFrame,\n    openPrerenderFrame : OpenPrerenderFrame,\n    prerender : Prerender,\n    open : Open,\n    openPrerender : OpenPrerender,\n    watchForUnload : WatchForUnload\n|};\n\ntype DelegateOverrides = {|\n    getProxyContainer : GetProxyContainer,\n    show : Show,\n    hide : Hide,\n    renderContainer : RenderContainer,\n    getProxyWindow : GetProxyWindow,\n    setProxyWin : SetProxyWin,\n    openFrame : OpenFrame,\n    openPrerenderFrame : OpenPrerenderFrame,\n    prerender : Prerender,\n    open : Open,\n    openPrerender : OpenPrerender,\n    watchForUnload : WatchForUnload\n|};\n\ntype ParentComponent<P> = {|\n    init : () => void,\n    render : (CrossDomainWindowType, string | HTMLElement, $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    setProps : (newProps : PropsInputType<P>, isUpdate? : boolean) => void,\n    destroy : (err? : mixed) => ZalgoPromise<void>,\n    getHelpers : () => ParentHelpers<P>,\n    getDelegateOverrides : () => ZalgoPromise<DelegateOverrides>\n|};\n\nconst getDefaultOverrides = <P>() : ParentDelegateOverrides<P> => {\n    // $FlowFixMe\n    return {};\n};\n\nexport function parentComponent<P>(options : NormalizedComponentOptionsType<P>, overrides? : ParentDelegateOverrides<P> = getDefaultOverrides(), parentWin : CrossDomainWindowType = window) : ParentComponent<P> {\n    const { propsDef, containerTemplate, prerenderTemplate, tag, name, attributes, dimensions, autoResize, url, domain: domainMatch, validate } = options;\n\n    const initPromise = new ZalgoPromise();\n    const handledErrors = [];\n    const clean = cleanup();\n    const state = {};\n    const event = overrides.event ? overrides.event : eventEmitter();\n    const props = overrides.props ? overrides.props : getDefaultProps();\n\n    let currentProxyWin : ?ProxyWindow;\n    let currentProxyContainer : ?ProxyObject<HTMLElement>;\n    let childComponent : ?ChildExportsType<P>;\n\n    let visible : boolean = true;\n\n    const onErrorOverride : ?OnError = overrides.onError;\n    let getProxyContainerOverride : ?GetProxyContainer = overrides.getProxyContainer;\n    let showOverride : ?Show = overrides.show;\n    let hideOverride : ?Hide = overrides.hide;\n    const closeOverride : ?Close = overrides.close;\n    let renderContainerOverride : ?RenderContainer = overrides.renderContainer;\n    let getProxyWindowOverride : ?GetProxyWindow = overrides.getProxyWindow;\n    let setProxyWinOverride : ?SetProxyWin = overrides.setProxyWin;\n    let openFrameOverride : ?OpenFrame = overrides.openFrame;\n    let openPrerenderFrameOverride : ?OpenPrerenderFrame = overrides.openPrerenderFrame;\n    let prerenderOverride : ?Prerender = overrides.prerender;\n    let openOverride : ?Open = overrides.open;\n    let openPrerenderOverride : ?OpenPrerender = overrides.openPrerender;\n    let watchForUnloadOverride : ?WatchForUnload = overrides.watchForUnload;\n\n    const getPropsForChild = (domain : string | RegExp) : PropsType<P> => {\n        const result = {};\n\n        for (const key of Object.keys(props)) {\n            const prop = propsDef[key];\n\n            if (prop && prop.sendToChild === false) {\n                continue;\n            }\n\n            if (prop && prop.sameDomain && !matchDomain(domain, getDomain(window))) {\n                continue;\n            }\n            \n            result[key] = props[key];\n        }\n\n        // $FlowFixMe\n        return result;\n    };\n\n    const setupEvents = () => {\n        event.on(EVENT.RENDER,   () => props.onRender());\n        event.on(EVENT.DISPLAY,  () => props.onDisplay());\n        event.on(EVENT.RENDERED, () => props.onRendered());\n        event.on(EVENT.CLOSE,    () => props.onClose());\n        event.on(EVENT.DESTROY,  () => props.onDestroy());\n        event.on(EVENT.RESIZE,   () => props.onResize());\n        event.on(EVENT.FOCUS,    () => props.onFocus());\n        event.on(EVENT.PROPS,    (newProps) => props.onProps(newProps));\n        event.on(EVENT.ERROR, err => {\n            if (props && props.onError) {\n                return props.onError(err);\n            } else {\n                return initPromise.reject(err).then(() => {\n                    setTimeout(() => {\n                        throw err;\n                    }, 1);\n                });\n            }\n        });\n\n        clean.register(event.reset);\n    };\n\n    const getProxyWindow = () : ZalgoPromise<ProxyWindow> => {\n        if (getProxyWindowOverride) {\n            return getProxyWindowOverride();\n        }\n\n        return ZalgoPromise.try(() => {\n            const windowProp = props.window;\n\n            if (windowProp) {\n                const proxyWin = toProxyWindow(windowProp);\n                clean.register(() => windowProp.close());\n                return proxyWin;\n            }\n\n            return new ProxyWindow({ send });\n        });\n    };\n\n    const getProxyContainer : GetProxyContainer = (container : string | HTMLElement) : ZalgoPromise<ProxyObject<HTMLElement>> => {\n        if (getProxyContainerOverride) {\n            return getProxyContainerOverride(container);\n        }\n\n        return ZalgoPromise.try(() => {\n            return elementReady(container);\n        }).then(containerElement => {\n            if (isShadowElement(containerElement)) {\n                containerElement = insertShadowSlot(containerElement);\n            }\n\n            return getProxyObject(containerElement);\n        });\n    };\n\n    const getPropsRef = (proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, uid : string) : PropRef => {\n        const value = serializeMessage(proxyWin, domain, getPropsForChild(domain));\n\n        const propRef = (childDomain === getDomain())\n            ? { type: INITIAL_PROPS.UID, uid }\n            : { type: INITIAL_PROPS.RAW, value };\n\n        if (propRef.type === INITIAL_PROPS.UID) {\n            const global = getGlobal(window);\n            global.props = global.props || {};\n            global.props[uid] = value;\n\n            clean.register(() => {\n                delete global.props[uid];\n            });\n        }\n\n        return propRef;\n    };\n\n    const setProxyWin = (proxyWin : ProxyWindow) : ZalgoPromise<void> => {\n        if (setProxyWinOverride) {\n            return setProxyWinOverride(proxyWin);\n        }\n\n        return ZalgoPromise.try(() => {\n            currentProxyWin = proxyWin;\n        });\n    };\n\n    const show = () : ZalgoPromise<void> => {\n        if (showOverride) {\n            return showOverride();\n        }\n\n        return ZalgoPromise.try(() => {\n            visible = true;\n            if (currentProxyContainer) {\n                return currentProxyContainer.get().then(showElement);\n            }\n        });\n    };\n\n    const hide = () : ZalgoPromise<void> => {\n        if (hideOverride) {\n            return hideOverride();\n        }\n\n        return ZalgoPromise.try(() => {\n            visible = false;\n            if (currentProxyContainer) {\n                return currentProxyContainer.get().then(hideElement);\n            }\n        });\n    };\n\n    const getUrl = () : string => {\n        if (typeof url === 'function') {\n            return url({ props });\n        }\n\n        return url;\n    };\n\n    const buildUrl = () : ZalgoPromise<string> => {\n        return propsToQuery(propsDef, props).then(query => {\n            return extendUrl(normalizeMockUrl(getUrl()), { query });\n        });\n    };\n\n    const getChildDomain = () : string => {\n        if (domainMatch && typeof domainMatch === 'string') {\n            return domainMatch;\n        }\n\n        return getDomainFromUrl(getUrl());\n    };\n\n    const getDomainMatcher = () : string | RegExp => {\n        if (domainMatch && isRegex(domainMatch)) {\n            return domainMatch;\n        }\n\n        return getChildDomain();\n    };\n\n    const openFrame = (context : $Values<typeof CONTEXT>, { windowName } : {| windowName : string |}) : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> => {\n        if (openFrameOverride) {\n            return openFrameOverride(context, { windowName });\n        }\n        \n        return ZalgoPromise.try(() => {\n            if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n                return getProxyObject(iframe({\n                    attributes: {\n                        name:  windowName,\n                        title: name,\n                        ...attributes.iframe\n                    }\n                }));\n            }\n        });\n    };\n\n    const openPrerenderFrame = (context : $Values<typeof CONTEXT>) : ZalgoPromise<?ProxyObject<HTMLIFrameElement>> => {\n        if (openPrerenderFrameOverride) {\n            return openPrerenderFrameOverride(context);\n        }\n\n        return ZalgoPromise.try(() => {\n            if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n                return getProxyObject(iframe({\n                    attributes: {\n                        name:  `__zoid_prerender_frame__${ name }_${ uniqueID() }__`,\n                        title: `prerender__${ name }`,\n                        ...attributes.iframe\n                    }\n                }));\n            }\n        });\n    };\n    \n    const openPrerender = (context : $Values<typeof CONTEXT>, proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> => {\n        if (openPrerenderOverride) {\n            return openPrerenderOverride(context, proxyWin, proxyPrerenderFrame);\n        }\n        \n        return ZalgoPromise.try(() => {\n            if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n                if (!proxyPrerenderFrame) {\n                    throw new Error(`Expected proxy frame to be passed`);\n                }\n                \n                return proxyPrerenderFrame.get().then(prerenderFrame => {\n                    clean.register(() => destroyElement(prerenderFrame));\n        \n                    return awaitFrameWindow(prerenderFrame).then(prerenderFrameWindow => {\n                        return assertSameDomain(prerenderFrameWindow);\n                    }).then(win => {\n                        return toProxyWindow(win);\n                    });\n                });\n            } else if (context === CONTEXT.POPUP && __ZOID__.__POPUP_SUPPORT__) {\n                return proxyWin;\n            } else {\n                throw new Error(`No render context available for ${ context }`);\n            }\n        });\n    };\n\n    const focus = () : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            if (currentProxyWin) {\n                return ZalgoPromise.all([\n                    event.trigger(EVENT.FOCUS),\n                    currentProxyWin.focus()\n                ]).then(noop);\n            }\n        });\n    };\n\n    const getWindowRef = (target : CrossDomainWindowType, domain : string, uid : string, context : $Values<typeof CONTEXT>) : WindowRef => {\n        \n        if (domain === getDomain(window)) {\n            const global = getGlobal(window);\n            global.windows = global.windows || {};\n            global.windows[uid] = window;\n            clean.register(() => {\n                delete global.windows[uid];\n            });\n    \n            return { type: WINDOW_REFERENCES.GLOBAL, uid };\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return { type: WINDOW_REFERENCES.OPENER };\n        }\n\n        return { type: WINDOW_REFERENCES.PARENT, distance: getDistanceFromTop(window) };\n    };\n\n    const runTimeout = () : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            const timeout = props.timeout;\n\n            if (timeout) {\n                return initPromise.timeout(timeout, new Error(`Loading component timed out after ${ timeout } milliseconds`));\n            }\n        });\n    };\n\n    const initChild = (childExports : ChildExportsType<P>) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            childComponent = childExports;\n            initPromise.resolve();\n            clean.register(() => childExports.close.fireAndForget().catch(noop));\n        });\n    };\n\n    const resize = ({ width, height } : {| width? : ?number, height? : ?number |}) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            event.trigger(EVENT.RESIZE, { width, height });\n        });\n    };\n\n    const destroy = (err? : mixed) : ZalgoPromise<void> => {\n        // eslint-disable-next-line promise/no-promise-in-callback\n        return ZalgoPromise.try(() => {\n            return event.trigger(EVENT.DESTROY);\n        }).catch(noop).then(() => {\n            return clean.all();\n        }).then(() => {\n            initPromise.asyncReject(err || new Error('Component destroyed'));\n        });\n    };\n\n    const close = () : ZalgoPromise<void> => {\n        if (closeOverride) {\n            return closeOverride();\n        }\n\n        return ZalgoPromise.try(() => {\n            return event.trigger(EVENT.CLOSE);\n        }).then(() => {\n            return destroy(new Error(`Window closed`));\n        });\n    };\n\n    const open = (context : $Values<typeof CONTEXT>, { proxyWin, proxyFrame, windowName } : {| proxyWin : ProxyWindow, proxyFrame : ?ProxyObject<HTMLIFrameElement>, windowName : string |}) : ZalgoPromise<ProxyWindow> => {\n        if (openOverride) {\n            return openOverride(context,  { proxyWin, proxyFrame, windowName });\n        }\n        \n        return ZalgoPromise.try(() => {\n            if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n                if (!proxyFrame) {\n                    throw new Error(`Expected proxy frame to be passed`);\n                }\n        \n                return proxyFrame.get().then(frame => {\n                    return awaitFrameWindow(frame).then(win => {\n        \n                        const frameWatcher = watchElementForClose(frame, close);\n                        clean.register(() => frameWatcher.cancel());\n                        clean.register(() => destroyElement(frame));\n                        clean.register(() => cleanUpWindow(win));\n        \n                        return win;\n                    });\n                });\n            } else if (context === CONTEXT.POPUP && __ZOID__.__POPUP_SUPPORT__) {\n                let { width, height } = dimensions;\n    \n                width = normalizeDimension(width, window.outerWidth);\n                height = normalizeDimension(height, window.outerWidth);\n    \n                const win = popup('', {\n                    name: windowName,\n                    width,\n                    height,\n                    ...attributes.popup\n                });\n    \n                clean.register(() => closeWindow(win));\n                clean.register(() => cleanUpWindow(win));\n\n                return win;\n            } else {\n                throw new Error(`No render context available for ${ context }`);\n            }\n\n        }).then(win => {\n            proxyWin.setWindow(win, { send });\n            return proxyWin;\n        });\n    };\n\n    const watchForUnload = () => {\n        return ZalgoPromise.try(() => {\n            const unloadWindowListener = addEventListener(window, 'unload', once(() => {\n                destroy(new Error(`Window navigated away`));\n            }));\n    \n            const closeParentWindowListener = onCloseWindow(parentWin, destroy, 3000);\n            clean.register(closeParentWindowListener.cancel);\n            clean.register(unloadWindowListener.cancel);\n\n            if (watchForUnloadOverride) {\n                return watchForUnloadOverride();\n            }\n        });\n    };\n\n    const watchForClose = (proxyWin : ProxyWindow) : ZalgoPromise<void> => {\n        let cancelled = false;\n\n        clean.register(() => {\n            cancelled = true;\n        });\n\n        return ZalgoPromise.delay(2000).then(() => {\n            return proxyWin.isClosed();\n        }).then(isClosed => {\n            if (isClosed) {\n                return close();\n            } else if (!cancelled) {\n                return watchForClose(proxyWin);\n            }\n        });\n    };\n\n    const checkWindowClose = (proxyWin : ProxyWindow) : ZalgoPromise<boolean> => {\n        let closed = false;\n        \n        return proxyWin.isClosed().then(isClosed => {\n            if (isClosed) {\n                closed = true;\n                return close();\n            }\n\n            return ZalgoPromise.delay(200)\n                .then(() => proxyWin.isClosed())\n                .then(secondIsClosed => {\n                    if (secondIsClosed) {\n                        closed = true;\n                        return close();\n                    }\n                });\n        }).then(() => {\n            return closed;\n        });\n    };\n\n    const onError = (err : mixed) : ZalgoPromise<void> => {\n        if (onErrorOverride) {\n            return onErrorOverride(err);\n        }\n\n        return ZalgoPromise.try(() => {\n            if (handledErrors.indexOf(err) !== -1) {\n                return;\n            }\n\n            handledErrors.push(err);\n            initPromise.asyncReject(err);\n\n            return event.trigger(EVENT.ERROR, err);\n        });\n    };\n\n    initChild.onError = onError;\n\n    const buildParentExports = (win : ProxyWindow) : ParentExportsType<P> => {\n        const checkClose = () => checkWindowClose(win);\n        return { init: initChild, close, checkClose, resize, onError, show, hide };\n    };\n\n    const buildChildPayload = ({ proxyWin, childDomain, domain, target = window, context, uid } : {| proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string |} = {}) : ChildPayload => {\n        return {\n            uid,\n            context,\n            tag,\n            version:      __ZOID__.__VERSION__,\n            childDomain,\n            parentDomain: getDomain(window),\n            parent:       getWindowRef(target, childDomain, uid, context),\n            props:        getPropsRef(proxyWin, childDomain, domain, uid),\n            exports:      serializeMessage(proxyWin, domain, buildParentExports(proxyWin))\n        };\n    };\n\n    const buildWindowName = ({ proxyWin, childDomain, domain, target, uid, context } : {| proxyWin : ProxyWindow, childDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string |}) : string => {\n        const childPayload = buildChildPayload({ proxyWin, childDomain, domain, target, context, uid });\n        return `__${ ZOID }__${ name }__${ base64encode(JSON.stringify(childPayload)) }__`;\n    };\n\n    const renderTemplate = (renderer : (RenderOptionsType<P>) => ?HTMLElement, { context, uid, container, doc, frame, prerenderFrame } : {| context : $Values<typeof CONTEXT>, uid : string, container? : HTMLElement, doc : Document, frame? : ?HTMLIFrameElement, prerenderFrame? : ?HTMLIFrameElement |}) : ?HTMLElement => {\n        // $FlowFixMe\n        return renderer({\n            container, context, uid, doc, frame, prerenderFrame,\n            focus, close, state, props, tag, dimensions, event\n        });\n    };\n\n    const prerender = (proxyPrerenderWin : ProxyWindow, { context, uid } : {| context : $Values<typeof CONTEXT>, uid : string |}) : ZalgoPromise<void> => {\n        if (prerenderOverride) {\n            return prerenderOverride(proxyPrerenderWin, { context, uid });\n        }\n                                                                                                                                                                                                                                    \n        return ZalgoPromise.try(() => {\n            if (!prerenderTemplate) {\n                return;\n            }\n\n            let prerenderWindow = proxyPrerenderWin.getWindow();\n\n            if (!prerenderWindow || !isSameDomain(prerenderWindow) || !isBlankDomain(prerenderWindow)) {\n                return;\n            }\n\n            prerenderWindow = assertSameDomain(prerenderWindow);\n    \n            const doc = prerenderWindow.document;\n            const el = renderTemplate(prerenderTemplate, { context, uid, doc });\n\n            if (!el) {\n                return;\n            }\n\n            if (el.ownerDocument !== doc) {\n                throw new Error(`Expected prerender template to have been created with document from child window`);\n            }\n\n            writeElementToWindow(prerenderWindow, el);\n\n            let { width = false, height = false, element = 'body' } = autoResize;\n            element = getElementSafe(element, doc);\n            \n            if (element && (width || height)) {\n                onResize(element, ({ width: newWidth, height: newHeight }) => {\n                    resize({\n                        width:  width ? newWidth : undefined,\n                        height: height ? newHeight : undefined\n                    });\n                }, { width, height, win: prerenderWindow });\n            }\n        });\n    };\n\n    const renderContainer : RenderContainer = (proxyContainer : ProxyObject<HTMLElement>, { proxyFrame, proxyPrerenderFrame, context, uid } :\n        {| context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyObject<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyObject<HTMLIFrameElement> |}) : ZalgoPromise<?ProxyObject<HTMLElement>> => {\n\n        if (renderContainerOverride) {\n            return renderContainerOverride(proxyContainer, { proxyFrame, proxyPrerenderFrame, context, uid });\n        }\n\n        return ZalgoPromise.hash({\n            container:      proxyContainer.get(),\n            // $FlowFixMe\n            frame:          proxyFrame ? proxyFrame.get() : null,\n            // $FlowFixMe\n            prerenderFrame: proxyPrerenderFrame ? proxyPrerenderFrame.get() : null\n        }).then(({ container, frame, prerenderFrame }) => {\n            const innerContainer = renderTemplate(containerTemplate, { context, uid, container, frame, prerenderFrame, doc: document });\n            if (innerContainer) {\n                if (!visible) {\n                    hideElement(innerContainer);\n                }\n                appendChild(container, innerContainer);\n                clean.register(() => destroyElement(innerContainer));\n                currentProxyContainer = getProxyObject(innerContainer);\n                return currentProxyContainer;\n            }\n        });\n    };\n\n    const openBridge = (proxyWin : ProxyWindow, domain : string, context : $Values<typeof CONTEXT>) : ?ZalgoPromise<?CrossDomainWindowType> => {\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            return ZalgoPromise.try(() => {\n                return proxyWin.awaitWindow();\n                \n            }).then(win => {\n                if (!bridge || !bridge.needsBridge({ win, domain }) || bridge.hasBridge(domain, domain)) {\n                    return;\n                }\n\n                const bridgeUrl = options.bridgeUrl;\n\n                if (!bridgeUrl) {\n                    throw new Error(`Bridge needed to render ${ context }`);\n                }\n\n                const bridgeDomain = getDomainFromUrl(bridgeUrl);\n                bridge.linkUrl(win, domain);\n                return bridge.openBridge(normalizeMockUrl(bridgeUrl), bridgeDomain);\n            });\n        }\n    };\n\n    const getHelpers = () : ParentHelpers<P> => {\n        return {\n            state, event, close, focus, resize,\n            // eslint-disable-next-line no-use-before-define\n            onError, updateProps, show, hide\n        };\n    };\n\n    const setProps = (newProps : PropsInputType<P>, isUpdate? : boolean = false) => {\n        if (__DEBUG__ && validate) {\n            validate({ props: newProps });\n        }\n\n        const helpers = getHelpers();\n        extendProps(propsDef, props, newProps, helpers, isUpdate);\n    };\n\n    const updateProps = (newProps : PropsInputType<P>) : ZalgoPromise<void> => {\n        setProps(newProps, true);\n\n        return initPromise.then(() => {\n            const child = childComponent;\n            const proxyWin = currentProxyWin;\n            \n            if (!child || !proxyWin) {\n                return;\n            }\n\n            return child.updateProps(getPropsForChild(getDomainMatcher())).catch(err => {\n                return checkWindowClose(proxyWin).then(closed => {\n                    if (!closed) {\n                        throw err;\n                    }\n                });\n            });\n        });\n    };\n\n    const delegate = (context : $Values<typeof CONTEXT>, target : CrossDomainWindowType) : ZalgoPromise<DelegateOverrides> => {\n        const delegateProps = {};\n        for (const propName of Object.keys(props)) {\n            const propDef = propsDef[propName];\n            if (propDef && propDef.allowDelegate) {\n                delegateProps[propName] = props[propName];\n            }\n        }\n\n        const childOverridesPromise = send(target, `${ POST_MESSAGE.DELEGATE }_${ name }`, {\n            overrides: { props: delegateProps, event, close, onError }\n        }).then(({ data: { parent } }) => {\n            clean.register(() => {\n                if (!isWindowClosed(target)) {\n                    return parent.destroy();\n                }\n            });\n            return parent.getDelegateOverrides();\n\n        }).catch(err => {\n            throw new Error(`Unable to delegate rendering. Possibly the component is not loaded in the target window.\\n\\n${ stringifyError(err) }`);\n        });\n\n        getProxyContainerOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.getProxyContainer(...args));\n        renderContainerOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.renderContainer(...args));\n        showOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.show(...args));\n        hideOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.hide(...args));\n        watchForUnloadOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.watchForUnload(...args));\n\n        if (context === CONTEXT.IFRAME && __ZOID__.__IFRAME_SUPPORT__) {\n            getProxyWindowOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.getProxyWindow(...args));\n            openFrameOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.openFrame(...args));\n            openPrerenderFrameOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.openPrerenderFrame(...args));\n            prerenderOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.prerender(...args));\n            openOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.open(...args));\n            openPrerenderOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.openPrerender(...args));\n        } else if (context === CONTEXT.POPUP && __ZOID__.__POPUP_SUPPORT__) {\n            setProxyWinOverride = (...args) => childOverridesPromise.then(childOverrides => childOverrides.setProxyWin(...args));\n        }\n\n        return childOverridesPromise;\n    };\n\n    const getDelegateOverrides = () : ZalgoPromise<DelegateOverrides> => {\n        return ZalgoPromise.try(() => {\n            return {\n                getProxyContainer, show, hide, renderContainer, getProxyWindow, watchForUnload,\n                openFrame, openPrerenderFrame, prerender, open, openPrerender, setProxyWin\n            };\n        });\n    };\n\n    const checkAllowRender = (target : CrossDomainWindowType, domain : string | RegExp, container : string | HTMLElement) => {\n        if (target === window) {\n            return;\n        }\n\n        if (!isSameTopWindow(window, target)) {\n            throw new Error(`Can only renderTo an adjacent frame`);\n        }\n\n        const origin = getDomain();\n\n        if (!matchDomain(domain, origin) && !isSameDomain(target)) {\n            throw new Error(`Can not render remotely to ${ domain.toString() } - can only render to ${ origin }`);\n        }\n\n        if (container && typeof container !== 'string') {\n            throw new Error(`Container passed to renderTo must be a string selector, got ${ typeof container } }`);\n        }\n    };\n\n    const init = () => {\n        setupEvents();\n    };\n\n    const render = (target : CrossDomainWindowType, container : string | HTMLElement, context : $Values<typeof CONTEXT>) : ZalgoPromise<void> => {\n        return ZalgoPromise.try(() => {\n            const uid = `${ ZOID }-${ tag }-${ uniqueID() }`;\n            const domain = getDomainMatcher();\n            const childDomain = getChildDomain();\n            \n            checkAllowRender(target, domain, container);\n\n            const delegatePromise = ZalgoPromise.try(() => {\n                if (target !== window) {\n                    return delegate(context, target);\n                }\n            });\n\n            const windowProp = props.window;\n\n            const watchForUnloadPromise = watchForUnload();\n            \n            const buildUrlPromise = buildUrl();\n            const onRenderPromise = event.trigger(EVENT.RENDER);\n\n            const getProxyContainerPromise = getProxyContainer(container);\n            const getProxyWindowPromise = getProxyWindow();\n\n            const buildWindowNamePromise = getProxyWindowPromise.then(proxyWin => {\n                return buildWindowName({ proxyWin, childDomain, domain, target, context, uid });\n            });\n\n            const openFramePromise = buildWindowNamePromise.then(windowName => openFrame(context, { windowName }));\n            const openPrerenderFramePromise = openPrerenderFrame(context);\n\n            const renderContainerPromise = ZalgoPromise.hash({ proxyContainer: getProxyContainerPromise, proxyFrame: openFramePromise, proxyPrerenderFrame: openPrerenderFramePromise }).then(({ proxyContainer, proxyFrame, proxyPrerenderFrame }) => {\n                return renderContainer(proxyContainer, { context, uid, proxyFrame, proxyPrerenderFrame });\n            }).then(proxyContainer => {\n                return proxyContainer;\n            });\n\n            const openPromise = ZalgoPromise.hash({ windowName: buildWindowNamePromise, proxyFrame: openFramePromise, proxyWin: getProxyWindowPromise }).then(({ windowName, proxyWin, proxyFrame }) => {\n                return windowProp\n                    ? proxyWin\n                    : open(context, { windowName, proxyWin, proxyFrame });\n            });\n\n            const openPrerenderPromise = ZalgoPromise.hash({ proxyWin: openPromise, proxyPrerenderFrame: openPrerenderFramePromise }).then(({ proxyWin, proxyPrerenderFrame }) => {\n                return openPrerender(context, proxyWin, proxyPrerenderFrame);\n            });\n\n            const setStatePromise = openPromise.then(proxyWin => {\n                currentProxyWin = proxyWin;\n                return setProxyWin(proxyWin);\n            });\n            \n            const prerenderPromise = ZalgoPromise.hash({ proxyPrerenderWin: openPrerenderPromise, state: setStatePromise }).then(({ proxyPrerenderWin }) => {\n                return prerender(proxyPrerenderWin, { context, uid });\n            });\n\n            const setWindowNamePromise =  ZalgoPromise.hash({ proxyWin: openPromise, windowName: buildWindowNamePromise }).then(({ proxyWin, windowName }) => {\n                if (windowProp) {\n                    return proxyWin.setName(windowName);\n                }\n            });\n\n            const loadUrlPromise = ZalgoPromise.hash({ proxyWin: openPromise, builtUrl: buildUrlPromise, windowName: setWindowNamePromise, prerender: prerenderPromise }).then(({ proxyWin, builtUrl }) => {\n                return proxyWin.setLocation(builtUrl);\n            });\n\n            const watchForClosePromise = openPromise.then(proxyWin => {\n                watchForClose(proxyWin);\n            });\n\n            const onDisplayPromise = ZalgoPromise.hash({ container: renderContainerPromise, prerender: prerenderPromise }).then(() => {\n                return event.trigger(EVENT.DISPLAY);\n            });\n\n            const openBridgePromise = openPromise.then(proxyWin => {\n                return openBridge(proxyWin, childDomain, context);\n            });\n\n            const runTimeoutPromise = loadUrlPromise.then(() => {\n                return runTimeout();\n            });\n\n            const onRenderedPromise = initPromise.then(() => {\n                return event.trigger(EVENT.RENDERED);\n            });\n\n            return ZalgoPromise.hash({\n                initPromise, buildUrlPromise, onRenderPromise, getProxyContainerPromise, openFramePromise, openPrerenderFramePromise, renderContainerPromise, openPromise,\n                openPrerenderPromise, setStatePromise, prerenderPromise, loadUrlPromise, buildWindowNamePromise, setWindowNamePromise, watchForClosePromise, onDisplayPromise,\n                openBridgePromise, runTimeoutPromise, onRenderedPromise, delegatePromise, watchForUnloadPromise\n            });\n            \n        }).catch(err => {\n            return ZalgoPromise.all([\n                onError(err),\n                destroy(err)\n            ]).then(() => {\n                throw err;\n            }, () => {\n                throw err;\n            });\n        }).then(noop);\n    };\n\n    return {\n        init,\n        render,\n        destroy,\n        setProps,\n        getHelpers,\n        getDelegateOverrides\n    };\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindowClosed } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window ${ isWindowClosed(win) ? 'closed' : 'cleaned up' } before response`)).catch(noop);\n    }\n}\n","/* @flow */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { destroyElement, toCSS } from 'belter/src';\n\nimport { type RenderOptionsType } from '../../parent/parent';\nimport { EVENT } from '../../constants';\n\nconst CLASS = {\n    VISIBLE:   'zoid-visible',\n    INVISIBLE: 'zoid-invisible'\n};\n\nexport function defaultContainerTemplate<P>({ uid, frame, prerenderFrame, doc, props, event, dimensions : { width, height } } : RenderOptionsType<P>) : ?HTMLElement {\n    if (__ZOID__.__DEFAULT_CONTAINER__) {\n        if (!frame || !prerenderFrame) {\n            return;\n        }\n\n        const div = doc.createElement('div');\n        div.setAttribute('id', uid);\n        const style = doc.createElement('style');\n        if (props.cspNonce) {\n            style.setAttribute('nonce', props.cspNonce);\n        }\n\n        style.appendChild(doc.createTextNode(`\n            #${ uid } {\n                display: inline-block;\n                position: relative;\n                width: ${ width };\n                height: ${ height };\n            }\n\n            #${ uid } > iframe {\n                display: inline-block;\n                position: absolute;\n                width: 100%;\n                height: 100%;\n                top: 0;\n                left: 0;\n                transition: opacity .2s ease-in-out;\n            }\n\n            #${ uid } > iframe.${ CLASS.INVISIBLE } {\n                opacity: 0;\n            }\n\n            #${ uid } > iframe.${ CLASS.VISIBLE } {\n                opacity: 1;\n        }\n        `));\n\n        div.appendChild(frame);\n        div.appendChild(prerenderFrame);\n        div.appendChild(style);\n\n        prerenderFrame.classList.add(CLASS.VISIBLE);\n        frame.classList.add(CLASS.INVISIBLE);\n    \n        event.on(EVENT.RENDERED, () => {\n            prerenderFrame.classList.remove(CLASS.VISIBLE);\n            prerenderFrame.classList.add(CLASS.INVISIBLE);\n    \n            frame.classList.remove(CLASS.INVISIBLE);\n            frame.classList.add(CLASS.VISIBLE);\n    \n            setTimeout(() => {\n                destroyElement(prerenderFrame);\n            }, 1);\n        });\n\n        event.on(EVENT.RESIZE, ({ width: newWidth, height: newHeight }) => {\n            if (typeof newWidth === 'number') {\n                div.style.width = toCSS(newWidth);\n            }\n    \n            if (typeof newHeight === 'number') {\n                div.style.height = toCSS(newHeight);\n            }\n        });\n\n        return div;\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, noop, type EventEmitterType } from 'belter/src';\nimport { isWindow, type CrossDomainWindowType, isWindowClosed, isSameDomain } from 'cross-domain-utils/src';\nimport { ProxyWindow, toProxyWindow } from 'post-robot/src';\n\nimport { PROP_SERIALIZATION } from '../constants';\n\nexport type EventHandlerType<T> = (T) => void | ZalgoPromise<void>;\n\nexport type timeoutPropType = number;\nexport type windowPropType = CrossDomainWindowType | ProxyWindow;\nexport type cspNoncePropType = string;\nexport type closePropType = () => ZalgoPromise<void>;\nexport type focusPropType = () => ZalgoPromise<void>;\nexport type showPropType = () => ZalgoPromise<void>;\nexport type hidePropType = () => ZalgoPromise<void>;\nexport type resizePropType = ({| width : ?number, height : ?number |}) => ZalgoPromise<void>;\nexport type getParentPropType = () => CrossDomainWindowType;\nexport type getParentDomainPropType = () => string;\n\nexport type onDisplayPropType = EventHandlerType<void>;\nexport type onRenderedPropType = EventHandlerType<void>;\nexport type onRenderPropType = EventHandlerType<void>;\nexport type onClosePropType = EventHandlerType<void>;\nexport type onDestroyPropType = EventHandlerType<void>;\nexport type onResizePropType = EventHandlerType<void>;\nexport type onFocusPropType = EventHandlerType<void>;\nexport type onErrorPropType = EventHandlerType<mixed>;\nexport type onPropsPropType<P> = ((PropsType<P>) => void) => void; // eslint-disable-line no-use-before-define\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type PropsInputType<P> = {\n    timeout? : timeoutPropType,\n    window? : windowPropType,\n    cspNonce? : cspNoncePropType,\n\n    onDisplay? : onDisplayPropType,\n    onRendered? : onRenderedPropType,\n    onRender? : onRenderPropType,\n    onClose? : onClosePropType,\n    onDestroy? : onDestroyPropType,\n    onResize? : onResizePropType,\n    onFocus? : onFocusPropType,\n    onError? : onErrorPropType,\n    onProps? : onPropsPropType<P>\n} & P;\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type PropsType<P> = {\n    timeout? : timeoutPropType,\n    window? : ?windowPropType,\n    close? : ?closePropType,\n    focus? : ?focusPropType,\n    resize? : ?resizePropType,\n    cspNonce? : ?cspNoncePropType,\n\n    onDisplay : onDisplayPropType,\n    onRendered : onRenderedPropType,\n    onRender : onRenderPropType,\n    onClose : onClosePropType,\n    onDestroy : onDestroyPropType,\n    onResize : onResizePropType,\n    onFocus : onFocusPropType,\n    onError : onErrorPropType,\n    onProps : onPropsPropType<P>\n} & P;\n\ntype PropDefinitionType<T, P, S : string> = {|\n    type : S,\n    alias? : string,\n    value? : ({|\n        props : P,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => ?T,\n    default? : ({|\n        props : P,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => ?T,\n    decorate? : ({|\n        value : T,\n        props : PropsType<P>,\n        state : Object,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    |}) => T,\n    childDecorate? : ({|\n        value : ?T,\n        close : () => ZalgoPromise<void>,\n        focus : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        onProps : ((PropsType<P>) => void) => void,\n        resize : ({| width : ?number, height : ?number |}) => ZalgoPromise<void>,\n        getParentDomain : () => string,\n        getParent : () => CrossDomainWindowType,\n        show : () => ZalgoPromise<void>,\n        hide : () => ZalgoPromise<void>\n    |}) => ?T,\n    required? : boolean,\n    queryParam? : boolean | string | ({| value : T |}) => (string | ZalgoPromise<string>),\n    queryValue? : ({| value : T |}) => (ZalgoPromise<mixed> | mixed),\n    sendToChild? : boolean,\n    allowDelegate? : boolean,\n    validate? : ({| value : T, props : PropsInputType<P> |}) => void,\n    sameDomain? : boolean,\n    serialization? : $Values<typeof PROP_SERIALIZATION>\n|};\n\nexport type BooleanPropDefinitionType<T : boolean, P> = PropDefinitionType<T, P, 'boolean'>;\nexport type StringPropDefinitionType<T : string, P> = PropDefinitionType<T, P, 'string'>;\nexport type NumberPropDefinitionType<T : number, P> = PropDefinitionType<T, P, 'number'>;\nexport type FunctionPropDefinitionType<T : Function, P> = PropDefinitionType<T, P, 'function'>;\nexport type ArrayPropDefinitionType<T : Array<*> | $ReadOnlyArray<*>, P> = PropDefinitionType<T, P, 'array'>; // eslint-disable-line flowtype/no-mutable-array\nexport type ObjectPropDefinitionType<T : Object, P> = PropDefinitionType<T, P, 'object'>;\n\nexport type MixedPropDefinitionType<P> = BooleanPropDefinitionType<*, P> | StringPropDefinitionType<*, P> | NumberPropDefinitionType<*, P> | FunctionPropDefinitionType<*, P> | ObjectPropDefinitionType<*, P> | ArrayPropDefinitionType<*, P>;\n\nexport type UserPropsDefinitionType<P> = {\n    [string] : MixedPropDefinitionType<P>\n};\n\nexport type BuiltInPropsDefinitionType<P> = {|\n    timeout : NumberPropDefinitionType<timeoutPropType, P>,\n    window : ObjectPropDefinitionType<windowPropType, P>,\n    close : FunctionPropDefinitionType<closePropType, P>,\n    focus : FunctionPropDefinitionType<focusPropType, P>,\n    resize : FunctionPropDefinitionType<resizePropType, P>,\n    cspNonce : StringPropDefinitionType<cspNoncePropType, P>,\n    getParent : FunctionPropDefinitionType<getParentPropType, P>,\n    getParentDomain : FunctionPropDefinitionType<getParentDomainPropType, P>,\n    hide : FunctionPropDefinitionType<hidePropType, P>,\n    show : FunctionPropDefinitionType<showPropType, P>,\n\n    onDisplay : FunctionPropDefinitionType<onDisplayPropType, P>,\n    onRendered : FunctionPropDefinitionType<onRenderedPropType, P>,\n    onRender : FunctionPropDefinitionType<onRenderPropType, P>,\n    onClose : FunctionPropDefinitionType<onClosePropType, P>,\n    onDestroy : FunctionPropDefinitionType<onDestroyPropType, P>,\n    onResize : FunctionPropDefinitionType<onClosePropType, P>,\n    onFocus : FunctionPropDefinitionType<onFocusPropType, P>,\n    onError : FunctionPropDefinitionType<onErrorPropType, P>,\n    onProps : FunctionPropDefinitionType<onPropsPropType<P>, P>\n|};\n\nexport type PropsDefinitionType<P> = {|\n    ...BuiltInPropsDefinitionType<P>,\n    [ string ] : MixedPropDefinitionType<P>\n|};\n\nconst defaultNoop = () => noop;\nconst decorateOnce = ({ value }) => once(value);\n\nexport function getBuiltInProps<P>() : BuiltInPropsDefinitionType<P> {\n    return {\n        window: {\n            type:          'object',\n            sendToChild:   false,\n            required:      false,\n            allowDelegate: true,\n            validate:      ({ value }) => {\n                if (__DEBUG__) {\n                    if (!isWindow(value) && !ProxyWindow.isProxyWindow(value)) {\n                        throw new Error(`Expected Window or ProxyWindow`);\n                    }\n    \n                    if (isWindow(value)) {\n                        // $FlowFixMe\n                        if (isWindowClosed(value)) {\n                            throw new Error(`Window is closed`);\n                        }\n    \n                        // $FlowFixMe\n                        if (!isSameDomain(value)) {\n                            throw new Error(`Window is not same domain`);\n                        }\n                    }\n                }\n            },\n            decorate: ({ value }) => {\n                return toProxyWindow(value);\n            }\n        },\n\n        timeout: {\n            type:        'number',\n            required:    false,\n            sendToChild: false\n        },\n\n        close: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ close }) => close\n        },\n\n        focus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ focus }) => focus\n        },\n\n        resize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ resize }) => resize\n        },\n\n        cspNonce: {\n            type:     'string',\n            required: false\n        },\n\n        getParent: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParent }) => getParent\n        },\n\n        getParentDomain: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ getParentDomain }) => getParentDomain\n        },\n\n        show: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ show }) => show\n        },\n\n        hide: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ hide }) => hide\n        },\n\n        onDisplay: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onRendered: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onRender: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onClose: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onDestroy: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onResize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop\n        },\n\n        onFocus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop\n        },\n\n        onError: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ onError }) => onError\n        },\n\n        onProps: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            default:       defaultNoop,\n            childDecorate: ({ onProps }) => onProps\n        }\n    };\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { setup as setupPostRobot, on, send, bridge, toProxyWindow, destroy as destroyPostRobot } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindow, getDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop, isElement, cleanup, memoize } from 'belter/src';\n\nimport { getChildPayload, childComponent, type ChildComponent } from '../child';\nimport { type RenderOptionsType, type ParentHelpers, parentComponent } from '../parent/parent';\nimport { CONTEXT, POST_MESSAGE, WILDCARD, DEFAULT_DIMENSIONS } from '../constants';\nimport { react, angular, vue, angular2 } from '../drivers';\nimport { getGlobal, destroyGlobal } from '../lib';\nimport type { CssDimensionsType, StringMatcherType } from '../types';\n\nimport { validateOptions } from './validate';\nimport { defaultContainerTemplate, defaultPrerenderTemplate } from './templates';\nimport { getBuiltInProps, type UserPropsDefinitionType, type PropsDefinitionType, type PropsInputType, type PropsType } from './props';\n\ntype LoggerPayload = { [string] : ?string };\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype Logger = {\n    info : (event : string, payload? : LoggerPayload) => any // eslint-disable-line flowtype/no-weak-types\n};\n\n/*  Component\n    ---------\n\n    This is the spec for the component. The idea is, when I call zoid.create(), it will create a new instance\n    of Component with the blueprint needed to set up ParentComponents and ChildComponents.\n\n    This is the one portion of code which is required by -- and shared to -- both the parent and child windows, and\n    contains all of the configuration needed for them to set themselves up.\n*/\n\nexport type ComponentOptionsType<P> = {|\n\n    tag : string,\n\n    url : string | ({| props : PropsType<P> |}) => string,\n    domain? : string | RegExp,\n    bridgeUrl? : string,\n\n    props? : UserPropsDefinitionType<P>,\n\n    dimensions? : CssDimensionsType,\n    autoResize? : {| width? : boolean, height? : boolean, element? : string |},\n\n    allowedParentDomains? : StringMatcherType,\n\n    attributes? : {|\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    |},\n\n    defaultContext? : $Values<typeof CONTEXT>,\n\n    containerTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n\n    validate? : ({| props : PropsInputType<P> |}) => void,\n\n    logger? : Logger\n|};\n\ntype AttributesType = {|\n    iframe? : { [string] : string },\n    popup? : { [string] : string }\n|};\n\ntype AutoResizeType = {|\n    width? : boolean,\n    height? : boolean,\n    element? : string\n|};\n\nexport type NormalizedComponentOptionsType<P> = {|\n    tag : string,\n    name : string,\n\n    url : string | ({| props : PropsType<P> |}) => string,\n    domain : ?(string | RegExp),\n    bridgeUrl : ?string,\n\n    propsDef : PropsDefinitionType<P>,\n    dimensions : CssDimensionsType,\n    autoResize : AutoResizeType,\n\n    allowedParentDomains : StringMatcherType,\n\n    attributes : AttributesType,\n\n    defaultContext : $Values<typeof CONTEXT>,\n\n    containerTemplate : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate : ?(RenderOptionsType<P>) => ?HTMLElement,\n\n    validate : ?({| props : PropsInputType<P> |}) => void,\n    logger : Logger\n|};\n\ntype ZoidRenderer = {|\n    render : (container? : string | HTMLElement, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    renderTo : (target : CrossDomainWindowType, container? : string, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>\n|};\n\nexport type ZoidComponentInstance<P> = {| ...ParentHelpers<P>, ...ZoidRenderer |};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type ZoidComponent<P> = {\n    (PropsInputType<P>) : ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    xprops? : PropsType<P>,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>\n};\n\nconst getDefaultAttributes = () : AttributesType => {\n    // $FlowFixMe\n    return {};\n};\n\nconst getDefaultAutoResize = () : AutoResizeType => {\n    // $FlowFixMe\n    return {};\n};\n\nfunction normalizeOptions<P>(options : ComponentOptionsType<P>) : NormalizedComponentOptionsType<P> {\n    let {\n        tag,\n        url,\n        domain,\n        bridgeUrl,\n        props: propsDef = {},\n        dimensions = {},\n        autoResize = getDefaultAutoResize(),\n        allowedParentDomains = WILDCARD,\n        attributes = getDefaultAttributes(),\n        defaultContext = CONTEXT.IFRAME,\n        containerTemplate = (__ZOID__.__DEFAULT_CONTAINER__ ? defaultContainerTemplate : null),\n        prerenderTemplate = (__ZOID__.__DEFAULT_PRERENDER__ ? defaultPrerenderTemplate : null),\n        validate,\n        logger = { info: noop }\n    } = options;\n\n    const name = tag.replace(/-/g, '_');\n    const { width = DEFAULT_DIMENSIONS.WIDTH, height = DEFAULT_DIMENSIONS.HEIGHT } = dimensions;\n\n    propsDef = { ...getBuiltInProps(), ...propsDef };\n\n    if (!containerTemplate) {\n        throw new Error(`Container template required`);\n    }\n\n    return {\n        name,\n        tag,\n        url,\n        domain,\n        bridgeUrl,\n        propsDef,\n        dimensions: { width, height },\n        autoResize,\n        allowedParentDomains,\n        attributes,\n        defaultContext,\n        containerTemplate,\n        prerenderTemplate,\n        validate,\n        logger\n    };\n}\n\nlet clean = cleanup();\n\nexport type Component<P> = {|\n    init : (PropsInputType<P>) => ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>,\n    registerChild : () => ?ChildComponent<P>\n|};\n\nexport function component<P>(opts : ComponentOptionsType<P>) : Component<P> {\n    if (__DEBUG__) {\n        validateOptions(opts);\n    }\n\n    const options = normalizeOptions(opts);\n\n    const {\n        name,\n        tag,\n        defaultContext,\n        propsDef\n    } = options;\n\n    const global = getGlobal();\n    const driverCache = {};\n\n    const isChild = () : boolean => {\n        const payload = getChildPayload();\n        return Boolean(payload && payload.tag === tag && payload.childDomain === getDomain());\n    };\n\n    const registerChild = memoize(() : ?ChildComponent<P> => {\n        if (isChild()) {\n            if (window.xprops) {\n                delete global.components[tag];\n                throw new Error(`Can not register ${ name } as child - child already registered`);\n            }\n\n            const child = childComponent(options);\n            child.init();\n            return child;\n        }\n    });\n\n    const listenForDelegate = () => {\n        on(`${ POST_MESSAGE.ALLOW_DELEGATE }_${ name }`, () => {\n            return true;\n        });\n\n        on(`${ POST_MESSAGE.DELEGATE }_${ name }`, ({ source, data: { overrides } }) => {\n            return {\n                parent: parentComponent(options, overrides, source)\n            };\n        });\n    };\n\n    const canRenderTo = (win : CrossDomainWindowType) : ZalgoPromise<boolean> => {\n        return send(win, `${ POST_MESSAGE.ALLOW_DELEGATE }_${ name }`).then(({ data }) => {\n            return data;\n        }).catch(() => {\n            return false;\n        });\n    };\n\n    const getDefaultContainer = (context : $Values<typeof CONTEXT>, container? : string | HTMLElement) : string | HTMLElement => {\n        if (container) {\n            if (typeof container !== 'string' && !isElement(container)) {\n                throw new TypeError(`Expected string or element selector to be passed`);\n            }\n\n            return container;\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return 'body';\n        }\n\n        throw new Error(`Expected element to be passed to render iframe`);\n    };\n\n    const getDefaultContext = (props : PropsInputType<P>, context : ?$Values<typeof CONTEXT>) : ZalgoPromise<$Values<typeof CONTEXT>> => {\n        return ZalgoPromise.try(() => {\n            if (props.window) {\n                return toProxyWindow(props.window).getType();\n            }\n    \n            if (context) {\n                if (context !== CONTEXT.IFRAME && context !== CONTEXT.POPUP) {\n                    throw new Error(`Unrecognized context: ${ context }`);\n                }\n                \n                return context;\n            }\n    \n            return defaultContext;\n        });\n    };\n\n    const getDefaultInputProps = () : PropsInputType<P> => {\n        // $FlowFixMe\n        return {};\n    };\n\n    const init = (props : PropsInputType<P>) : ZoidComponentInstance<P> => {\n        props = props || getDefaultInputProps();\n        props.onDestroy = memoize(props.onDestroy || noop);\n        const parent = parentComponent(options);\n        \n        parent.init();\n        parent.setProps(props);\n\n        clean.register(() => {\n            parent.destroy(new Error(`zoid destroyed all components`));\n        });\n\n        const render = (target, container, context) => {\n            return ZalgoPromise.try(() => {\n                if (!isWindow(target)) {\n                    throw new Error(`Must pass window to renderTo`);\n                }\n\n                return getDefaultContext(props, context);\n                \n            }).then(finalContext => {\n                container = getDefaultContainer(finalContext, container);\n                return parent.render(target, container, finalContext);\n\n            }).catch(err => {\n                return parent.destroy(err).then(() => {\n                    throw err;\n                });\n            });\n        };\n\n        return {\n            ...parent.getHelpers(),\n            render:   (container, context) => render(window, container, context),\n            renderTo: (target, container, context) => render(target, container, context)\n        };\n    };\n\n    const driver = (driverName : string, dep : mixed) : mixed => {\n        if (__ZOID__.__FRAMEWORK_SUPPORT__) {\n            const drivers = { react, angular, vue, angular2 };\n\n            if (!drivers[driverName]) {\n                throw new Error(`Could not find driver for framework: ${ driverName }`);\n            }\n    \n            if (!driverCache[driverName]) {\n                driverCache[driverName] = drivers[driverName].register(tag, propsDef, init, dep);\n            }\n    \n            return driverCache[driverName];\n        } else {\n            throw new Error(`Driver support not enabled`);\n        }\n    };\n\n    registerChild();\n    listenForDelegate();\n\n    global.components = global.components || {};\n    if (global.components[tag]) {\n        throw new Error(`Can not register multiple components with the same tag: ${ tag }`);\n    }\n    global.components[tag] = true;\n\n    return {\n        init,\n        driver,\n        isChild,\n        canRenderTo,\n        registerChild\n    };\n}\n\nexport type ComponentDriverType<P, L, D> = {|\n    register : (string, PropsDefinitionType<P>, (PropsInputType<P>) => ZoidComponentInstance<P>, L) => D\n|};\n\nexport function create<P>(options : ComponentOptionsType<P>) : ZoidComponent<P> {\n    setupPostRobot();\n\n    const comp = component(options);\n\n    const init = (props) => comp.init(props);\n    init.driver = (name, dep) => comp.driver(name, dep);\n    init.isChild = () => comp.isChild();\n    init.canRenderTo = (win) => comp.canRenderTo(win);\n\n    const child = comp.registerChild();\n    if (child) {\n        window.xprops = init.xprops = child.getProps();\n    }\n    \n    return init;\n}\n\nexport function destroyAll() : ZalgoPromise<void> {\n    if (bridge) {\n        bridge.destroyBridges();\n    }\n\n    const destroyPromise = clean.all();\n    clean = cleanup();\n    return destroyPromise;\n}\n\nexport const destroyComponents = destroyAll;\n\nexport function destroy() {\n    destroyAll();\n    destroyGlobal();\n    destroyPostRobot();\n}\n"],"sourceRoot":""}