{"version":3,"sources":["webpack://zoid/webpack/universalModuleDefinition","webpack://zoid/webpack/bootstrap","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://zoid/./node_modules/zalgo-promise/src/utils.js","webpack://zoid/./node_modules/zalgo-promise/src/exceptions.js","webpack://zoid/./node_modules/zalgo-promise/src/flush.js","webpack://zoid/./node_modules/zalgo-promise/src/promise.js","webpack://zoid/./node_modules/cross-domain-utils/src/util.js","webpack://zoid/./node_modules/cross-domain-utils/src/constants.js","webpack://zoid/./node_modules/cross-domain-utils/src/utils.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/util.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/weakmap.js","webpack://zoid/./node_modules/belter/src/util.js","webpack://zoid/./node_modules/belter/src/dom.js","webpack://zoid/./node_modules/cross-domain-safe-weakmap/src/native.js","webpack://zoid/./node_modules/belter/src/css.js","webpack://zoid/./node_modules/post-robot/src/conf/config.js","webpack://zoid/./node_modules/post-robot/src/conf/constants.js","webpack://zoid/./node_modules/post-robot/src/global.js","webpack://zoid/./node_modules/post-robot/src/lib/hello.js","webpack://zoid/./node_modules/post-robot/src/lib/windows.js","webpack://zoid/./node_modules/universal-serialize/src/constants.js","webpack://zoid/./node_modules/universal-serialize/src/common.js","webpack://zoid/./node_modules/universal-serialize/src/serialize.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/function.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/error.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/promise.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/regex.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/date.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/array.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/object.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/string.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/number.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/boolean.js","webpack://zoid/./node_modules/universal-serialize/src/serializers/null.js","webpack://zoid/./node_modules/universal-serialize/src/deserialize.js","webpack://zoid/./node_modules/post-robot/src/bridge/common.js","webpack://zoid/./node_modules/post-robot/src/serialize/window.js","webpack://zoid/./node_modules/post-robot/src/serialize/function.js","webpack://zoid/./node_modules/post-robot/src/serialize/serialize.js","webpack://zoid/./node_modules/post-robot/src/serialize/promise.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/strategies.js","webpack://zoid/./node_modules/post-robot/src/lib/compat.js","webpack://zoid/./node_modules/post-robot/src/drivers/send/index.js","webpack://zoid/./node_modules/post-robot/src/drivers/listeners.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/types.js","webpack://zoid/./node_modules/post-robot/src/drivers/receive/index.js","webpack://zoid/./node_modules/post-robot/src/public/on.js","webpack://zoid/./node_modules/post-robot/src/public/send.js","webpack://zoid/./node_modules/post-robot/src/setup.js","webpack://zoid/./node_modules/post-robot/src/index.js","webpack://zoid/./src/lib/global.js","webpack://zoid/./src/lib/serialize.js","webpack://zoid/./src/constants.js","webpack://zoid/./src/child/props.js","webpack://zoid/./src/child/window.js","webpack://zoid/./src/child/index.js","webpack://zoid/./src/parent/drivers.js","webpack://zoid/./node_modules/post-robot/src/clean.js","webpack://zoid/./src/parent/props.js","webpack://zoid/./src/parent/index.js","webpack://zoid/./src/delegate/index.js","webpack://zoid/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://zoid/./node_modules/jsx-pragmatic/src/node.js","webpack://zoid/./node_modules/jsx-pragmatic/src/renderers/dom.js","webpack://zoid/./src/component/templates/container.jsx","webpack://zoid/./src/component/templates/component.jsx","webpack://zoid/./src/component/props.js","webpack://zoid/./src/component/component.js","webpack://zoid/./src/component/validate.js","webpack://zoid/./src/index.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_extends","assign","target","arguments","length","source","apply","isPromise","item","Promise","window","Window","constructor","toString","then","err","flushPromise","dispatchedErrors","possiblyUnhandledPromiseHandlers","activeCount","flushActive","promise","resolve","startActive","endActive","ZalgoPromise","handler","_this","resolved","rejected","errorHandled","error","handlers","dispatching","stack","result","isAsync","res","reject","_proto","Error","dispatch","_this2","setTimeout","indexOf","push","j","dispatchPossiblyUnhandledError","asyncReject","_this3","_loop","_handlers$i","onSuccess","onError","catch","undefined","finally","onFinally","try","timeout","time","_this4","clearTimeout","toPromise","TypeError","all","promises","count","results","_loop2","prom","hash","keys","map","items","method","onPossiblyUnhandledException","cancel","splice","context","args","delay","flush","Zalgo","awaitActive","isRegex","PROTOCOL","MOCK","FILE","ABOUT","WILDCARD","WINDOW_TYPE","IFRAME","POPUP","IE_WIN_ACCESS_ERROR","isAboutProtocol","win","location","protocol","getParent","parent","getOpener","opener","canReadFromWindow","href","getActualDomain","host","getDomain","domain","mockDomain","isActuallySameDomain","desc","getOwnPropertyDescriptor","isSameDomain","assertSameDomain","isAncestorParent","child","childParent","getParents","getFrames","frames","len","frame","getAllChildFrames","_i3","_getFrames2","_i5","_getAllChildFrames2","childFrame","getTop","top","_i7","_getAllChildFrames4","getAllFramesInWindow","concat","iframeWindows","iframeFrames","isWindowClosed","allowMock","closed","message","mockclosed","iframeIndex","collection","safeIndexOf","contentWindow","parentNode","doc","ownerDocument","documentElement","contains","isFrameWindowClosed","getAncestor","anyMatch","collection1","collection2","_i17","item1","_i19","getDistanceFromTop","distance","isSameTopWindow","win1","win2","top1","top2","allFrames1","allFrames2","opener1","opener2","matchDomain","pattern","origin","Array","isArray","Boolean","match","JSON","stringify","some","subpattern","getDomainFromUrl","url","split","slice","join","onCloseWindow","callback","maxtime","Infinity","check","isWindow","obj","__cross_domain_utils_window_check__","objectIDs","awaitFrameLoadPromises","counter","Date","now","CrossDomainSafeWeakMap","weakmap","values","Math","random","WeakMap","freeze","testWeakMap","testKey","set","hasNativeWeakMap","_cleanupClosedWindows","delete","isSafeToReadWrite","entry","writable","index","has","getOrSet","base64encode","str","btoa","Buffer","from","uniqueID","chars","replace","charAt","floor","toISOString","toLowerCase","serializeArgs","subkey","val","uid","getObjectID","inlineMemoize","logic","cache","__inline_memoize_cache__","noop","once","called","stringifyError","level","newErr","extend","isDefined","cleanup","tasks","cleaned","register","task","pop","assertExists","thing","isDocumentReady","document","body","readyState","urlEncode","waitForDocumentReady","interval","setInterval","clearInterval","parseQuery","queryString","params","_i2","_queryString$split2","pair","decodeURIComponent","extendQuery","originalQuery","props","filter","formatQuery","appendChild","container","isElement","element","Element","nodeType","style","getElementSafe","id","querySelector","elementReady","el","PopupOpenError","awaitFrameLoad","addEventListener","cleanIframes","linkFrameWindow","awaitFrameWindow","loadedFrame","iframe","options","attempts","attributes","tag","createElement","class","className","setAttribute","_i6","_Object$keys2","styleSheet","styleText","cssText","createTextNode","setStyle","html","innerHTML","frameBorder","allowTransparency","backgroundColor","getElement","removeChild","navigator","userAgent","event","removeEventListener","destroyElement","isElementClosed","onResize","_temp","_ref2","_ref2$width","width","_ref2$height","height","_ref2$interval","_ref2$win","currentWidth","offsetWidth","currentHeight","offsetHeight","observer","newWidth","newHeight","ResizeObserver","observe","MutationObserver","childList","subtree","characterData","loop","disconnect","isPerc","test","isPx","toPx","parseInt","toNum","toCSS","CHILD_WINDOW_TIMEOUT","ACK_TIMEOUT","ACK_TIMEOUT_KNOWN","RES_TIMEOUT","MESSAGE_TYPE","REQUEST","RESPONSE","ACK","MESSAGE_NAME","METHOD","HELLO","OPEN_TUNNEL","SERIALIZATION_TYPE","CROSS_DOMAIN_ZALGO_PROMISE","CROSS_DOMAIN_FUNCTION","CROSS_DOMAIN_WINDOW","getGlobal","getObj","globalStore","defStore","store","storeKey","defVal","del","reset","WildCard","getWildcard","global","WINDOW_WILDCARD","windowStore","winStore","getStore","getInstanceID","getHelloPromise","sayHello","_ref3","send","instanceID","_ref4","data","getWindowInstanceID","_ref5","_ref6","markWindowKnown","TYPE","FUNCTION","ERROR","PROMISE","REGEX","DATE","ARRAY","OBJECT","STRING","NUMBER","BOOLEAN","NULL","UNDEFINED","isSerializedType","__type__","determineType","serializeType","type","__val__","SERIALIZER","_SERIALIZER","_ref","code","toJSON","defaultSerializers","DESERIALIZER","_DESERIALIZER","RegExp","defaultDeserializers","cleanupProxyWindows","idToProxyWindow","_idToProxyWindow$keys2","shouldClean","ProxyWindow","serializedWindow","actualWindow","isProxyWindow","actualWindowPromise","setWindow","memoizedPromiseFunction","_len2","_key2","memoizePromise","getType","isPopup","isIframe","setLocation","setName","frameElement","close","focus","isClosed","_this5","getWindow","awaitWindow","matchWindow","_this6","unwrap","serialize","toProxyWindow","deserialize","on","addMethod","methodStore","proxyWindowMethods","lookupMethod","serializeFunction","destination","meth","methodSource","listenForFunctionCalls","__id__","__name__","serializeMessage","_serialize","serializers","serializer","serializePromise","serializeWindow","deserializeMessage","_deserialize","deserializers","parse","deserializer","serializedPromise","serializedFunction","getDeserializedFunction","opts","crossDomainFunctionWrapper","_arguments","fireAndForget","__origin__","__source__","deserializeFunction","_ref7","deserializeWindow","SEND_MESSAGE_STRATEGIES","serializedMessage","dom","forEach","postMessage","mockUserAgent","getUserAgent","foreignGlobal","receiveMessage","sendMessage","_serializeMessage","success","strategyName","__DOMAIN_REGEX__","getResponseListener","deleteResponseListener","isResponseListenerErrored","getRequestListener","requestListeners","winQualifier","nameListeners","domainListeners","_i4","_domainListeners$__DO2","_domainListeners$__DO3","regex","listener","RECEIVE_MESSAGE_TYPES","_RECEIVE_MESSAGE_TYPE","sendResponse","ack","response","pathname","handleError","receivedMessages","parsedMessage","parseMessage","requestListener","addRequestListener","listenersCollection","_win2","_i8","_i10","_domain2","_i12","existingListener","regexListeners","regexListener","strDomain","errorHandler","responseTimeout","childTimeout","reqPromises","requestPromise","actualParent","_i15","_getFrames8","isAncestor","awaitWindowHello","hasResult","markResponseListenerErrored","responseListener","addResponseListener","totalAckTimeout","isWindowKnown","totalResTimeout","ackTimeout","resTimeout","cycleTime","cycle","max","min","internalSerializeMessage","internalDeserializeMessage","initialized","messageEvent","sourceElement","originalEvent","messageListener","listenForMessages","initHello","setup","globalFor","getProxyElement","resize","ZOID","POST_MESSAGE","PROP_TYPE","PROP_SERIALIZATION","DOTIFY","BASE64","CONTEXT","DEFAULT_DIMENSIONS","WIDTH","HEIGHT","EVENT","RENDER","RENDERED","DISPLAY","CLOSE","PROPS","normalizeChildProp","component","helpers","prop","getPropDefinition","childDecorate","parseChildWindowName","windowName","_windowName$split","zoidcomp","encodedPayload","atob","base64decode","getChildPayload","ChildComponent","parentComponentWindow","onPropHandlers","autoResize","childPayload","getParentComponentWindow","checkParentDomain","initialProps","getPropsByRef","setProps","watchForClose","init","buildExports","watchForResize","getHelpers","onProps","allowedParentDomains","ref","getNthParent","getNthParentFromTop","ancestor","_getAllFramesInWindow2","windows","getProps","isUpdate","existingProps","sameDomain","alias","_component$getPropNam2","getPropNames","normalizeChildProps","_this$onPropHandlers2","checkClose","destroy","getAutoResize","_ref3$width","_ref3$height","_ref3$element","_this4$getAutoResize","updateProps","RENDER_DRIVERS","openOnClick","openFrame","title","open","proxyFrame","frameWatcher","safeInterval","watchElementForClose","clean","_requestPromises$get2","cleanUpWindow","openPrerenderFrame","openPrerender","proxyWin","proxyPrerenderFrame","prerenderFrame","prerenderFrameWindow","delegate","proxyContainer","getQueryParam","queryParam","getQueryValue","queryValue","ParentComponent","driver","initPromise","state","setupEvents","registerActiveComponent","destroyActiveComponent","watchForUnload","triggered","eventName","handlerList","cancelled","trigger","_len3","_key3","triggerOnce","_len4","_key4","onRender","onDisplay","onRendered","onClose","render","log","initialDomain","getInitialDomain","checkAllowRender","buildUrl","getProxyContainer","renderContainer","setState","setProxyWin","prerender","proxyPrerenderWin","loadUrl","setWindowName","buildWindowName","openBridge","runTimeout","containerElement","buildChildPayload","getPropsRef","getPropsForChild","propRef","_ref7$target","getWindowRef","buildParentExports","_ref8","validate","instance","propNames","aliases","propDef","default","_Object$keys4","decorate","normalizeProps","_this$component$getPr2","required","propsDef","builtinProps","serialization","dotify","prefix","newobj","every","_Object$keys6","dotkey","query","originalUrl","originalHash","_url$split","_originalUrl$split","hashString","extendUrl","normalizeMockUrl","getUrl","sendToChild","_this7","_this8","_this9","_this10","windowProp","_this11","_this12","_this13","_this$component$getPr4","propName","allowDelegate","overridesPromise","overrides","_ref9","_this$driver$delegate2","_this14","_this15","closeWindowListener","_this16","unloadWindowListener","_this17","initChild","_this18","_this19","_ref10","_ref11","_this20","_this21","secondClosed","_this22","_ref12","_this23","prerenderTemplate","prerenderWindow","isBlankDomain","renderTemplate","tagName","children","writeElementToWindow","_ref13","_ref13$width","_ref13$height","_ref13$element","_ref14","renderer","_ref15","_this24","dimensions","_ref16","_this25","_ref17","innerContainer","containerTemplate","_this26","_this27","DelegateComponent","watchForSourceClose","getDelegate","getOverrides","closeSourceWindowListener","_inheritsLoose","subClass","superClass","__proto__","Node","isElementNode","isTextNode","isFragmentNode","ElementNode","_Node","_proto2","getTag","isTag","getText","TextNode","_Node2","text","_proto3","FragmentNode","_Node3","_proto4","normalizeChild","normalizeChildren","normalizedChild","_normalizedChild$chil2","subchild","node","_len","_key","ELEMENT_TAG","ELEMENT_PROP","CREATE_ELEMENT","_CREATE_ELEMENT","ADD_CHILDREN","_ADD_CHILDREN","firstChild","docElement","domRenderer","_ref9$doc","addProps","_el$querySelectorAll2","querySelectorAll","script","newScript","textContent","replaceChild","fixScripts","addChildren","CLASS","VISIBLE","INVISIBLE","defaultContainerTemplate","_ref$dimensions","classList","add","remove","defaultPrerenderTemplate","defaultNoop","decorateOnce","Component","bridgeUrl","defaultContext","driverCache","xprops","logger","PROP_TYPE_LIST","validatePropDefinitions","components","_ref$width","_ref$height","popup","debug","info","warn","registerChild","listenDelegate","dep","isChild","_ref2$data","canRenderTo","getBridgeUrl","payload","getDefaultContainer","getDefaultContext","renderTo","activeComponents","destroyAll","__webpack_exports__","component_destroyAll","component_Component"],"mappings":"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","file":"zoid.frame.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"zoid\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"zoid\"] = factory();\n\telse\n\t\troot[\"zoid\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","/* @flow */\n\nexport function isPromise(item : mixed) : boolean {\n    try {\n        if (!item) {\n            return false;\n        }\n\n        if (typeof Promise !== 'undefined' && item instanceof Promise) {\n            return true;\n        }\n\n        if (typeof window !== 'undefined' && window.Window && item instanceof window.Window) {\n            return false;\n        }\n\n        if (typeof window !== 'undefined' && window.constructor && item instanceof window.constructor) {\n            return false;\n        }\n\n        let toString = ({}).toString;\n\n        if (toString) {\n            let name = toString.call(item);\n\n            if (name === '[object Window]' || name === '[object global]' || name === '[object DOMWindow]') {\n                return false;\n            }\n        }\n\n        if (typeof item.then === 'function') {\n            return true;\n        }\n    } catch (err) {\n        return false;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nconst dispatchedErrors = [];\nconst possiblyUnhandledPromiseHandlers = [];\n\nexport function dispatchPossiblyUnhandledError<T>(err : mixed, promise : ZalgoPromise<T>) {\n\n    if (dispatchedErrors.indexOf(err) !== -1) {\n        return;\n    }\n\n    dispatchedErrors.push(err);\n\n    setTimeout(() => {\n        if (__DEBUG__) {\n            // $FlowFixMe\n            throw new Error(`${ err.stack || err.toString() }\\n\\nFrom promise:\\n\\n${ promise.stack }`);\n        }\n\n        throw err;\n    }, 1);\n\n    for (let j = 0; j < possiblyUnhandledPromiseHandlers.length; j++) {\n        // $FlowFixMe\n        possiblyUnhandledPromiseHandlers[j](err, promise);\n    }\n}\n\nexport function onPossiblyUnhandledException(handler : (mixed, promise? : ZalgoPromise<*>) => void) : { cancel : () => void } {\n    possiblyUnhandledPromiseHandlers.push(handler);\n\n    return {\n        cancel() {\n            possiblyUnhandledPromiseHandlers.splice(possiblyUnhandledPromiseHandlers.indexOf(handler), 1);\n        }\n    };\n}\n","/* @flow */\n\nimport type { ZalgoPromise } from './promise';\n\nlet activeCount = 0;\nlet flushPromise;\n\nfunction flushActive() {\n    if (!activeCount && flushPromise) {\n        const promise = flushPromise;\n        flushPromise = null;\n        promise.resolve();\n    }\n}\n\nexport function startActive() {\n    activeCount += 1;\n}\n\nexport function endActive() {\n    activeCount -= 1;\n    flushActive();\n}\n\nexport function awaitActive(Zalgo : Class<ZalgoPromise<*>>) : ZalgoPromise<void> { // eslint-disable-line no-undef\n    let promise = flushPromise = flushPromise || new Zalgo();\n    flushActive();\n    return promise;\n}\n","/* @flow */\n\nimport { isPromise } from './utils';\nimport { onPossiblyUnhandledException, dispatchPossiblyUnhandledError } from './exceptions';\nimport { startActive, endActive, awaitActive } from './flush';\n\nexport class ZalgoPromise<R : mixed> {\n\n    resolved : boolean\n    rejected : boolean\n    errorHandled : boolean\n    value : R\n    error : mixed\n    handlers : Array<{\n        promise : ZalgoPromise<*>,\n        onSuccess : void | (result : R) => mixed,\n        onError : void | (error : mixed) => mixed\n    }>\n    dispatching : boolean\n    stack : string\n\n    constructor(handler : ?(resolve : (result : R) => void, reject : (error : mixed) => void) => void) {\n\n        this.resolved = false;\n        this.rejected = false;\n        this.errorHandled = false;\n\n        this.handlers = [];\n\n        if (handler) {\n\n            let result;\n            let error;\n            let resolved = false;\n            let rejected = false;\n            let isAsync = false;\n\n            startActive();\n\n            try {\n                handler(res => {\n                    if (isAsync) {\n                        this.resolve(res);\n                    } else {\n                        resolved = true;\n                        result = res;\n                    }\n\n                }, err => {\n                    if (isAsync) {\n                        this.reject(err);\n                    } else {\n                        rejected = true;\n                        error = err;\n                    }\n                });\n\n            } catch (err) {\n                endActive();\n                this.reject(err);\n                return;\n            }\n\n            endActive();\n\n            isAsync = true;\n\n            if (resolved) {\n                // $FlowFixMe\n                this.resolve(result);\n            } else if (rejected) {\n                this.reject(error);\n            }\n        }\n\n        if (__DEBUG__) {\n            try {\n                throw new Error(`ZalgoPromise`);\n            } catch (err) {\n                this.stack = err.stack;\n            }\n        }\n    }\n\n    resolve(result : R) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(result)) {\n            throw new Error('Can not resolve promise with another promise');\n        }\n\n        this.resolved = true;\n        this.value = result;\n        this.dispatch();\n\n        return this;\n    }\n\n    reject(error : mixed) : ZalgoPromise<R> {\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        if (isPromise(error)) {\n            throw new Error('Can not reject promise with another promise');\n        }\n\n        if (!error) {\n            let err = (error && typeof error.toString === 'function' ? error.toString() : Object.prototype.toString.call(error));\n            error = new Error(`Expected reject to be called with Error, got ${ err }`);\n        }\n\n        this.rejected = true;\n        this.error = error;\n\n        if (!this.errorHandled) {\n            setTimeout(() => {\n                if (!this.errorHandled) {\n                    dispatchPossiblyUnhandledError(error, this);\n                }\n            }, 1);\n        }\n\n        this.dispatch();\n\n        return this;\n    }\n\n    asyncReject(error : mixed) : ZalgoPromise<R> {\n        this.errorHandled = true;\n        this.reject(error);\n        return this;\n    }\n    \n    dispatch() {\n\n        let { dispatching, resolved, rejected, handlers } = this;\n\n        if (dispatching) {\n            return;\n        }\n\n        if (!resolved && !rejected) {\n            return;\n        }\n\n        this.dispatching = true;\n        startActive();\n\n        for (let i = 0; i < handlers.length; i++) {\n\n            let { onSuccess, onError, promise } = handlers[i];\n\n            let result;\n\n            if (resolved) {\n\n                try {\n                    result = onSuccess ? onSuccess(this.value) : this.value;\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n\n            } else if (rejected) {\n\n                if (!onError) {\n                    promise.reject(this.error);\n                    continue;\n                }\n\n                try {\n                    result = onError(this.error);\n                } catch (err) {\n                    promise.reject(err);\n                    continue;\n                }\n            }\n\n            if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n\n                if (result.resolved) {\n                    promise.resolve(result.value);\n                } else {\n                    promise.reject(result.error);\n                }\n\n                result.errorHandled = true;\n\n            } else if (isPromise(result)) {\n\n                if (result instanceof ZalgoPromise && (result.resolved || result.rejected)) {\n                    if (result.resolved) {\n                        promise.resolve(result.value);\n                    } else {\n                        promise.reject(result.error);\n                    }\n\n                } else {\n                    // $FlowFixMe\n                    result.then(res => {\n                        promise.resolve(res);\n                    }, err => {\n                        promise.reject(err);\n                    });\n                }\n\n            } else {\n\n                promise.resolve(result);\n            }\n        }\n\n        handlers.length = 0;\n        this.dispatching = false;\n        endActive();\n    }\n\n    then<X : mixed, Y : mixed>(onSuccess : void | (result : R) => (ZalgoPromise<X> | Y), onError : void | (error : mixed) => (ZalgoPromise<X> | Y)) : ZalgoPromise<X | Y> {\n\n        if (onSuccess && typeof onSuccess !== 'function' && !onSuccess.call) {\n            throw new Error('Promise.then expected a function for success handler');\n        }\n\n        if (onError && typeof onError !== 'function' && !onError.call) {\n            throw new Error('Promise.then expected a function for error handler');\n        }\n\n        let promise : ZalgoPromise<X | Y> = new ZalgoPromise();\n\n        this.handlers.push({\n            promise,\n            onSuccess,\n            onError\n        });\n\n        this.errorHandled = true;\n\n        this.dispatch();\n\n        return promise;\n    }\n\n    catch<X : mixed, Y : mixed>(onError : (error : mixed) => ZalgoPromise<X> | Y) : ZalgoPromise<X | Y> {\n        return this.then(undefined, onError);\n    }\n\n    finally(onFinally : () => mixed) : ZalgoPromise<R> {\n\n        if (onFinally && typeof onFinally !== 'function' && !onFinally.call) {\n            throw new Error('Promise.finally expected a function');\n        }\n\n        return this.then((result) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    return result;\n                });\n        }, (err) => {\n            return ZalgoPromise.try(onFinally)\n                .then(() => {\n                    throw err;\n                });\n        });\n    }\n\n    timeout(time : number, err : ?Error) : ZalgoPromise<R> {\n\n        if (this.resolved || this.rejected) {\n            return this;\n        }\n\n        let timeout = setTimeout(() => {\n\n            if (this.resolved || this.rejected) {\n                return;\n            }\n\n            this.reject(err || new Error(`Promise timed out after ${ time }ms`));\n\n        }, time);\n\n        return this.then(result => {\n            clearTimeout(timeout);\n            return result;\n        });\n    }\n\n    // $FlowFixMe\n    toPromise() : Promise<R> {\n        // $FlowFixMe\n        if (typeof Promise === 'undefined') {\n            throw new TypeError(`Could not find Promise`);\n        }\n        // $FlowFixMe\n        return Promise.resolve(this); // eslint-disable-line compat/compat\n    }\n\n    static resolve<X : mixed>(value : X | ZalgoPromise<X>) : ZalgoPromise<X> {\n\n        if (value instanceof ZalgoPromise) {\n            return value;\n        }\n\n        if (isPromise(value)) {\n            // $FlowFixMe\n            return new ZalgoPromise((resolve, reject) => value.then(resolve, reject));\n        }\n\n        return new ZalgoPromise().resolve(value);\n    }\n\n    static reject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().reject(error);\n    }\n\n    static asyncReject(error : mixed) : ZalgoPromise<R> {\n        return new ZalgoPromise().asyncReject(error);\n    }\n\n    static all<X : [*] | [*, *] | [*, *, *] | [*, *, *, *] | [*, *, *, *, *] | [*, *, *, *, *, *] | [*, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *] | [*, *, *, *, *, *, *, *, *] | Array<mixed>>(promises : X) : ZalgoPromise<$TupleMap<X, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n\n        let promise = new ZalgoPromise();\n        let count = promises.length;\n        let results = [];\n\n        if (!count) {\n            promise.resolve(results);\n            return promise;\n        }\n\n        for (let i = 0; i < promises.length; i++) {\n            let prom = promises[i];\n\n            if (prom instanceof ZalgoPromise) {\n                if (prom.resolved) {\n                    results[i] = prom.value;\n                    count -= 1;\n                    continue;\n                }\n            } else if (!isPromise(prom)) {\n                results[i] = prom;\n                count -= 1;\n                continue;\n            }\n\n            ZalgoPromise.resolve(prom).then(result => {\n                results[i] = result;\n                count -= 1;\n                if (count === 0) {\n                    promise.resolve(results);\n                }\n            }, err => {\n                promise.reject(err);\n            });\n        }\n\n        if (count === 0) {\n            promise.resolve(results);\n        }\n\n        return promise;\n    }\n\n    static hash<O : { [string] : * }>(promises : O) : ZalgoPromise<$ObjMap<O, <Y>(ZalgoPromise<Y> | Y) => Y>> { // eslint-disable-line no-undef\n        let result = {};\n        \n        return ZalgoPromise.all(Object.keys(promises).map(key => {\n            return ZalgoPromise.resolve(promises[key]).then(value => {\n                result[key] = value;\n            });\n        })).then(() => {\n            return result;\n        });\n    }\n\n    static map<T, X>(items : Array<T>, method : (T) => (ZalgoPromise<X> | X)) : ZalgoPromise<Array<X>> {\n        // $FlowFixMe\n        return ZalgoPromise.all(items.map(method));\n    }\n\n    static onPossiblyUnhandledException(handler : (err : mixed) => void) : { cancel : () => void } {\n        return onPossiblyUnhandledException(handler);\n    }\n\n    static try<X : mixed, Y : mixed, C : mixed, A : Array<mixed>>(method : (...args : A) => (ZalgoPromise<X> | Y), context : ?C, args : ?A) : ZalgoPromise<X | Y> {\n\n        if (method && typeof method !== 'function' && !method.call) {\n            throw new Error('Promise.try expected a function');\n        }\n\n        let result;\n\n        startActive();\n        \n        try {\n            // $FlowFixMe\n            result = method.apply(context, args || []);\n        } catch (err) {\n            endActive();\n            return ZalgoPromise.reject(err);\n        }\n\n        endActive();\n\n        return ZalgoPromise.resolve(result);\n    }\n\n    static delay(delay : number) : ZalgoPromise<void> {\n        return new ZalgoPromise(resolve => {\n            setTimeout(resolve, delay);\n        });\n    }\n\n    static isPromise(value : mixed) : boolean {\n\n        if (value && value instanceof ZalgoPromise) {\n            return true;\n        }\n\n        return isPromise(value);\n    }\n\n    static flush() : ZalgoPromise<void> {\n        return awaitActive(ZalgoPromise);\n    }\n}\n","/* @flow */\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nexport const PROTOCOL = {\n    MOCK:  ('mock:' : 'mock:'),\n    FILE:  ('file:' : 'file:'),\n    ABOUT: ('about:' : 'about:')\n};\n\nexport const WILDCARD = '*';\n\nexport const WINDOW_TYPE = {\n    IFRAME: ('iframe' : 'iframe'),\n    POPUP:  ('popup' : 'popup')\n};\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isRegex, noop } from './util';\nimport type { CrossDomainWindowType, SameDomainWindowType, DomainMatcher } from './types';\nimport { PROTOCOL, WILDCARD } from './constants';\n\nlet IE_WIN_ACCESS_ERROR = 'Call was rejected by callee.\\r\\n';\n\nexport function isFileProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.FILE;\n}\n\nexport function isAboutProtocol(win : SameDomainWindowType = window) : boolean {\n    return win.location.protocol === PROTOCOL.ABOUT;\n}\n\nexport function getParent(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.parent && win.parent !== win) {\n            return win.parent;\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function getOpener(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    // Make sure we're not actually an iframe which has had window.open() called on us\n    if (getParent(win)) {\n        return;\n    }\n\n    try {\n        return win.opener;\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function canReadFromWindow(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        noop(win && win.location && win.location.href);\n        return true;\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function getActualDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let location = win.location;\n\n    if (!location) {\n        throw new Error(`Can not read window location`);\n    }\n\n    let protocol = location.protocol;\n\n    if (!protocol) {\n        throw new Error(`Can not read window protocol`);\n    }\n\n    if (protocol === PROTOCOL.FILE) {\n        return `${ PROTOCOL.FILE }//`;\n    }\n\n    if (protocol === PROTOCOL.ABOUT) {\n\n        let parent = getParent(win);\n        if (parent && canReadFromWindow(parent)) {\n            // $FlowFixMe\n            return getActualDomain(parent);\n        }\n\n        return `${ PROTOCOL.ABOUT }//`;\n    }\n\n    let host = location.host;\n\n    if (!host) {\n        throw new Error(`Can not read window host`);\n    }\n\n    return `${ protocol }//${ host }`;\n}\n\nexport function getDomain(win : ?SameDomainWindowType) : string {\n\n    win = win || window;\n\n    let domain = getActualDomain(win);\n\n    if (domain && win.mockDomain && win.mockDomain.indexOf(PROTOCOL.MOCK) === 0) {\n        return win.mockDomain;\n    }\n\n    return domain;\n}\n\nexport function isBlankDomain(win : CrossDomainWindowType) : boolean {\n    try {\n        // $FlowFixMe\n        if (!win.location.href) {\n            return true;\n        }\n\n        if (win.location.href === 'about:blank') {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isActuallySameDomain(win : CrossDomainWindowType) : boolean {\n\n    try {\n        if (win === window) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        let desc = Object.getOwnPropertyDescriptor(win, 'location');\n\n        if (desc && desc.enumerable === false) {\n            return false;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        // $FlowFixMe\n        if (getActualDomain(win) === getActualDomain(window)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\nexport function isSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : boolean {\n\n    if (!isActuallySameDomain(win)) {\n        return false;\n    }\n\n    try {\n\n        if (win === window) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (isAboutProtocol(win) && canReadFromWindow(win)) {\n            return true;\n        }\n\n        // $FlowFixMe\n        if (getDomain(window) === getDomain(win)) {\n            return true;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return false;\n}\n\n\nexport function assertSameDomain(win : CrossDomainWindowType | SameDomainWindowType) : SameDomainWindowType {\n    if (!isSameDomain(win)) {\n        throw new Error(`Expected window to be same domain`);\n    }\n\n    // $FlowFixMe\n    return win;\n}\n\nexport function getParents(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    try {\n\n        while (win.parent !== win) {\n            result.push(win.parent);\n            win = win.parent;\n        }\n\n    } catch (err) {\n        // pass\n    }\n\n    return result;\n}\n\nexport function isAncestorParent(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    if (!parent || !child) {\n        return false;\n    }\n\n    let childParent = getParent(child);\n\n    if (childParent) {\n        return childParent === parent;\n    }\n\n    if (getParents(child).indexOf(parent) !== -1) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    let frames;\n\n    try {\n        frames = win.frames;\n    } catch (err) {\n        frames = win;\n    }\n\n    let len;\n\n    try {\n        len = frames.length;\n    } catch (err) {\n        // pass\n    }\n\n    if (len === 0) {\n        return result;\n    }\n\n    if (len) {\n        for (let i = 0; i < len; i++) {\n\n            let frame;\n\n            try {\n                frame = frames[i];\n            } catch (err) {\n                continue;\n            }\n\n            result.push(frame);\n        }\n\n        return result;\n    }\n\n    for (let i = 0; i < 100; i++) {\n        let frame;\n\n        try {\n            frame = frames[i];\n        } catch (err) {\n            return result;\n        }\n\n        if (!frame) {\n            return result;\n        }\n\n        result.push(frame);\n    }\n\n    return result;\n}\n\n\nexport function getAllChildFrames(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let result = [];\n\n    for (let frame of getFrames(win)) {\n        result.push(frame);\n\n        for (let childFrame of getAllChildFrames(frame)) {\n            result.push(childFrame);\n        }\n    }\n\n    return result;\n}\n\nexport function getTop(win : CrossDomainWindowType) : ?CrossDomainWindowType {\n\n    if (!win) {\n        return;\n    }\n\n    try {\n        if (win.top) {\n            return win.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    if (getParent(win) === win) {\n        return win;\n    }\n\n    try {\n        if (isAncestorParent(window, win) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (isAncestorParent(win, window) && window.top) {\n            return window.top;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    for (let frame of getAllChildFrames(win)) {\n        try {\n            if (frame.top) {\n                return frame.top;\n            }\n        } catch (err) {\n            // pass\n        }\n\n        if (getParent(frame) === frame) {\n            return frame;\n        }\n    }\n}\n\nexport function getNextOpener(win? : CrossDomainWindowType = window) : ?CrossDomainWindowType {\n    return getOpener(getTop(win) || win);\n}\n\nexport function getUltimateTop(win? : CrossDomainWindowType = window) : CrossDomainWindowType {\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return getUltimateTop(opener);\n    }\n\n    return top;\n}\n\nexport function getAllFramesInWindow(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n    let top = getTop(win);\n\n    if (!top) {\n        throw new Error(`Can not determine top window`);\n    }\n\n    return [ ...getAllChildFrames(top), top ];\n}\n\nexport function getAllWindows(win? : CrossDomainWindowType = window) : $ReadOnlyArray<CrossDomainWindowType> {\n    let frames = getAllFramesInWindow(win);\n    let opener = getNextOpener(win);\n\n    if (opener) {\n        return [ ...getAllWindows(opener), ...frames ];\n    } else {\n        return frames;\n    }\n}\n\nexport function isTop(win : CrossDomainWindowType) : boolean {\n    return win === getTop(win);\n}\n\nexport function isFrameWindowClosed(frame : HTMLIFrameElement) : boolean {\n\n    if (!frame.contentWindow) {\n        return true;\n    }\n\n    if (!frame.parentNode) {\n        return true;\n    }\n\n    let doc = frame.ownerDocument;\n\n    if (doc && doc.documentElement && !doc.documentElement.contains(frame)) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\nlet iframeWindows = [];\nlet iframeFrames = [];\n\nexport function isWindowClosed(win : CrossDomainWindowType, allowMock : boolean = true) : boolean {\n\n    try {\n        if (win === window) {\n            return false;\n        }\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (!win) {\n            return true;\n        }\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        if (win.closed) {\n            return true;\n        }\n\n    } catch (err) {\n\n        // I love you so much IE\n\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return false;\n        }\n\n        return true;\n    }\n\n\n    if (allowMock && isSameDomain(win)) {\n        try {\n            // $FlowFixMe\n            if (win.mockclosed) {\n                return true;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    // Mobile safari\n\n    try {\n        if (!win.parent || !win.top) {\n            return true;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    // Yes, this actually happens in IE. win === win errors out when the window\n    // is from an iframe, and the iframe was removed from the page.\n\n    try {\n        noop(win === win); // eslint-disable-line no-self-compare\n    } catch (err) {\n        return true;\n    }\n\n    // IE orphaned frame\n\n    let iframeIndex = safeIndexOf(iframeWindows, win);\n\n    if (iframeIndex !== -1) {\n        let frame = iframeFrames[iframeIndex];\n\n        if (frame && isFrameWindowClosed(frame)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction cleanIframes() {\n    for (let i = 0; i < iframeWindows.length; i++) {\n        let closed = false;\n\n        try {\n            closed = iframeWindows[i].closed;\n        } catch (err) {\n            // pass\n        }\n\n        if (closed) {\n            iframeFrames.splice(i, 1);\n            iframeWindows.splice(i, 1);\n        }\n    }\n}\n\nexport function linkFrameWindow(frame : HTMLIFrameElement) {\n\n    cleanIframes();\n\n    if (frame && frame.contentWindow) {\n        try {\n            iframeWindows.push(frame.contentWindow);\n            iframeFrames.push(frame);\n        } catch (err) {\n            // pass\n        }\n    }\n}\n\nexport function getUserAgent(win : ?SameDomainWindowType) : string {\n    win = win || window;\n    return win.navigator.mockUserAgent || win.navigator.userAgent;\n}\n\n\nexport function getFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let winFrames = getFrames(win);\n\n    for (let childFrame of winFrames) {\n        try {\n            // $FlowFixMe\n            if (isSameDomain(childFrame) && childFrame.name === name && winFrames.indexOf(childFrame) !== -1) {\n                return childFrame;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    try {\n        // $FlowFixMe\n        if (winFrames.indexOf(win.frames[name]) !== -1) {\n            // $FlowFixMe\n            return win.frames[name];\n        }\n    } catch (err) {\n        // pass\n    }\n\n    try {\n        if (winFrames.indexOf(win[name]) !== -1) {\n            return win[name];\n        }\n    } catch (err) {\n        // pass\n    }\n}\n\nexport function findChildFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        let namedFrame = findChildFrameByName(childFrame, name);\n\n        if (namedFrame) {\n            return namedFrame;\n        }\n    }\n}\n\nexport function findFrameByName(win : CrossDomainWindowType, name : string) : ?CrossDomainWindowType {\n\n    let frame;\n\n    frame = getFrameByName(win, name);\n\n    if (frame) {\n        return frame;\n    }\n\n    let top = getTop(win) || win;\n\n    return findChildFrameByName(top, name);\n}\n\nexport function isParent(win : CrossDomainWindowType, frame : CrossDomainWindowType) : boolean {\n\n    let frameParent = getParent(frame);\n\n    if (frameParent) {\n        return frameParent === win;\n    }\n\n    for (let childFrame of getFrames(win)) {\n        if (childFrame === frame) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isOpener(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    return parent === getOpener(child);\n}\n\nexport function getAncestor(win : ?CrossDomainWindowType) : ?CrossDomainWindowType {\n    win = win || window;\n\n    let opener = getOpener(win);\n\n    if (opener) {\n        return opener;\n    }\n\n    let parent = getParent(win);\n\n    if (parent) {\n        return parent;\n    }\n}\n\nexport function getAncestors(win : CrossDomainWindowType) : Array<CrossDomainWindowType> {\n\n    let results = [];\n\n    let ancestor = win;\n\n    while (ancestor) {\n        ancestor = getAncestor(ancestor);\n        if (ancestor) {\n            results.push(ancestor);\n        }\n    }\n\n    return results;\n}\n\n\nexport function isAncestor(parent : CrossDomainWindowType, child : CrossDomainWindowType) : boolean {\n\n    let actualParent = getAncestor(child);\n\n    if (actualParent) {\n        if (actualParent === parent) {\n            return true;\n        }\n\n        return false;\n    }\n\n    if (child === parent) {\n        return false;\n    }\n\n    if (getTop(child) === child) {\n        return false;\n    }\n\n    for (let frame of getFrames(parent)) {\n        if (frame === child) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isPopup() : boolean {\n    return Boolean(getOpener(window));\n}\n\nexport function isIframe() : boolean {\n    return Boolean(getParent(window));\n}\n\nexport function isFullpage() : boolean {\n    return Boolean(!isIframe() && !isPopup());\n}\n\nfunction anyMatch(collection1, collection2) : boolean {\n\n    for (let item1 of collection1) {\n        for (let item2 of collection2) {\n            if (item1 === item2) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport function getDistanceFromTop(win : CrossDomainWindowType = window) : number {\n    let distance = 0;\n    let parent = win;\n\n    while (parent) {\n        parent = getParent(parent);\n        if (parent) {\n            distance += 1;\n        }\n    }\n\n    return distance;\n}\n\nexport function getNthParent(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    let parent = win;\n\n    for (let i = 0; i < n; i++) {\n        if (!parent) {\n            return;\n        }\n\n        parent = getParent(parent);\n    }\n\n    return parent;\n}\n\nexport function getNthParentFromTop(win : CrossDomainWindowType, n : number = 1) : ?CrossDomainWindowType {\n    return getNthParent(win, getDistanceFromTop(win) - n);\n}\n\nexport function isSameTopWindow(win1 : CrossDomainWindowType, win2 : CrossDomainWindowType) : boolean {\n\n    let top1 = getTop(win1) || win1;\n    let top2 = getTop(win2) || win2;\n\n    try {\n        if (top1 && top2) {\n            if (top1 === top2) {\n                return true;\n            }\n\n            return false;\n        }\n    } catch (err) {\n        // pass\n    }\n\n    let allFrames1 = getAllFramesInWindow(win1);\n    let allFrames2 = getAllFramesInWindow(win2);\n\n    if (anyMatch(allFrames1, allFrames2)) {\n        return true;\n    }\n\n    let opener1 = getOpener(top1);\n    let opener2 = getOpener(top2);\n\n    if (opener1 && anyMatch(getAllFramesInWindow(opener1), allFrames2)) {\n        return false;\n    }\n\n    if (opener2 && anyMatch(getAllFramesInWindow(opener2), allFrames1)) {\n        return false;\n    }\n\n    return false;\n}\n\nexport function matchDomain(pattern : DomainMatcher, origin : DomainMatcher) : boolean {\n\n    if (typeof pattern === 'string') {\n\n        if (typeof origin === 'string') {\n            return pattern === WILDCARD || origin === pattern;\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n    }\n\n    if (isRegex(pattern)) {\n\n        if (isRegex(origin)) {\n            return pattern.toString() === origin.toString();\n        }\n\n        if (Array.isArray(origin)) {\n            return false;\n        }\n\n        // $FlowFixMe\n        return Boolean(origin.match(pattern));\n    }\n\n    if (Array.isArray(pattern)) {\n\n        if (Array.isArray(origin)) {\n            return JSON.stringify(pattern) === JSON.stringify(origin);\n        }\n\n        if (isRegex(origin)) {\n            return false;\n        }\n\n        return pattern.some(subpattern => matchDomain(subpattern, origin));\n    }\n\n    return false;\n}\n\nexport function stringifyDomainPattern(pattern : DomainMatcher) : string {\n    if (Array.isArray(pattern)) {\n        return `(${ pattern.join(' | ') })`;\n    } else if (isRegex(pattern)) {\n        return `RegExp(${ pattern.toString() }`;\n    } else {\n        return pattern.toString();\n    }\n}\n\nexport function getDomainFromUrl(url : string) : string {\n\n    let domain;\n\n    if (url.match(/^(https?|mock|file):\\/\\//)) {\n        domain = url;\n    } else {\n        return getDomain();\n    }\n\n    domain = domain.split('/').slice(0, 3).join('/');\n\n    return domain;\n}\n\nexport function onCloseWindow(win : CrossDomainWindowType, callback : Function, delay : number = 1000, maxtime : number = Infinity) : { cancel : () => void } {\n\n    let timeout;\n\n    let check = () => {\n\n        if (isWindowClosed(win)) {\n\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n\n            return callback();\n        }\n\n        if (maxtime <= 0) {\n            clearTimeout(timeout);\n        } else {\n            maxtime -= delay;\n            timeout = setTimeout(check, delay);\n        }\n    };\n\n    check();\n\n    return {\n        cancel() {\n            if (timeout) {\n                clearTimeout(timeout);\n            }\n        }\n    };\n}\n\n// eslint-disable-next-line complexity\nexport function isWindow(obj : Object) : boolean {\n\n    try {\n        if (obj === window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (Object.prototype.toString.call(obj) === '[object Window]') {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (window.Window && obj instanceof window.Window) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.self === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.parent === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        if (obj && obj.top === obj) {\n            return true;\n        }\n    } catch (err) {\n        if (err && err.message === IE_WIN_ACCESS_ERROR) {\n            return true;\n        }\n    }\n\n    try {\n        noop(obj === obj);  // eslint-disable-line no-self-compare\n\n    } catch (err) {\n        return true;\n    }\n\n    try {\n        noop(obj && obj.__cross_domain_utils_window_check__);\n\n    } catch (err) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined' && typeof window.location !== 'undefined');\n}\n\nexport function isCurrentDomain(domain : string) : boolean {\n    if (!isBrowser()) {\n        return false;\n    }\n\n    return (getDomain() === domain);\n}\n\nexport function isMockDomain(domain : string) : boolean {\n    return domain.indexOf(PROTOCOL.MOCK) === 0;\n}\n\nexport function normalizeMockUrl(url : string) : string {\n    if (!isMockDomain(getDomainFromUrl(url))) {\n        return url;\n    }\n\n    if (!__TEST__) {\n        throw new Error(`Mock urls not supported out of test mode`);\n    }\n\n    return url.replace(/^mock:\\/\\/[^/]+/, getActualDomain(window));\n}\n","/* @flow */\n\nexport function safeIndexOf<T>(collection : Array<T>, item : T) : number {\n    for (let i = 0; i < collection.length; i++) {\n\n        try {\n            if (collection[i] === item) {\n                return i;\n            }\n        } catch (err) {\n            // pass\n        }\n    }\n\n    return -1;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n","/* @flow */\n\nimport { isWindow, isWindowClosed } from 'cross-domain-utils/src';\n\nimport { hasNativeWeakMap } from './native';\nimport { noop, safeIndexOf } from './util';\n\nlet defineProperty = Object.defineProperty;\nlet counter = Date.now() % 1e9;\n\nexport class CrossDomainSafeWeakMap<K : Object, V : mixed> {\n\n    name : string\n    weakmap : WeakMap<K, V>\n    keys : Array<K>\n    values : Array<V>\n\n    constructor() {\n        counter += 1;\n\n        // eslint-disable-next-line no-bitwise\n        this.name = `__weakmap_${ Math.random() * 1e9 >>> 0 }__${ counter }`;\n\n        if (hasNativeWeakMap()) {\n            try {\n                this.weakmap = new WeakMap();\n            } catch (err) {\n                // pass\n            }\n        }\n\n        this.keys  = [];\n        this.values = [];\n    }\n\n    _cleanupClosedWindows() {\n\n        let weakmap = this.weakmap;\n        let keys = this.keys;\n\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n\n            if (isWindow(value) && isWindowClosed(value)) {\n\n                if (weakmap) {\n                    try {\n                        weakmap.delete(value);\n                    } catch (err) {\n                        // pass\n                    }\n                }\n\n                keys.splice(i, 1);\n                this.values.splice(i, 1);\n\n                i -= 1;\n            }\n        }\n    }\n\n    isSafeToReadWrite(key : K) : boolean {\n\n        if (isWindow(key)) {\n            return false;\n        }\n\n        try {\n            noop(key && key.self);\n            noop(key && key[this.name]);\n        } catch (err) {\n            return false;\n        }\n\n        return true;\n    }\n\n    set(key : K, value : V) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.set(key, value);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let values = this.values;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                keys.push(key);\n                values.push(value);\n            } else {\n                values[index] = value;\n            }\n\n        } else {\n\n            let name = this.name;\n            let entry = key[name];\n\n            if (entry && entry[0] === key) {\n                entry[1] = value;\n            } else {\n                defineProperty(key, name, {\n                    value:    [ key, value ],\n                    writable: true\n                });\n            }\n        }\n    }\n\n    get(key : K) : V | void {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return weakmap.get(key);\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index === -1) {\n                return;\n            }\n\n            return this.values[index];\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return entry[1];\n            }\n        }\n    }\n\n    delete(key : K) {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                weakmap.delete(key);\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let keys = this.keys;\n            let index = safeIndexOf(keys, key);\n\n            if (index !== -1) {\n                keys.splice(index, 1);\n                this.values.splice(index, 1);\n            }\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                entry[0] = entry[1] = undefined;\n            }\n        }\n    }\n\n    has(key : K) : boolean {\n\n        if (!key) {\n            throw new Error(`WeakMap expected key`);\n        }\n\n        let weakmap = this.weakmap;\n\n        if (weakmap) {\n            try {\n                if (weakmap.has(key)) {\n                    return true;\n                }\n            } catch (err) {\n                delete this.weakmap;\n            }\n        }\n\n        if (!this.isSafeToReadWrite(key)) {\n\n            this._cleanupClosedWindows();\n\n            let index = safeIndexOf(this.keys, key);\n            return index !== -1;\n\n        } else {\n\n            let entry = key[this.name];\n\n            if (entry && entry[0] === key) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    getOrSet(key : K, getter : () => V) : V {\n        if (this.has(key)) {\n            // $FlowFixMe\n            return this.get(key);\n        }\n\n        let value = getter();\n        this.set(key, value);\n        return value;\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport type { CancelableType } from './types';\n\nexport function base64encode(str : string) : string {\n    if (typeof btoa === 'function') {\n        return btoa(str);\n    } else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'utf8').toString('base64');\n    }\n\n    throw new Error(`Can not find window.btoa or Buffer`);\n}\n\nexport function base64decode(str : string) : string {\n    if (typeof window !== 'undefined' && typeof window.atob === 'function') {\n        return window.atob(str);\n    }\n\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str, 'base64').toString('utf8');\n    }\n\n    throw new Error(`Can not find window.atob or Buffer`);\n}\n\nexport function uniqueID() : string {\n\n    let chars = '0123456789abcdef';\n\n    let randomID = 'xxxxxxxxxx'.replace(/./g, () => {\n        return chars.charAt(Math.floor(Math.random() * chars.length));\n    });\n\n    let timeID = base64encode(\n        new Date().toISOString().slice(11, 19).replace('T', '.')\n    ).replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n    return `${ randomID }_${ timeID }`;\n}\n\nexport function getGlobal() : Object {\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    if (typeof __GLOBAL__ !== 'undefined') {\n        return __GLOBAL__;\n    }\n    throw new Error(`No global found`);\n}\n\nlet objectIDs;\n\nexport function getObjectID(obj : Object) : string {\n\n    objectIDs = objectIDs || new WeakMap();\n\n    if (obj === null || obj === undefined || (typeof obj !== 'object' && typeof obj !== 'function')) {\n        throw new Error(`Invalid object`);\n    }\n\n    let uid = objectIDs.get(obj);\n\n    if (!uid) {\n        uid = `${ typeof obj }:${ uniqueID() }`;\n        objectIDs.set(obj, uid);\n    }\n\n    return uid;\n}\n\nfunction serializeArgs(args : Array<mixed>) : string {\n    try {\n        return JSON.stringify(Array.prototype.slice.call(args), (subkey, val) => {\n            if (typeof val === 'function') {\n                return `memoize[${ getObjectID(val) }]`;\n            }\n            return val;\n        });\n    } catch (err) {\n        throw new Error(`Arguments not serializable -- can not be used to memoize`);\n    }\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoize<R>(method : (...args : Array<any>) => R, options : { time? : number, name? : string, thisNamespace? : boolean } = {}) : ((...args : Array<any>) => R) {\n    let cacheMap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedFunction(...args : Array<any>) : R {\n        let cache = cacheMap.getOrSet(options.thisNamespace ? this : method, () => ({}));\n\n        let key : string = serializeArgs(args);\n\n        let cacheTime = options.time;\n        if (cache[key] && cacheTime && (Date.now() - cache[key].time) < cacheTime) {\n            delete cache[key];\n        }\n\n        if (cache[key]) {\n            return cache[key].value;\n        }\n\n        let time  = Date.now();\n        let value = method.apply(this, arguments);\n\n        cache[key] = { time, value };\n\n        return cache[key].value;\n    }\n\n    memoizedFunction.reset = () => {\n        cacheMap.delete(options.thisNamespace ? this : method);\n    };\n\n    if (options.name) {\n        memoizedFunction.displayName = `${ options.name }:memoized`;\n    }\n\n    return memoizedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function memoizePromise<R>(method : (...args : Array<any>) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    let cache = {};\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    function memoizedPromiseFunction(...args : Array<any>) : ZalgoPromise<R> {\n        let key : string = serializeArgs(args);\n\n        if (cache.hasOwnProperty(key)) {\n            return cache[key];\n        }\n\n        cache[key] = method.apply(this, arguments)\n            .finally(() => {\n                delete cache[key];\n            });\n\n        return cache[key];\n    }\n\n    memoizedPromiseFunction.reset = () => {\n        cache = {};\n    };\n\n    return memoizedPromiseFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function promisify<R>(method : (...args : Array<any>) => R, options : { name? : string } = {}) : ((...args : Array<any>) => ZalgoPromise<R>) {\n    function promisifiedFunction() : ZalgoPromise<R> {\n        return ZalgoPromise.try(method, this, arguments);\n    }\n\n    if (options.name) {\n        promisifiedFunction.displayName = `${ options.name }:promisified`;\n    }\n\n    return promisifiedFunction;\n}\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport function inlineMemoize<R>(method : (...args : Array<any>) => R, logic : (...args : Array<any>) => R, args : Array<any> = []) : R {\n    let cache = method.__inline_memoize_cache__ = method.__inline_memoize_cache__ || {};\n    let key = serializeArgs(args);\n\n    if (cache.hasOwnProperty(key)) {\n        return cache[key];\n    }\n    \n    let result = cache[key] = logic(...args);\n    return result;\n}\n\n// eslint-disable-next-line no-unused-vars\nexport function noop(...args : Array<mixed>) {\n    // pass\n}\n\nexport function once(method : Function) : Function {\n    let called = false;\n\n    return function onceFunction() : mixed {\n        if (!called) {\n            called = true;\n            return method.apply(this, arguments);\n        }\n    };\n}\n\nexport function hashStr(str : string) : number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        hash += str[i].charCodeAt(0) * Math.pow((i % 10) + 1, 5);\n    }\n    return Math.floor(Math.pow(Math.sqrt(hash), 5));\n}\n\nexport function strHashStr(str : string) : string {\n    let hash = '';\n\n    for (let i = 0; i < str.length; i++) {\n        let total = (str[i].charCodeAt(0) * i);\n\n        if (str[i + 1]) {\n            total += (str[i + 1].charCodeAt(0) * (i - 1));\n        }\n\n        hash += String.fromCharCode(97 + (Math.abs(total) % 26));\n    }\n\n    return hash;\n}\n\nexport function match(str : string, pattern : RegExp) : ?string {\n    let regmatch = str.match(pattern);\n    if (regmatch) {\n        return regmatch[1];\n    }\n}\n\nexport function awaitKey<T: mixed>(obj : Object, key : string) : ZalgoPromise<T> {\n    return new ZalgoPromise(resolve => {\n\n        let value = obj[key];\n\n        if (value) {\n            return resolve(value);\n        }\n\n        delete obj[key];\n\n        Object.defineProperty(obj, key, {\n\n            configurable: true,\n\n            set(item) {\n                value = item;\n\n                if (value) {\n                    resolve(value);\n                }\n            },\n\n            get() : mixed {\n                return value;\n            }\n        });\n    });\n}\n\nexport function stringifyError(err : mixed, level : number = 1) : string {\n\n    if (level >= 3) {\n        return 'stringifyError stack overflow';\n    }\n\n    try {\n        if (!err) {\n            return `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n        }\n\n        if (typeof err === 'string') {\n            return err;\n        }\n\n        if (err instanceof Error) {\n            let stack = err && err.stack;\n            let message = err && err.message;\n\n            if (stack && message) {\n                if (stack.indexOf(message) !== -1) {\n                    return stack;\n                } else {\n                    return `${ message }\\n${ stack }`;\n                }\n            } else if (stack) {\n                return stack;\n            } else if (message) {\n                return message;\n            }\n        }\n\n        if (typeof err.toString === 'function') {\n            return err.toString();\n        }\n\n        return Object.prototype.toString.call(err);\n\n    } catch (newErr) { // eslint-disable-line unicorn/catch-error-name\n        return `Error while stringifying error: ${ stringifyError(newErr, level + 1) }`;\n    }\n}\n\nexport function stringifyErrorMessage(err : mixed) : string {\n\n    let defaultMessage = `<unknown error: ${ Object.prototype.toString.call(err) }>`;\n\n    if (!err) {\n        return defaultMessage;\n    }\n\n    if (err instanceof Error) {\n        return err.message || defaultMessage;\n    }\n\n    if (typeof err.message === 'string') {\n        return err.message || defaultMessage;\n    }\n\n    return defaultMessage;\n}\n\nexport function stringify(item : mixed) : string {\n    if (typeof item === 'string') {\n        return item;\n    }\n\n    if (item && typeof item.toString === 'function') {\n        return item.toString();\n    }\n\n    return Object.prototype.toString.call(item);\n}\n\nexport function domainMatches(hostname : string, domain : string) : boolean {\n    hostname = hostname.split('://')[1];\n    let index = hostname.indexOf(domain);\n    return (index !== -1 && hostname.slice(index) === domain);\n}\n\nexport function patchMethod(obj : Object, name : string, handler : Function) {\n    let original = obj[name];\n\n    obj[name] = function patchedMethod() : mixed {\n        return handler({\n            context:      this,\n            args:         Array.prototype.slice.call(arguments),\n            original,\n            callOriginal: () => original.apply(this, arguments)\n        });\n    };\n}\n\nexport function extend<T : Object | Function>(obj : T, source : Object) : T {\n    if (!source) {\n        return obj;\n    }\n\n    if (Object.assign) {\n        return Object.assign(obj, source);\n    }\n\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            obj[key] = source[key];\n        }\n    }\n\n    return obj;\n}\n\nexport function values<T>(obj : { [string] : T }) : Array<T> {\n    let result = [];\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            result.push(obj[key]);\n        }\n    }\n    return result;\n}\n\nexport function perc(pixels : number, percentage : number) : number {\n    return Math.round((pixels * percentage) / 100);\n}\n\nexport function min(...args : Array<number>) : number {\n    return Math.min(...args);\n}\n\nexport function max(...args : Array<number>) : number {\n    return Math.max(...args);\n}\n\nexport function regexMap<T>(str : string, regexp : RegExp, handler : () => T) : Array<T> {\n    let results = [];\n\n    // $FlowFixMe\n    str.replace(regexp, function regexMapMatcher(item) {\n        results.push(handler ? handler.apply(null, arguments) : item);\n    });\n\n    // $FlowFixMe\n    return results;\n}\n\nexport function svgToBase64(svg : string) : string {\n    return `data:image/svg+xml;base64,${ base64encode(svg) }`;\n}\n\nexport function objFilter<T, R>(obj : { [string] : T }, filter? : (T, ?string) => mixed = Boolean) : { [string] : R } {\n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || !filter(obj[key], key)) {\n            continue;\n        }\n\n        result[key] = obj[key];\n    }\n\n    return result;\n}\n\nexport function identity <T>(item : T) : T {\n    return item;\n}\n\nexport function regexTokenize(text : string, regexp : RegExp) : Array<string> {\n    let result = [];\n    text.replace(regexp, token => {\n        result.push(token);\n        return '';\n    });\n    return result;\n}\n\nexport function promiseDebounce<T>(method : () => ZalgoPromise<T> | T, delay : number = 50) : () => ZalgoPromise<T> {\n\n    let promise;\n    let timeout;\n\n    return function promiseDebouncedMethod() : ZalgoPromise<T> {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n\n        let localPromise = promise = promise || new ZalgoPromise();\n\n        timeout = setTimeout(() => {\n            promise = null;\n            timeout = null;\n\n            ZalgoPromise.try(method).then(\n                result => { localPromise.resolve(result); },\n                err => { localPromise.reject(err); }\n            );\n        }, delay);\n\n        return localPromise;\n    };\n}\n\nexport function safeInterval(method : Function, time : number) : { cancel : () => void } {\n\n    let timeout;\n\n    function loop() {\n        timeout = setTimeout(() => {\n            method();\n            loop();\n        }, time);\n    }\n\n    loop();\n\n    return {\n        cancel() {\n            clearTimeout(timeout);\n        }\n    };\n}\n\nexport function isInteger(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+$/));\n}\n\nexport function isFloat(str : string) : boolean {\n    return Boolean(str.match(/^[0-9]+\\.[0-9]+$/));\n}\n\nexport function serializePrimitive(value : string | number | boolean) : string {\n    return value.toString();\n}\n\nexport function deserializePrimitive(value : string) : string | number | boolean {\n    if (value === 'true') {\n        return true;\n    } else if (value === 'false') {\n        return false;\n    } else if (isInteger(value)) {\n        return parseInt(value, 10);\n    } else if (isFloat(value)) {\n        return parseFloat(value);\n    } else {\n        return value;\n    }\n}\n\nexport function dotify(obj : Object, prefix : string = '', newobj : Object = {}) : { [string] : string } {\n    prefix = prefix ? `${ prefix }.` : prefix;\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || obj[key] === undefined || obj[key] === null || typeof obj[key] === 'function') {\n            continue;\n        } else if (obj[key] && Array.isArray(obj[key]) && obj[key].length && obj[key].every(val => typeof val !== 'object')) {\n            newobj[`${ prefix }${ key }[]`] = obj[key].join(',');\n        } else if (obj[key] && typeof obj[key] === 'object') {\n            newobj = dotify(obj[key], `${ prefix }${ key }`, newobj);\n        } else {\n            newobj[`${ prefix }${ key }`] = serializePrimitive(obj[key]);\n        }\n    }\n    return newobj;\n}\n\nexport function undotify(obj : { [string] : string }) : Object {\n    \n    let result = {};\n\n    for (let key in obj) {\n        if (!obj.hasOwnProperty(key) || typeof obj[key] !== 'string') {\n            continue;\n        }\n\n        let value = obj[key];\n\n        if (key.match(/^.+\\[\\]$/)) {\n            key = key.slice(0, key.length - 2);\n            value = value.split(',').map(deserializePrimitive);\n        } else {\n            value = deserializePrimitive(value);\n        }\n\n        let keyResult = result;\n        let parts = key.split('.');\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n            let isLast = (i + 1 === parts.length);\n            let isIndex = !isLast && isInteger(parts[i + 1]);\n\n            if (isLast) {\n                // $FlowFixMe\n                keyResult[part] = value;\n            } else {\n                // $FlowFixMe\n                keyResult = keyResult[part] = keyResult[part] || (isIndex ? [] : {});\n            }\n        }\n    }\n\n    return result;\n}\n\nexport type EventEmitterType = {\n    on : (eventName : string, handler : Function) => CancelableType,\n    once : (eventName : string, handler : Function) => CancelableType,\n    trigger : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>,\n    triggerOnce : (eventName : string, ...args : $ReadOnlyArray<mixed>) => ZalgoPromise<void>\n};\n\nexport function eventEmitter() : EventEmitterType {\n    let triggered = {};\n    let handlers = {};\n\n    return {\n\n        on(eventName : string, handler : Function) : CancelableType {\n            let handlerList = handlers[eventName] = handlers[eventName] || [];\n\n            handlerList.push(handler);\n\n            let cancelled = false;\n\n            return {\n                cancel() {\n                    if (!cancelled) {\n                        cancelled = true;\n                        handlerList.splice(handlerList.indexOf(handler), 1);\n                    }\n\n                }\n            };\n        },\n\n        once(eventName : string, handler : Function) : CancelableType {\n\n            let listener = this.on(eventName, () => {\n                listener.cancel();\n                handler();\n            });\n\n            return listener;\n        },\n\n        trigger(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            let handlerList = handlers[eventName];\n            let promises = [];\n\n            if (handlerList) {\n                for (let handler of handlerList) {\n                    promises.push(ZalgoPromise.try(() => handler(...args)));\n                }\n            }\n\n            return ZalgoPromise.all(promises).then(noop);\n        },\n\n        triggerOnce(eventName : string, ...args : $ReadOnlyArray<mixed>) : ZalgoPromise<void> {\n\n            if (triggered[eventName]) {\n                return ZalgoPromise.resolve();\n            }\n\n            triggered[eventName] = true;\n            return this.trigger(eventName, ...args);\n        }\n    };\n}\n\nexport function camelToDasherize(string : string) : string {\n    return string.replace(/([A-Z])/g, (g) => {\n        return `-${ g.toLowerCase() }`;\n    });\n}\n\nexport function dasherizeToCamel(string : string) : string {\n    return string.replace(/-([a-z])/g, (g) => {\n        return g[1].toUpperCase();\n    });\n}\n\nexport function capitalizeFirstLetter(string : string) : string {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n\nexport function get(item : Object, path : string, def : mixed) : mixed {\n\n    if (!path) {\n        return def;\n    }\n\n    let pathParts = path.split('.');\n\n    // Loop through each section of our key path\n\n    for (let i = 0; i < pathParts.length; i++) {\n\n        // If we have an object, we can get the key\n        if (typeof item === 'object' && item !== null) {\n            item = item[pathParts[i]];\n\n        // Otherwise, we should return the default (undefined if not provided)\n        } else {\n            return def;\n        }\n    }\n\n    // If our final result is undefined, we should return the default\n\n    return item === undefined ? def : item;\n}\n\nexport function safeTimeout(method : Function, time : number) {\n\n    let interval = safeInterval(() => {\n        time -= 100;\n        if (time <= 0) {\n            interval.cancel();\n            method();\n        }\n    }, 100);\n}\n\nexport function defineLazyProp<T>(obj : Object | Array<mixed>, key : string | number, getter : () => T) {\n    if (Array.isArray(obj)) {\n        if (typeof key !== 'number') {\n            throw new TypeError(`Array key must be number`);\n        }\n    } else if (typeof obj === 'object' && obj !== null) {\n        if (typeof key !== 'string') {\n            throw new TypeError(`Object key must be string`);\n        }\n    }\n    \n    Object.defineProperty(obj, key, {\n        configurable: true,\n        enumerable:   true,\n        get:          () => {\n            // $FlowFixMe\n            delete obj[key];\n            let value = getter();\n            // $FlowFixMe\n            obj[key] = value;\n            return value;\n        },\n        set: (value : T) => {\n            // $FlowFixMe\n            delete obj[key];\n            // $FlowFixMe\n            obj[key] = value;\n        }\n    });\n}\n\nexport function isObject(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null);\n}\n\nexport function isObjectObject(obj : mixed) : boolean {\n    return isObject(obj) && Object.prototype.toString.call(obj) === '[object Object]';\n}\n\nexport function isPlainObject(obj : mixed) : boolean {\n    if (!isObjectObject(obj)) {\n        return false;\n    }\n\n    // $FlowFixMe\n    let constructor = obj.constructor;\n\n    if (typeof constructor !== 'function') {\n        return false;\n    }\n\n    let prototype = constructor.prototype;\n\n    if (!isObjectObject(prototype)) {\n        return false;\n    }\n\n    if (!prototype.hasOwnProperty('isPrototypeOf')) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function replaceObject<T : Object | Array<mixed>> (item : T, replacer : (mixed, string | number, string) => mixed, fullKey : string = '') : T {\n\n    if (Array.isArray(item)) {\n        let length = item.length;\n        let result = [];\n\n        for (let i = 0; i < length; i++) {\n\n            \n            defineLazyProp(result, i, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ i }` : `${ i }`;\n                let el = item[i];\n\n                let child = replacer(el, i, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else if (isPlainObject(item)) {\n        let result = {};\n\n        for (let key in item) {\n            if (!item.hasOwnProperty(key)) {\n                continue;\n            }\n\n            defineLazyProp(result, key, () => {\n                let itemKey = fullKey ? `${ fullKey }.${ key }` : `${ key }`;\n                // $FlowFixMe\n                let el = item[key];\n\n                let child = replacer(el, key, itemKey);\n\n                if (isPlainObject(child) || Array.isArray(child)) {\n                    // $FlowFixMe\n                    child = replaceObject(child, replacer, itemKey);\n                }\n\n                return child;\n            });\n        }\n\n        // $FlowFixMe\n        return result;\n    } else {\n        throw new Error(`Pass an object or array`);\n    }\n}\n\n\nexport function copyProp(source : Object, target : Object, name : string, def : mixed) {\n    if (source.hasOwnProperty(name)) {\n        let descriptor = Object.getOwnPropertyDescriptor(source, name);\n        // $FlowFixMe\n        Object.defineProperty(target, name, descriptor);\n\n    } else {\n        target[name] = def;\n    }\n}\n\ntype RegexResultType = {\n    text : string,\n    groups : Array<string>,\n    start : number,\n    end : number,\n    length : number,\n    replace : (text : string) => string\n};\n\nexport function regex(pattern : string | RegExp, string : string, start : number = 0) : ?RegexResultType {\n\n    if (typeof pattern === 'string') {\n        // eslint-disable-next-line security/detect-non-literal-regexp\n        pattern = new RegExp(pattern);\n    }\n\n    let result = string.slice(start).match(pattern);\n\n    if (!result) {\n        return;\n    }\n\n    // $FlowFixMe\n    let index : number = result.index;\n    let regmatch = result[0];\n\n    return {\n        text:   regmatch,\n        groups: result.slice(1),\n        start:  start + index,\n        end:    start + index + regmatch.length,\n        length: regmatch.length,\n\n        replace(text : string) : string {\n\n            if (!regmatch) {\n                return '';\n            }\n\n            return `${ regmatch.slice(0, start + index) }${ text }${ regmatch.slice(index + regmatch.length) }`;\n        }\n    };\n}\n\nexport function regexAll(pattern : string | RegExp, string : string) : Array<RegexResultType> {\n\n    let matches = [];\n    let start = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let regmatch = regex(pattern, string, start);\n\n        if (!regmatch) {\n            break;\n        }\n\n        matches.push(regmatch);\n        start = match.end;\n    }\n\n    return matches;\n}\n\nexport function isDefined(value : ?mixed) : boolean {\n    return value !== null && value !== undefined;\n}\n\nexport function cycle(method : Function) : ZalgoPromise<void> {\n    return ZalgoPromise.try(method).then(() => cycle(method));\n}\n\nexport function debounce<T>(method : (...args : Array<mixed>) => T, time : number = 100) : (...args : Array<mixed>) => void {\n\n    let timeout;\n\n    return function debounceWrapper() {\n        clearTimeout(timeout);\n\n        timeout = setTimeout(() => {\n            return method.apply(this, arguments);\n        }, time);\n    };\n}\n\nexport function isRegex(item : mixed) : boolean {\n    return Object.prototype.toString.call(item) === '[object RegExp]';\n}\n\ntype FunctionProxy<T : Function> = (method : T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoize : FunctionProxy<*> = <R : mixed>(method : (arg : any) => R) : ((...args : Array<any>) => R) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoized(arg : any) : R {\n        return weakmap.getOrSet(arg, () => method.call(this, arg));\n    };\n};\n\ntype FunctionPromiseProxy<R : mixed, T : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<R>> = (T) => T;\n\n// eslint-disable-next-line flowtype/no-weak-types\nexport let weakMapMemoizePromise : FunctionPromiseProxy<*, *> = <R : mixed>(method : (arg : any) => ZalgoPromise<R>) : ((...args : Array<any>) => ZalgoPromise<R>) => {\n\n    let weakmap = new WeakMap();\n\n    // eslint-disable-next-line flowtype/no-weak-types\n    return function weakmapMemoizedPromise(arg : any) : ZalgoPromise<R> {\n        return weakmap.getOrSet(arg, () =>\n            method.call(this, arg).finally(() => {\n                weakmap.delete(arg);\n            })\n        );\n    };\n};\n\nexport function getOrSet<O : Object, T : mixed>(obj : O, key : string, getter : () => T) : T {\n    if (obj.hasOwnProperty(key)) {\n        return obj[key];\n    }\n\n    const val = getter();\n    obj[key] = val;\n    return val;\n}\n\nexport type CleanupType = {|\n    set : <T : mixed>(string, T) => T, // eslint-disable-line no-undef\n    register : (Function) => void,\n    all : () => ZalgoPromise<void>\n|};\n\nexport function cleanup(obj : Object) : CleanupType {\n\n    const tasks = [];\n    let cleaned = false;\n\n    return {\n        set<T : mixed>(name : string, item : T) : T {\n            if (!cleaned) {\n                obj[name] = item;\n                this.register(() => {\n                    delete obj[name];\n                });\n            }\n            return item;\n        },\n\n        register(method : Function) {\n            if (cleaned) {\n                method();\n            } else {\n                tasks.push(once(method));\n            }\n        },\n\n        all() : ZalgoPromise<void> {\n            const results = [];\n            cleaned = true;\n\n            while (tasks.length) {\n                const task = tasks.pop();\n                results.push(task());\n            }\n\n            return ZalgoPromise.all(results).then(noop);\n        }\n    };\n}\n\nexport function tryCatch<T>(fn : () => T) : {| result : T, error : void |} | {| result : void, error : mixed |} {\n    let result;\n    let error;\n\n    try {\n        result = fn();\n    } catch (err) {\n        error = err;\n    }\n    \n    // $FlowFixMe\n    return { result, error };\n}\n\nexport function removeFromArray<X, T : Array<X>>(arr : T, item : X) {\n    const index = arr.indexOf(item);\n    if (index !== -1) {\n        arr.splice(index, 1);\n    }\n}\n\nexport function assertExists<T>(name : string, thing : void | null | T) : T {\n    if (thing === null || typeof thing === 'undefined') {\n        throw new Error(`Expected ${ name } to be present`);\n    }\n\n    return thing;\n}\n","/* @flow */\n/* eslint max-lines: off */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { linkFrameWindow, isWindowClosed,\n    type SameDomainWindowType, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\n\nimport { inlineMemoize, noop, stringify, capitalizeFirstLetter,\n    once, extend, safeInterval } from './util';\nimport { isDevice } from './device';\nimport { KEY_CODES } from './constants';\nimport type { CancelableType } from './types';\n\ntype ElementRefType = string | HTMLElement;\n\nexport function isDocumentReady() : boolean {\n    return Boolean(document.body) && document.readyState === 'complete';\n}\n\nexport function urlEncode(str : string) : string {\n    return str.replace(/\\?/g, '%3F').replace(/&/g, '%26').replace(/#/g, '%23').replace(/\\+/g, '%2B');\n}\n\nexport function waitForWindowReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForWindowReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n            if (isDocumentReady()) {\n                resolve();\n            }\n\n            window.addEventListener('load', () => resolve());\n        });\n    });\n}\n\nexport function waitForDocumentReady() : ZalgoPromise<void> {\n    return inlineMemoize(waitForDocumentReady, () : ZalgoPromise<void> => {\n        return new ZalgoPromise(resolve => {\n\n            if (isDocumentReady()) {\n                return resolve();\n            }\n\n            let interval = setInterval(() => {\n                if (isDocumentReady()) {\n                    clearInterval(interval);\n                    return resolve();\n                }\n            }, 10);\n        });\n    });\n}\n\nexport function waitForDocumentBody() : ZalgoPromise<HTMLBodyElement> {\n    return waitForDocumentReady().then(() => {\n        if (document.body) {\n            return document.body;\n        }\n\n        throw new Error('Document ready but document.body not present');\n    });\n}\n\nexport function parseQuery(queryString : string) : Object {\n    return inlineMemoize(parseQuery, () : Object => {\n        let params = {};\n\n        if (!queryString) {\n            return params;\n        }\n\n        if (queryString.indexOf('=') === -1) {\n            return params;\n        }\n\n        for (let pair of queryString.split('&')) {\n            pair = pair.split('=');\n\n            if (pair[0] && pair[1]) {\n                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n            }\n        }\n\n        return params;\n    }, [ queryString ]);\n}\n\n\nexport function getQueryParam(name : string) : string {\n    return parseQuery(window.location.search.slice(1))[name];\n}\n\nexport function urlWillRedirectPage(url : string) : boolean {\n\n    if (url.indexOf('#') === -1) {\n        return true;\n    }\n\n    if (url.indexOf('#') === 0) {\n        return false;\n    }\n\n    if (url.split('#')[0] === window.location.href.split('#')[0]) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function formatQuery(obj : { [ string ] : string } = {}) : string {\n\n    return Object.keys(obj).filter(key => {\n        return typeof obj[key] === 'string';\n    }).map(key => {\n        return `${ urlEncode(key) }=${ urlEncode(obj[key]) }`;\n    }).join('&');\n}\n\nexport function extendQuery(originalQuery : string, props : { [ string ] : string } = {}) : string {\n\n    if (!props || !Object.keys(props).length) {\n        return originalQuery;\n    }\n\n    return formatQuery({\n        ...parseQuery(originalQuery),\n        ...props\n    });\n}\n\nexport function extendUrl(url : string, options : { query? : { [string] : string }, hash? : { [string] : string } } = {}) : string {\n\n    let query = options.query || {};\n    let hash = options.hash || {};\n\n    let originalUrl;\n    let originalQuery;\n    let originalHash;\n\n    [ originalUrl, originalHash ] = url.split('#');\n    [ originalUrl, originalQuery ] = originalUrl.split('?');\n\n    let queryString = extendQuery(originalQuery, query);\n    let hashString = extendQuery(originalHash, hash);\n\n    if (queryString) {\n        originalUrl = `${ originalUrl }?${ queryString }`;\n    }\n\n    if (hashString) {\n        originalUrl = `${ originalUrl }#${ hashString }`;\n    }\n\n    return originalUrl;\n}\n\nexport function redirect(url : string, win : CrossDomainWindowType = window) : ZalgoPromise<void> {\n    return new ZalgoPromise(resolve => {\n        win.location = url;\n        if (!urlWillRedirectPage(url)) {\n            resolve();\n        }\n    });\n}\n\nexport function hasMetaViewPort() : boolean {\n    let meta = document.querySelector('meta[name=viewport]');\n\n    if (isDevice() && window.screen.width < 660 && !meta) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function isElementVisible(el : HTMLElement) : boolean {\n    return Boolean(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n}\n\nexport function enablePerformance() : boolean {\n    return inlineMemoize(enablePerformance, () : boolean => {\n        /* eslint-disable compat/compat */\n        return Boolean(\n            window.performance &&\n            performance.now &&\n            performance.timing &&\n            performance.timing.connectEnd &&\n            performance.timing.navigationStart &&\n            (Math.abs(performance.now() - Date.now()) > 1000) &&\n            (performance.now() - (performance.timing.connectEnd - performance.timing.navigationStart)) > 0\n        );\n        /* eslint-enable compat/compat */\n    });\n}\n\nexport function getPageRenderTime() : ZalgoPromise<?number> {\n    return waitForDocumentReady().then(() => {\n\n        if (!enablePerformance()) {\n            return;\n        }\n\n        let timing = window.performance.timing;\n\n        if (timing.connectEnd && timing.domInteractive) {\n            return timing.domInteractive - timing.connectEnd;\n        }\n    });\n}\n\nexport function htmlEncode(html : string = '') : string {\n    return html.toString()\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;')\n        .replace(/\\//g, '&#x2F;');\n}\n\nexport function isBrowser() : boolean {\n    return (typeof window !== 'undefined');\n}\n\nexport function querySelectorAll(selector : string, doc : HTMLElement = window.document) : Array<Element> {\n    return Array.prototype.slice.call(doc.querySelectorAll(selector));\n}\n\nexport function onClick(element : Element, handler : (Event) => void) {\n    element.addEventListener('touchstart', noop);\n    element.addEventListener('click', handler);\n    element.addEventListener('keypress', (event : Event) => {\n        // $FlowFixMe\n        if (event.keyCode === KEY_CODES.ENTER) {\n            return handler(event);\n        }\n    });\n}\n\nexport function getScript({ host = window.location.host, path } : { host? : string, path : string }) : ?HTMLScriptElement {\n    return inlineMemoize(getScript, () : ?HTMLScriptElement => {\n\n        let url = `${ host }${ path }`;\n        let scripts = Array.prototype.slice.call(document.getElementsByTagName('script'));\n\n        for (let script of scripts) {\n            if (!script.src) {\n                continue;\n            }\n\n            let src = script.src.replace(/^https?:\\/\\//, '').split('?')[0];\n\n            if (src === url) {\n                return script;\n            }\n        }\n    }, [ path ]);\n}\n\nexport function isLocalStorageEnabled() : boolean {\n    return inlineMemoize(isLocalStorageEnabled, () => {\n        try {\n            if (typeof window === 'undefined') {\n                return false;\n            }\n\n            if (window.localStorage) {\n                let value = Math.random().toString();\n                window.localStorage.setItem('__test__localStorage__', value);\n                let result = window.localStorage.getItem('__test__localStorage__');\n                window.localStorage.removeItem('__test__localStorage__');\n                if (value === result) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            // pass\n        }\n        return false;\n    });\n}\n\nexport function getBrowserLocales() : Array<{ country? : string, lang : string }> {\n    let nav = window.navigator;\n\n    let locales = nav.languages\n        ? Array.prototype.slice.apply(nav.languages)\n        : [];\n\n    if (nav.language) {\n        locales.push(nav.language);\n    }\n\n    if (nav.userLanguage) {\n        locales.push(nav.userLanguage);\n    }\n\n    return locales.map(locale => {\n\n        if (locale && locale.match(/^[a-z]{2}[-_][A-Z]{2}$/)) {\n            let [ lang, country ] = locale.split(/[-_]/);\n            return { country, lang };\n        }\n\n        if (locale && locale.match(/^[a-z]{2}$/)) {\n            return { lang: locale };\n        }\n\n        return null;\n\n    }).filter(Boolean);\n}\n\n\nexport function appendChild(container : HTMLElement, child : HTMLElement | Text) {\n    container.appendChild(child);\n}\n\nexport function isElement(element : mixed) : boolean {\n\n    if (element instanceof window.Element) {\n        return true;\n    }\n\n    if (element !== null && typeof element === 'object' && element.nodeType === 1 && typeof element.style === 'object' && typeof element.ownerDocument === 'object') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getElementSafe(id : ElementRefType, doc : Document | HTMLElement = document) : ?HTMLElement {\n\n    if (isElement(id)) {\n        // $FlowFixMe\n        return id;\n    }\n\n    if (typeof id === 'string') {\n        return doc.querySelector(id);\n    }\n}\n\nexport function getElement(id : ElementRefType, doc : Document | HTMLElement = document) : HTMLElement {\n\n    let element = getElementSafe(id, doc);\n\n    if (element) {\n        return element;\n    }\n\n    throw new Error(`Can not find element: ${ stringify(id) }`);\n}\n\nexport function elementReady(id : ElementRefType) : ZalgoPromise<window.HTMLElement> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let name = stringify(id);\n        let el = getElementSafe(id);\n\n        if (el) {\n            return resolve(el);\n        }\n\n        if (isDocumentReady()) {\n            return reject(new Error(`Document is ready and element ${ name } does not exist`));\n        }\n\n        let interval = setInterval(() => {\n\n            el = getElementSafe(id);\n\n            if (el) {\n                clearInterval(interval);\n                return resolve(el);\n            }\n\n            if (isDocumentReady()) {\n                clearInterval(interval);\n                return reject(new Error(`Document is ready and element ${ name } does not exist`));\n            }\n        }, 10);\n    });\n}\n\nexport function PopupOpenError(message : string) {\n    this.message = message;\n}\n\nPopupOpenError.prototype = Object.create(Error.prototype);\n\ntype PopupOptions = {|\n    name? : string,\n    width? : number,\n    height? : number,\n    top? : number,\n    left? : number,\n    status? : 0 | 1,\n    resizable? : 0 | 1,\n    toolbar? : 0 | 1,\n    menubar? : 0 | 1,\n    scrollbars? : 0 | 1\n|};\n\nexport function popup(url : string, options? : PopupOptions) : CrossDomainWindowType {\n\n    // $FlowFixMe\n    options = options || {};\n\n    let { width, height } = options;\n\n    let top = 0;\n    let left = 0;\n\n    if (width) {\n        if (window.outerWidth) {\n            left = Math.round((window.outerWidth - width) / 2) + window.screenX;\n        } else if (window.screen.width) {\n            left = Math.round((window.screen.width - width) / 2);\n        }\n    }\n\n    if (height) {\n        if (window.outerHeight) {\n            top = Math.round((window.outerHeight - height) / 2) + window.screenY;\n        } else if (window.screen.height) {\n            top = Math.round((window.screen.height - height) / 2);\n        }\n    }\n\n    options = {\n        top,\n        left,\n        width,\n        height,\n        status:     1,\n        toolbar:    0,\n        menubar:    0,\n        resizable:  1,\n        scrollbars: 1,\n        ...options\n    };\n\n    let name = options.name || '';\n    delete options.name;\n\n    // eslint-disable-next-line array-callback-return\n    let params = Object.keys(options).map(key => {\n        // $FlowFixMe\n        if (options[key]) {\n            return `${ key }=${ stringify(options[key]) }`;\n        }\n    }).filter(Boolean).join(',');\n\n    let win;\n\n    try {\n        win = window.open(url, name, params, true);\n    } catch (err) {\n        throw new PopupOpenError(`Can not open popup window - ${ err.stack || err.message }`);\n    }\n\n    if (isWindowClosed(win)) {\n        let err = new PopupOpenError(`Can not open popup window - blocked`);\n        throw err;\n    }\n\n    window.addEventListener('unload', () => win.close());\n\n    return win;\n}\n\n\nexport function writeToWindow(win : SameDomainWindowType, html : string) {\n    try {\n        win.document.open();\n        win.document.write(html);\n        win.document.close();\n    } catch (err) {\n        try {\n            win.location = `javascript: document.open(); document.write(${ JSON.stringify(html) }); document.close();`;\n        } catch (err2) {\n            // pass\n        }\n    }\n}\n\nexport function writeElementToWindow(win : SameDomainWindowType, el : HTMLElement) {\n\n    let tag = el.tagName.toLowerCase();\n\n    if (tag !== 'html') {\n        throw new Error(`Expected element to be html, got ${ tag }`);\n    }\n\n    let documentElement = win.document.documentElement;\n\n    while (documentElement.children && documentElement.children.length) {\n        documentElement.removeChild(documentElement.children[0]);\n    }\n\n    while (el.children.length) {\n        documentElement.appendChild(el.children[0]);\n    }\n}\n\nexport function setStyle(el : HTMLElement, styleText : string, doc : Document = window.document) {\n    // $FlowFixMe\n    if (el.styleSheet) {\n        // $FlowFixMe\n        el.styleSheet.cssText = styleText;\n    } else {\n        el.appendChild(doc.createTextNode(styleText));\n    }\n}\n\nexport type ElementOptionsType = {\n    style? : { [ string ] : string },\n    id? : string,\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string\n};\n\nlet awaitFrameLoadPromises : WeakMap<HTMLIFrameElement, ZalgoPromise<HTMLIFrameElement>>;\n\nexport function awaitFrameLoad(frame : HTMLIFrameElement) : ZalgoPromise<HTMLIFrameElement> {\n    awaitFrameLoadPromises = awaitFrameLoadPromises || new WeakMap();\n\n    if (awaitFrameLoadPromises.has(frame)) {\n        let promise = awaitFrameLoadPromises.get(frame);\n        if (promise) {\n            return promise;\n        }\n    }\n\n    let promise = new ZalgoPromise((resolve, reject) => {\n        frame.addEventListener('load', () => {\n            linkFrameWindow(frame);\n            resolve(frame);\n        });\n\n        frame.addEventListener('error', (err : Event) => {\n            if (frame.contentWindow) {\n                resolve(frame);\n            } else {\n                reject(err);\n            }\n        });\n    });\n\n    awaitFrameLoadPromises.set(frame, promise);\n\n    return promise;\n}\n\nexport function awaitFrameWindow(frame : HTMLIFrameElement) : ZalgoPromise<CrossDomainWindowType> {\n\n    if (frame.contentWindow) {\n        return ZalgoPromise.resolve(frame.contentWindow);\n    }\n\n    return awaitFrameLoad(frame).then(loadedFrame => {\n\n        if (!loadedFrame.contentWindow) {\n            throw new Error(`Could not find window in iframe`);\n        }\n\n        return loadedFrame.contentWindow;\n    });\n}\n\nexport function createElement(tag : string = 'div', options : ElementOptionsType = {}, container : ?HTMLElement) : HTMLElement {\n\n    tag = tag.toLowerCase();\n    let element = document.createElement(tag);\n\n    if (options.style) {\n        extend(element.style, options.style);\n    }\n\n    if (options.class) {\n        element.className = options.class.join(' ');\n    }\n\n    if (options.id) {\n        element.setAttribute('id', options.id);\n    }\n\n    if (options.attributes) {\n        for (let key of Object.keys(options.attributes)) {\n            element.setAttribute(key, options.attributes[key]);\n        }\n    }\n\n    if (options.styleSheet) {\n        setStyle(element, options.styleSheet);\n    }\n\n    if (container) {\n        appendChild(container, element);\n    }\n\n    if (options.html) {\n        if (tag === 'iframe') {\n            // $FlowFixMe\n            if (!container || !element.contentWindow) {\n                throw new Error(`Iframe html can not be written unless container provided and iframe in DOM`);\n            }\n\n            // $FlowFixMe\n            writeToWindow(element.contentWindow, options.html);\n\n        } else {\n            element.innerHTML = options.html;\n        }\n    }\n\n    return element;\n}\n\n\nexport type IframeElementOptionsType = {\n    style? : { [ string ] : string },\n    class? : ?Array<string>,\n    attributes? : { [ string ] : string },\n    styleSheet? : ?string,\n    html? : ?string,\n    url? : ?string\n};\n\nexport function iframe(options : IframeElementOptionsType = {}, container : ?HTMLElement, attempts : number = 3) : HTMLIFrameElement {\n\n    let attributes = options.attributes || {};\n    let style = options.style || {};\n\n    let frame = createElement('iframe', {\n        attributes: {\n            frameBorder:       '0',\n            allowTransparency: 'true',\n            ...attributes\n        },\n        style: {\n            backgroundColor: 'transparent',\n            ...style\n        },\n        html:  options.html,\n        class: options.class\n    });\n\n    // $FlowFixMe\n    awaitFrameLoad(frame);\n\n    if (container) {\n        let el = getElement(container);\n        el.appendChild(frame);\n    \n        // $FlowFixMe\n        let win = frame.contentWindow;\n    \n        if (win) {\n            try {\n                // $FlowFixMe\n                noop(win.name);\n            } catch (err) {\n                el.removeChild(frame);\n    \n                if (!attempts) {\n                    throw new Error(`Frame is cross-domain: ${ err.stack }`);\n                }\n    \n                return iframe(options, container, attempts - 1);\n            }\n        }\n    }\n\n    if (options.url || window.navigator.userAgent.match(/MSIE|Edge/i)) {\n        frame.setAttribute('src', options.url || 'about:blank');\n    }\n\n    // $FlowFixMe\n    return frame;\n}\n\nexport function addEventListener(obj : HTMLElement, event : string, handler : (event : Event) => void) : CancelableType {\n    obj.addEventListener(event, handler);\n    return {\n        cancel() {\n            obj.removeEventListener(event, handler);\n        }\n    };\n}\n\nexport function bindEvents(element : HTMLElement, eventNames : Array<string>, handler : (event : Event) => void) : CancelableType {\n\n    handler = once(handler);\n\n    for (let eventName of eventNames) {\n        element.addEventListener(eventName, handler);\n    }\n\n    return {\n        cancel: once(() => {\n            for (let eventName of eventNames) {\n                element.removeEventListener(eventName, handler);\n            }\n        })\n    };\n}\n\nconst VENDOR_PREFIXES = [ 'webkit', 'moz', 'ms', 'o' ];\n\nexport function setVendorCSS(element : HTMLElement, name : string, value : string) {\n\n    // $FlowFixMe\n    element.style[name] = value;\n\n    let capitalizedName = capitalizeFirstLetter(name);\n\n    for (let prefix of VENDOR_PREFIXES) {\n        // $FlowFixMe\n        element.style[`${ prefix }${ capitalizedName }`] = value;\n    }\n}\n\nfunction isValidAnimation(element : HTMLElement, name : string) : boolean {\n\n    let CSSRule = window.CSSRule;\n\n    const KEYFRAMES_RULE = CSSRule.KEYFRAMES_RULE || CSSRule.WEBKIT_KEYFRAMES_RULE || CSSRule.MOZ_KEYFRAMES_RULE ||\n        CSSRule.O_KEYFRAMES_RULE || CSSRule.MS_KEYFRAMES_RULE;\n\n    let stylesheets = element.ownerDocument.styleSheets;\n\n    try {\n        for (let i = 0; i < stylesheets.length; i++) {\n\n            // $FlowFixMe\n            let cssRules = stylesheets[i].cssRules;\n\n            if (!cssRules) {\n                continue;\n            }\n\n            for (let j = 0; j < cssRules.length; j++) {\n\n                let cssRule = cssRules[j];\n\n                if (!cssRule) {\n                    continue;\n                }\n\n                if (cssRule.type === KEYFRAMES_RULE && cssRule.name === name) {\n                    return true;\n                }\n            }\n        }\n    } catch (err) {\n\n        return false;\n    }\n\n\n    return false;\n}\n\n\nconst ANIMATION_START_EVENTS = [ 'animationstart', 'webkitAnimationStart', 'oAnimationStart', 'MSAnimationStart' ];\nconst ANIMATION_END_EVENTS   = [ 'animationend', 'webkitAnimationEnd', 'oAnimationEnd', 'MSAnimationEnd' ];\n\nexport function animate(element : ElementRefType, name : string, clean : (Function) => void, timeout : number = 1000) : ZalgoPromise<void> {\n    return new ZalgoPromise((resolve, reject) => {\n\n        let el = getElement(element);\n\n        if (!el || !isValidAnimation(el, name)) {\n            return resolve();\n        }\n\n        let hasStarted = false;\n\n        let startTimeout;\n        let endTimeout;\n        let startEvent;\n        let endEvent;\n\n        function cleanUp() {\n            clearTimeout(startTimeout);\n            clearTimeout(endTimeout);\n            startEvent.cancel();\n            endEvent.cancel();\n        }\n\n        startEvent = bindEvents(el, ANIMATION_START_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            clearTimeout(startTimeout);\n\n            event.stopPropagation();\n\n            startEvent.cancel();\n            hasStarted = true;\n\n            endTimeout = setTimeout(() => {\n                cleanUp();\n                resolve();\n            }, timeout);\n        });\n\n        endEvent = bindEvents(el, ANIMATION_END_EVENTS, event => {\n\n            // $FlowFixMe\n            if (event.target !== el || event.animationName !== name) {\n                return;\n            }\n\n            cleanUp();\n\n            // $FlowFixMe\n            if (typeof event.animationName === 'string' && event.animationName !== name) {\n                return reject(`Expected animation name to be ${ name }, found ${ event.animationName }`);\n            }\n\n            return resolve();\n        });\n\n        setVendorCSS(el, 'animationName', name);\n\n        startTimeout = setTimeout(() => {\n            if (!hasStarted) {\n                cleanUp();\n                return resolve();\n            }\n        }, 200);\n\n        if (clean) {\n            clean(cleanUp);\n        }\n    });\n}\n\nconst STYLE = {\n\n    DISPLAY: {\n        NONE:  'none',\n        BLOCK: 'block'\n    },\n\n    VISIBILITY: {\n        VISIBLE: 'visible',\n        HIDDEN:  'hidden'\n    },\n\n    IMPORTANT: 'important'\n};\n\nexport function makeElementVisible(element : HTMLElement) {\n    element.style.setProperty('visibility', '');\n}\n\nexport function makeElementInvisible(element : HTMLElement) {\n    element.style.setProperty('visibility', STYLE.VISIBILITY.HIDDEN, STYLE.IMPORTANT);\n}\n\n\nexport function showElement(element : HTMLElement) {\n    element.style.setProperty('display', '');\n}\n\nexport function hideElement(element : HTMLElement) {\n    element.style.setProperty('display', STYLE.DISPLAY.NONE, STYLE.IMPORTANT);\n}\n\nexport function destroyElement(element : HTMLElement) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n\nexport function showAndAnimate(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    let animation = animate(element, name, clean);\n    showElement(element);\n    return animation;\n}\n\nexport function animateAndHide(element : HTMLElement, name : string, clean : (Function) => void) : ZalgoPromise<void> {\n    return animate(element, name, clean).then(() => {\n        hideElement(element);\n    });\n}\n\nexport function addClass(element : HTMLElement, name : string) {\n    element.classList.add(name);\n}\n\nexport function removeClass(element : HTMLElement, name : string) {\n    element.classList.remove(name);\n}\n\nexport function isElementClosed(el : HTMLElement) : boolean {\n    if (!el || !el.parentNode) {\n        return true;\n    }\n    return false;\n}\n\nexport function watchElementForClose(element : HTMLElement, handler : () => mixed) : CancelableType {\n    handler = once(handler);\n\n    let interval;\n\n    if (isElementClosed(element)) {\n        handler();\n    } else {\n        interval = safeInterval(() => {\n            if (isElementClosed(element)) {\n                interval.cancel();\n                handler();\n            }\n        }, 50);\n    }\n\n    return {\n        cancel() {\n            if (interval) {\n                interval.cancel();\n            }\n        }\n    };\n}\n\nexport function fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (let script of querySelectorAll('script', el)) {\n        let parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        let newScript = doc.createElement('script');\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype OnResizeOptions = {|\n    width? : boolean,\n    height? : boolean,\n    interval? : number,\n    win? : SameDomainWindowType\n|};\n\nexport function onResize(el : HTMLElement, handler : ({ width : number, height : number }) => void, { width = true, height = true, interval = 100, win = window } : OnResizeOptions = {}) : {} {\n    let currentWidth = el.offsetWidth;\n    let currentHeight = el.offsetHeight;\n\n    handler({ width: currentWidth, height: currentHeight });\n\n    let check = () => {\n        let newWidth = el.offsetWidth;\n        let newHeight = el.offsetHeight;\n\n        if ((width && newWidth !== currentWidth) || (height && newHeight !== currentHeight)) {\n            handler({ width: newWidth, height: newHeight });\n        }\n\n        currentWidth = newWidth;\n        currentHeight = newHeight;\n    };\n\n    let observer;\n    let timeout;\n\n    if (typeof win.ResizeObserver !== 'undefined') {\n        observer = new win.ResizeObserver(check);\n        observer.observe(el);\n\n    } else if (typeof win.MutationObserver !== 'undefined') {\n        observer = new win.MutationObserver(check);\n        observer.observe(el, {\n            attributes:    true,\n            childList:     true,\n            subtree:       true,\n            characterData: false\n        });\n        win.addEventListener('resize', check);\n    } else {\n        let loop = () => {\n            check();\n            timeout = setTimeout(loop, interval);\n        };\n        loop();\n    }\n\n    return {\n        cancel: () => {\n            observer.disconnect();\n            window.removeEventListener('resize', check);\n            clearTimeout(timeout);\n        }\n    };\n}\n","/* @flow */\n\nexport function hasNativeWeakMap() : boolean {\n\n    if (typeof WeakMap === 'undefined') {\n        return false;\n    }\n\n    if (typeof Object.freeze === 'undefined') {\n        return false;\n    }\n\n    try {\n\n        let testWeakMap = new WeakMap();\n        let testKey = {};\n        let testValue = '__testvalue__';\n\n        Object.freeze(testKey);\n\n        testWeakMap.set(testKey, testValue);\n\n        if (testWeakMap.get(testKey) === testValue) {\n            return true;\n        }\n\n        return false;\n\n    } catch (err) {\n\n        return false;\n    }\n}\n","/* @flow */\n\nexport function isPerc(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+%$/).test(str);\n}\n\nexport function isPx(str : string) : boolean {\n    return typeof str === 'string' && (/^[0-9]+px$/).test(str);\n}\n\nexport function toNum(val : string | number) : number {\n\n    if (typeof val === 'number') {\n        return val;\n    }\n\n    let match = val.match(/^([0-9]+)(px|%)$/);\n\n    if (!match) {\n        throw new Error(`Could not match css value from ${ val }`);\n    }\n\n    return parseInt(match[1], 10);\n}\n\nexport function toPx(val : number | string) : string {\n    return `${ toNum(val) }px`;\n}\n\nexport function toCSS(val : number | string) : string {\n\n    if (typeof val === 'number') {\n        return toPx(val);\n    }\n\n    return isPerc(val) ? val : toPx(val);\n}\n\nexport function percOf(num : number, perc : string) : number {\n    return parseInt(num * toNum(perc)  / 100, 10);\n}\n\nexport function normalizeDimension(dim : string | number, max : number) : number {\n    if (typeof dim === 'number') {\n        return dim;\n    } else if (isPerc(dim)) {\n        return percOf(max, dim);\n    } else if (isPx(dim)) {\n        return toNum(dim);\n    } else {\n        throw new Error(`Can not normalize dimension: ${ dim }`);\n    }\n}\n","/* @flow */\n\nexport const BRIDGE_TIMEOUT = 5000;\nexport const CHILD_WINDOW_TIMEOUT = 5000;\n\nexport const ACK_TIMEOUT = 2000;\nexport const ACK_TIMEOUT_KNOWN = 10000;\nexport const RES_TIMEOUT = __TEST__ ? 2000 : -1;\n","/* @flow */\n\nexport const MESSAGE_TYPE = {\n    REQUEST:  ('postrobot_message_request' : 'postrobot_message_request'),\n    RESPONSE: ('postrobot_message_response' : 'postrobot_message_response'),\n    ACK:      ('postrobot_message_ack' : 'postrobot_message_ack')\n};\n\nexport const MESSAGE_ACK = {\n    SUCCESS: ('success' : 'success'),\n    ERROR:   ('error' : 'error')\n};\n\nexport const MESSAGE_NAME = {\n    METHOD:      ('postrobot_method' : 'postrobot_method'),\n    HELLO:       ('postrobot_hello' : 'postrobot_hello'),\n    OPEN_TUNNEL: ('postrobot_open_tunnel' : 'postrobot_open_tunnel')\n};\n\nexport const SEND_STRATEGY = {\n    POST_MESSAGE: ('postrobot_post_message' : 'postrobot_post_message'),\n    BRIDGE:       ('postrobot_bridge' : 'postrobot_bridge'),\n    GLOBAL:       ('postrobot_global' : 'postrobot_global')\n};\n\nexport const BRIDGE_NAME_PREFIX = '__postrobot_bridge__';\nexport const POSTROBOT_PROXY =    '__postrobot_proxy__';\n\nexport const WILDCARD = '*';\n\nexport const SERIALIZATION_TYPE = {\n    CROSS_DOMAIN_ZALGO_PROMISE: ('cross_domain_zalgo_promise' : 'cross_domain_zalgo_promise'),\n    CROSS_DOMAIN_FUNCTION:      ('cross_domain_function' : 'cross_domain_function'),\n    CROSS_DOMAIN_WINDOW:        ('cross_domain_window' : 'cross_domain_window')\n};\n","/* @flow */\n\nimport { type CrossDomainWindowType, type SameDomainWindowType } from 'cross-domain-utils/src';\nimport { WeakMap } from 'cross-domain-safe-weakmap/src';\nimport { getOrSet } from 'belter/src';\n\nexport function getGlobal(win : SameDomainWindowType = window) : Object {\n    if (win !== window) {\n        return win[__POST_ROBOT__.__GLOBAL_KEY__];\n    }\n    const global : Object = win[__POST_ROBOT__.__GLOBAL_KEY__] = win[__POST_ROBOT__.__GLOBAL_KEY__] || {};\n    return global;\n}\n\ntype ObjectGetter = () => Object;\nconst getObj : ObjectGetter = () => ({});\n\ntype GetOrSet<T> = ((string, () => T) => T) & ((string, () => void) => void);\n\ntype GlobalStore<T> = {|\n    get : ((string, T) => T) & ((string, void) => T | void),\n    set : (string, T) => T,\n    has : (string) => boolean,\n    del : (string) => void,\n    getOrSet : GetOrSet<T>,\n    reset : () => void,\n    keys : () => $ReadOnlyArray<string>\n|};\n\n// $FlowFixMe\nexport function globalStore<T : mixed>(key? : string = 'store', defStore? : ObjectGetter = getObj) : GlobalStore<T> {\n    return getOrSet(getGlobal(), key, () => {\n        let store = defStore();\n\n        return {\n            has: (storeKey) => {\n                return store.hasOwnProperty(storeKey);\n            },\n            get: (storeKey, defVal) => {\n                // $FlowFixMe\n                return store.hasOwnProperty(storeKey) ? store[storeKey] : defVal;\n            },\n            set: (storeKey, val) => {\n                store[storeKey] = val;\n                return val;\n            },\n            del: (storeKey) => {\n                delete store[storeKey];\n            },\n            getOrSet: (storeKey, getter) => {\n                // $FlowFixMe\n                return getOrSet(store, storeKey, getter);\n            },\n            reset: () => {\n                store = defStore();\n            },\n            keys: () => {\n                return Object.keys(store);\n            }\n        };\n    });\n}\n\nexport class WildCard {}\n\nexport function getWildcard() : WildCard {\n    const global = getGlobal();\n    global.WINDOW_WILDCARD = global.WINDOW_WILDCARD || new WildCard();\n    return global.WINDOW_WILDCARD;\n}\n\ntype WindowStore<T> = {|\n    get : ((CrossDomainWindowType | WildCard, T) => T) & ((CrossDomainWindowType | WildCard, void) => T | void),\n    set : (CrossDomainWindowType | WildCard, T) => T,\n    has : (CrossDomainWindowType | WildCard) => boolean,\n    del : (CrossDomainWindowType | WildCard) => void,\n    getOrSet : (CrossDomainWindowType | WildCard, () => T) => T\n|};\n\n// $FlowFixMe\nexport function windowStore<T>(key? : string = 'store', defStore? : ObjectGetter = getObj) : WindowStore<T> {\n    return globalStore('windowStore').getOrSet(key, () => {\n        const winStore = new WeakMap();\n\n        const getStore = (win : CrossDomainWindowType | WildCard) : ObjectGetter => {\n            return winStore.getOrSet(win, defStore);\n        };\n    \n        return {\n            has: (win) => {\n                const store = getStore(win);\n                return store.hasOwnProperty(key);\n            },\n            get: (win, defVal) => {\n                const store = getStore(win);\n                // $FlowFixMe\n                return store.hasOwnProperty(key) ? store[key] : defVal;\n            },\n            set: (win, val) => {\n                const store = getStore(win);\n                store[key] = val;\n                return val;\n            },\n            del: (win) => {\n                const store = getStore(win);\n                delete store[key];\n            },\n            getOrSet: (win, getter) => {\n                const store = getStore(win);\n                return getOrSet(store, key, getter);\n            }\n        };\n    });\n}\n","/* @flow */\n\nimport { getAncestor, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { noop, uniqueID } from 'belter/src';\n\nimport { MESSAGE_NAME, WILDCARD } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nfunction getInstanceID() : string {\n    return globalStore('instance').getOrSet('instanceID', uniqueID);\n}\n\nfunction getHelloPromise(win : CrossDomainWindowType) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    const helloPromises = windowStore('helloPromises');\n    return helloPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nfunction listenForHello({ on } : { on : OnType }) : CancelableType {\n    return on(MESSAGE_NAME.HELLO, { domain: WILDCARD }, ({ source, origin }) => {\n        getHelloPromise(source).resolve({ win: source, domain: origin });\n        return { instanceID: getInstanceID() };\n    });\n}\n\nexport function sayHello(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<{ win : CrossDomainWindowType, domain : string, instanceID : string }> {\n    return send(win, MESSAGE_NAME.HELLO, { instanceID: getInstanceID() }, { domain: WILDCARD, timeout: -1 })\n        .then(({ origin, data: { instanceID } }) => {\n            getHelloPromise(win).resolve({ win, domain: origin });\n            return { win, domain: origin, instanceID };\n        });\n}\n\nexport function getWindowInstanceID(win : CrossDomainWindowType, { send } : { send : SendType }) : ZalgoPromise<string> {\n    return windowStore('windowInstanceIDPromises').getOrSet(win, () => {\n        return sayHello(win, { send }).then(({ instanceID }) => instanceID);\n    });\n}\n\nexport function initHello({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('helloListener', () => {\n        const listener = listenForHello({ on });\n\n        const parent = getAncestor();\n        if (parent) {\n            sayHello(parent, { send }).catch(noop);\n        }\n\n        return listener;\n    });\n}\n\nexport function awaitWindowHello(win : CrossDomainWindowType, timeout : number = 5000, name : string = 'Window') : ZalgoPromise<{ win : CrossDomainWindowType, domain : string }> {\n    let promise = getHelloPromise(win);\n\n    if (timeout !== -1) {\n        promise = promise.timeout(timeout, new Error(`${ name } did not load after ${ timeout }ms`));\n    }\n\n    return promise;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport { windowStore } from '../global';\n\nexport function markWindowKnown(win : CrossDomainWindowType) {\n    const knownWindows = windowStore('knownWindows');\n    knownWindows.set(win, true);\n}\n\nexport function isWindowKnown(win : CrossDomainWindowType) : boolean {\n    const knownWindows = windowStore('knownWindows');\n    return knownWindows.get(win, false);\n}\n","/* @flow */\n\nexport const TYPE = {\n    FUNCTION:  ('function' : 'function'),\n    ERROR:     ('error' : 'error'),\n    PROMISE:   ('promise' : 'promise'),\n    REGEX:     ('regex' : 'regex'),\n    DATE:      ('date' : 'date'),\n    ARRAY:     ('array' : 'array'),\n    OBJECT:    ('object' : 'object'),\n    STRING:    ('string' : 'string'),\n    NUMBER:    ('number' : 'number'),\n    BOOLEAN:   ('boolean' : 'boolean'),\n    NULL:      ('null' : 'null'),\n    UNDEFINED: ('undefined' : 'undefined')\n};\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { CustomSerializedType } from './types';\n\nexport function isSerializedType(item : mixed) : boolean {\n    return (typeof item === 'object' && item !== null && typeof item.__type__ === 'string');\n}\n\nexport function determineType(val : mixed) : $Values<typeof TYPE> | void {\n    if (typeof val === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    if (val === null) {\n        return TYPE.NULL;\n    }\n\n    if (Array.isArray(val)) {\n        return TYPE.ARRAY;\n    }\n\n    if (typeof val === 'function') {\n        return TYPE.FUNCTION;\n    }\n\n    if (typeof val === 'object') {\n\n        if (val instanceof Error) {\n            return TYPE.ERROR;\n        }\n\n        if (typeof val.then === 'function') {\n            return TYPE.PROMISE;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object RegExp]') {\n            return TYPE.REGEX;\n        }\n\n        if (Object.prototype.toString.call(val) === '[object Date]') {\n            return TYPE.DATE;\n        }\n\n        return TYPE.OBJECT;\n    }\n\n    if (typeof val === 'string') {\n        return TYPE.STRING;\n    }\n\n    if (typeof val === 'number') {\n        return TYPE.NUMBER;\n    }\n\n    if (typeof val === 'boolean') {\n        return TYPE.BOOLEAN;\n    }\n}\n\nexport function serializeType<T : string, V : mixed>(type : T, val : V) : CustomSerializedType<T, V> {\n    return {\n        __type__: type,\n        __val__:  val\n    };\n}\n","/* @flow */\n\nimport { TYPE } from './constants';\nimport type { Thenable, CustomSerializedType, NativeSerializedType } from './types';\nimport { determineType, isSerializedType } from './common';\nimport {\n    serializeFunction,\n    serializeError, type SerializedError,\n    serializePromise,\n    serializeRegex, type SerializedRegex,\n    serializeDate, type SerializedDate,\n    serializeArray,\n    serializeObject,\n    serializeString,\n    serializeNumber,\n    serializeBoolean,\n    serializeNull\n} from './serializers';\n\ntype NativeSerializer<V : mixed, S : mixed, T : $Values<typeof TYPE>> = (value : V, key : string) => NativeSerializedType<T, S>;\ntype CustomSerializer<V : mixed, S : mixed, T : string> = (value : V, key : string) => CustomSerializedType<T, S>;\ntype PrimitiveSerializer<V : mixed, S : mixed> = (value : V, key : string) => S;\ntype CustomOrPrimitiveSerializer<V : mixed, T : string> = CustomSerializer<V, *, T> | PrimitiveSerializer<V, *>;\ntype NativeOrCustomOrPrimitiveSerializer<V : mixed, S : mixed, T : string> = NativeSerializer<V, S, T> | CustomOrPrimitiveSerializer<V, T>;\n\ntype Serializers = {|\n    function? : CustomOrPrimitiveSerializer<Function, typeof TYPE.FUNCTION>,\n    error? : NativeOrCustomOrPrimitiveSerializer<Error, SerializedError, typeof TYPE.ERROR>,\n    promise? : CustomOrPrimitiveSerializer<Thenable, typeof TYPE.PROMISE>,\n    regex? : NativeOrCustomOrPrimitiveSerializer<RegExp, SerializedRegex, typeof TYPE.REGEX>,\n    date? : NativeOrCustomOrPrimitiveSerializer<Date, SerializedDate, typeof TYPE.DATE>,\n    array? : CustomOrPrimitiveSerializer<$ReadOnlyArray<mixed>, typeof TYPE.ARRAY>,\n    object? : CustomOrPrimitiveSerializer<Object, typeof TYPE.OBJECT>,\n    string? : CustomOrPrimitiveSerializer<string, typeof TYPE.STRING>,\n    number? : CustomOrPrimitiveSerializer<number, typeof TYPE.NUMBER>,\n    boolean? : CustomOrPrimitiveSerializer<boolean, typeof TYPE.BOOLEAN>,\n    null? : CustomOrPrimitiveSerializer<null, typeof TYPE.NULL>\n|};\n\nconst SERIALIZER : Serializers = {\n    [ TYPE.FUNCTION ]:  serializeFunction,\n    [ TYPE.ERROR ]:     serializeError,\n    [ TYPE.PROMISE ]:   serializePromise,\n    [ TYPE.REGEX ]:     serializeRegex,\n    [ TYPE.DATE ]:      serializeDate,\n    [ TYPE.ARRAY ]:     serializeArray,\n    [ TYPE.OBJECT ]:    serializeObject,\n    [ TYPE.STRING ]:    serializeString,\n    [ TYPE.NUMBER ]:    serializeNumber,\n    [ TYPE.BOOLEAN ]:   serializeBoolean,\n    [ TYPE.NULL ]:      serializeNull\n};\n\n// $FlowFixMe\nconst defaultSerializers : Serializers = {};\n\nexport function serialize<T : mixed>(obj : T, serializers : Serializers = defaultSerializers) : string {\n\n    function replacer(key) : ?mixed {\n        const val = this[key];\n\n        if (isSerializedType(this)) {\n            return val;\n        }\n        \n        const type = determineType(val);\n\n        if (!type) {\n            return val;\n        }\n\n        // $FlowFixMe\n        const serializer = serializers[type] || SERIALIZER[type];\n\n        if (!serializer) {\n            return val;\n        }\n\n        return serializer(val, key);\n    }\n\n    const result = JSON.stringify(obj, replacer);\n\n    if (typeof result === 'undefined') {\n        return TYPE.UNDEFINED;\n    }\n\n    return result;\n}\n","/* @flow */\n\nexport type SerializedFunction = void;\n\nexport function serializeFunction() : SerializedFunction {\n    // pass\n}\n\nexport function deserializeFunction() {\n    throw new Error(`Function serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedError = {|\n    message : string,\n    stack : string,\n    code : string | number | void\n|};\n\n// $FlowFixMe\nexport function serializeError({ message, stack, code } : Error) : NativeSerializedType<typeof TYPE.ERROR, SerializedError> {\n    return serializeType(TYPE.ERROR, { message, stack, code });\n}\n\nexport function deserializeError({ message, stack, code } : SerializedError) : Error {\n    const error = new Error(message);\n    // $FlowFixMe\n    error.code = code;\n    error.stack = `${ stack }\\n\\n${ error.stack }`;\n    return error;\n}\n","/* @flow */\n\nexport type SerializedPromise = void;\n\nexport function serializePromise() : SerializedPromise {\n    // pass\n}\n\nexport function deserializePromise() {\n    throw new Error(`Promise serialization is not implemented; nothing to deserialize`);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedRegex = string;\n\nexport function serializeRegex(val : RegExp) : NativeSerializedType<typeof TYPE.REGEX, SerializedRegex> {\n    return serializeType(TYPE.REGEX, val.source);\n}\n\nexport function deserializeRegex(val : string) : RegExp {\n    // eslint-disable-next-line security/detect-non-literal-regexp\n    return new RegExp(val);\n}\n","/* @flow */\n\nimport { serializeType } from '../common';\nimport { TYPE } from '../constants';\nimport type { NativeSerializedType } from '../types';\n\nexport type SerializedDate = string;\n\nexport function serializeDate(val : Date) : NativeSerializedType<typeof TYPE.DATE, SerializedDate> {\n    return serializeType(TYPE.DATE, val.toJSON());\n}\n\nexport function deserializeDate(val : string) : Date {\n    return new Date(val);\n}\n","/* @flow */\n\nexport type SerializedArray<T : mixed = mixed> = $ReadOnlyArray<T>;\n\nexport function serializeArray<T : mixed>(val : $ReadOnlyArray<T>) : SerializedArray<T> {\n    return val;\n}\n\nexport function deserializeArray<T : mixed>(val : SerializedArray<T>) : $ReadOnlyArray<T> {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedObject = Object;\n\nexport function serializeObject(val : Object) : SerializedObject {\n    return val;\n}\n\nexport function deserializeObject(val : SerializedObject) : Object {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedString = string;\n\nexport function serializeString(val : string) : SerializedString {\n    return val;\n}\n\nexport function deserializeString(val : SerializedString) : string {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNumber = number;\n\nexport function serializeNumber(val : number) : SerializedNumber {\n    return val;\n}\n\nexport function deserializeNumber(val : SerializedNumber) : number {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedBoolean = boolean;\n\nexport function serializeBoolean(val : boolean) : SerializedBoolean {\n    return val;\n}\n\nexport function deserializeBoolean(val : SerializedBoolean) : boolean {\n    return val;\n}\n","/* @flow */\n\nexport type SerializedNull = null;\n\nexport function serializeNull(val : null) : SerializedNull {\n    return val;\n}\n\nexport function deserializeNull(val : SerializedNull) : null {\n    return val;\n}\n","/* @flow */\n\nimport type { Thenable } from './types';\nimport { TYPE } from './constants';\nimport { determineType, isSerializedType } from './common';\nimport {\n    deserializeFunction,\n    deserializeError, type SerializedError,\n    deserializePromise,\n    deserializeRegex, type SerializedRegex,\n    deserializeDate, type SerializedDate,\n    deserializeArray,\n    deserializeObject,\n    deserializeString,\n    deserializeNumber,\n    deserializeBoolean,\n    deserializeNull\n} from './serializers';\n\ntype Deserializer<V : mixed, S : mixed> = (serializedValue : S, key : string) => V;\ntype PrimitiveDeserializer<V, S = V> = (serializedValue : S, key : string) => V;\n\ntype Deserializers = {\n    function? : Deserializer<Function, *>,\n    error? : Deserializer<Error, SerializedError>,\n    promise? : Deserializer<Thenable, *>,\n    regex? : Deserializer<RegExp, SerializedRegex>,\n    date? : Deserializer<Date, SerializedDate>,\n    array? : PrimitiveDeserializer<$ReadOnlyArray<mixed>>,\n    object? : PrimitiveDeserializer<Object>,\n    string? : PrimitiveDeserializer<string>,\n    number? : PrimitiveDeserializer<number>,\n    boolean? : PrimitiveDeserializer<boolean>,\n    null? : PrimitiveDeserializer<null>,\n    [string] : Deserializer<mixed, *>\n};\n\n// $FlowFixMe\nconst DESERIALIZER : Deserializers = {\n    [ TYPE.FUNCTION ]:  deserializeFunction,\n    [ TYPE.ERROR ]:     deserializeError,\n    [ TYPE.PROMISE ]:   deserializePromise,\n    [ TYPE.REGEX ]:     deserializeRegex,\n    [ TYPE.DATE ]:      deserializeDate,\n    [ TYPE.ARRAY ]:     deserializeArray,\n    [ TYPE.OBJECT ]:    deserializeObject,\n    [ TYPE.STRING ]:    deserializeString,\n    [ TYPE.NUMBER ]:    deserializeNumber,\n    [ TYPE.BOOLEAN ]:   deserializeBoolean,\n    [ TYPE.NULL ]:      deserializeNull\n};\n\n// $FlowFixMe\nconst defaultDeserializers : Deserializers = {};\n\nexport function deserialize<T : mixed | null | void>(str : string, deserializers : Deserializers = defaultDeserializers) : T {\n    if (str === TYPE.UNDEFINED) {\n        // $FlowFixMe\n        return;\n    }\n\n    function replacer(key, val) : ?mixed {\n        if (isSerializedType(this)) {\n            return val;\n        }\n\n        let type;\n        let value;\n\n        if (isSerializedType(val)) {\n            type = val.__type__;\n            value = val.__val__;\n        } else {\n            type = determineType(val);\n            value = val;\n        }\n\n        if (!type) {\n            return value;\n        }\n\n        // $FlowFixMe\n        const deserializer = deserializers[type] || DESERIALIZER[type];\n\n        if (!deserializer) {\n            return value;\n        }\n\n        return deserializer(value, key);\n    }\n\n    return JSON.parse(str, replacer);\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { getDomain, isSameDomain, isOpener, isSameTopWindow, matchDomain, getUserAgent, getDomainFromUrl, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { BRIDGE_NAME_PREFIX } from '../conf';\nimport { windowStore } from '../global';\n\nexport function needsBridgeForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForWin(win : CrossDomainWindowType) : boolean {\n\n    if (!isSameTopWindow(window, win)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function needsBridgeForDomain(domain : ?string, win : ?CrossDomainWindowType) : boolean {\n\n    if (domain) {\n        if (getDomain() !== getDomainFromUrl(domain)) {\n            return true;\n        }\n    } else if (win) {\n        if (!isSameDomain(win))  {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function needsBridge({ win, domain } : { win? : CrossDomainWindowType, domain? : string }) : boolean {\n\n    if (!needsBridgeForBrowser()) {\n        return false;\n    }\n\n    if (domain && !needsBridgeForDomain(domain, win)) {\n        return false;\n    }\n\n    if (win && !needsBridgeForWin(win)) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function getBridgeName(domain : string) : string {\n\n    domain = domain || getDomainFromUrl(domain);\n\n    const sanitizedDomain = domain.replace(/[^a-zA-Z0-9]+/g, '_');\n\n    const id = `${ BRIDGE_NAME_PREFIX }_${ sanitizedDomain }`;\n\n    return id;\n}\n\nexport function isBridge() : boolean {\n    return Boolean(window.name && window.name === getBridgeName(getDomain()));\n}\n\nexport const documentBodyReady = new ZalgoPromise(resolve => {\n\n    if (window.document && window.document.body) {\n        return resolve(window.document.body);\n    }\n\n    const interval = setInterval(() => {\n        if (window.document && window.document.body) {\n            clearInterval(interval);\n            return resolve(window.document.body);\n        }\n    }, 10);\n});\n\nexport function registerRemoteWindow(win : CrossDomainWindowType) {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    remoteWindowPromises.getOrSet(win, () => new ZalgoPromise());\n}\n\nexport function findRemoteWindow(win : CrossDomainWindowType) : ZalgoPromise<(remoteWin : CrossDomainWindowType, message : string, remoteDomain : string) => void> {\n    const remoteWindowPromises = windowStore('remoteWindowPromises');\n    const remoteWinPromise = remoteWindowPromises.get(win);\n\n    if (!remoteWinPromise) {\n        throw new Error(`Remote window promise not found`);\n    }\n\n    return remoteWinPromise;\n}\n\nexport function registerRemoteSendMessage(win : CrossDomainWindowType, domain : string, sendMessage : (message : string) => void) {\n    const sendMessageWrapper = (remoteWin : CrossDomainWindowType, remoteDomain : string, message : string) => {\n        if (remoteWin !== win) {\n            throw new Error(`Remote window does not match window`);\n        }\n\n        if (!matchDomain(remoteDomain, domain)) {\n            throw new Error(`Remote domain ${ remoteDomain } does not match domain ${ domain }`);\n        }\n\n        sendMessage.fireAndForget(message);\n    };\n\n    findRemoteWindow(win).resolve(sendMessageWrapper);\n}\n\nexport function rejectRemoteSendMessage(win : CrossDomainWindowType, err : Error) {\n    findRemoteWindow(win).reject(err).catch(noop);\n}\n\nexport function sendBridgeMessage(win : CrossDomainWindowType, domain : string, message : string) : ZalgoPromise<void> {\n\n    const messagingChild  = isOpener(window, win);\n    const messagingParent = isOpener(win, window);\n\n    if (!messagingChild && !messagingParent) {\n        throw new Error(`Can only send messages to and from parent and popup windows`);\n    }\n\n    return findRemoteWindow(win).then(sendMessage => {\n        return sendMessage(win, domain, message);\n    });\n}\n","/* @flow */\n\nimport { isSameDomain, isWindowClosed, type CrossDomainWindowType, type DomainMatcher, getOpener, WINDOW_TYPE, isWindow } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, memoizePromise } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport { getWindowInstanceID } from '../lib';\nimport { linkWindow } from '../bridge';\nimport type { OnType, SendType } from '../types';\n\nfunction cleanupProxyWindows() {\n    const idToProxyWindow = globalStore('idToProxyWindow');\n    for (const id of idToProxyWindow.keys()) {\n        // $FlowFixMe\n        if (idToProxyWindow.get(id).shouldClean()) {\n            idToProxyWindow.del(id);\n        }\n    }\n}\n\ntype SerializedProxyWindow = {|\n    id : string,\n    type : $Values<typeof WINDOW_TYPE>,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    isClosed : () => ZalgoPromise<boolean>,\n    setLocation : (string) => ZalgoPromise<void>,\n    setName : (string) => ZalgoPromise<void>,\n    getInstanceID : () => ZalgoPromise<string>\n|};\n\nexport class ProxyWindow {\n\n    isProxyWindow : true = true\n    serializedWindow : SerializedProxyWindow\n    actualWindow : CrossDomainWindowType\n    actualWindowPromise : ZalgoPromise<CrossDomainWindowType>\n    send : SendType\n\n    constructor(serializedWindow : SerializedProxyWindow, actualWindow? : ?CrossDomainWindowType, { send } : { send : SendType }) {\n        this.serializedWindow = serializedWindow;\n        this.actualWindowPromise = new ZalgoPromise();\n        if (actualWindow) {\n            this.setWindow(actualWindow);\n        }\n        this.serializedWindow.getInstanceID = memoizePromise(this.serializedWindow.getInstanceID);\n        this.send = send;\n    }\n\n    getType() : $Values<typeof WINDOW_TYPE> {\n        return this.serializedWindow.type;\n    }\n\n    isPopup() : boolean {\n        return this.getType() === WINDOW_TYPE.POPUP;\n    }\n\n    isIframe() : boolean {\n        return this.getType() === WINDOW_TYPE.IFRAME;\n    }\n\n    setLocation(href : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.location = href;\n            } else {\n                return this.serializedWindow.setLocation(href);\n            }\n        }).then(() => this);\n    }\n\n    setName(name : string) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                if (!isSameDomain(this.actualWindow)) {\n                    throw new Error(`Can not set name for window on different domain`);\n                }\n                // $FlowFixMe\n                this.actualWindow.name = name;\n                // $FlowFixMe\n                if (this.actualWindow.frameElement) {\n                    // $FlowFixMe\n                    this.actualWindow.frameElement.setAttribute('name', name);\n                }\n\n                if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                    \n                    linkWindow({ win: this.actualWindow, name });\n                }\n\n            } else {\n                return this.serializedWindow.setName(name);\n            }\n        }).then(() => this);\n    }\n\n    close() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.close();\n            } else {\n                return this.serializedWindow.close();\n            }\n        }).then(() => this);\n    }\n\n    focus() : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                this.actualWindow.focus();\n            }\n            return this.serializedWindow.focus();\n        }).then(() => this);\n    }\n\n    isClosed() : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return isWindowClosed(this.actualWindow);\n            } else {\n                return this.serializedWindow.isClosed();\n            }\n        });\n    }\n\n    getWindow() : ?CrossDomainWindowType {\n        return this.actualWindow;\n    }\n\n    setWindow(win : CrossDomainWindowType) {\n        this.actualWindow = win;\n        this.actualWindowPromise.resolve(win);\n    }\n\n    awaitWindow() : ZalgoPromise<CrossDomainWindowType> {\n        return this.actualWindowPromise;\n    }\n\n    matchWindow(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return ZalgoPromise.try(() => {\n            if (this.actualWindow) {\n                return win === this.actualWindow;\n            }\n            \n            return ZalgoPromise.all([\n                this.getInstanceID(),\n                getWindowInstanceID(win, { send: this.send })\n            ]).then(([ proxyInstanceID, knownWindowInstanceID ]) => {\n                const match = proxyInstanceID === knownWindowInstanceID;\n\n                if (match) {\n                    this.setWindow(win);\n                }\n\n                return match;\n            });\n        });\n    }\n\n    unwrap() : CrossDomainWindowType | ProxyWindow {\n        return this.actualWindow || this;\n    }\n\n    getInstanceID() : ZalgoPromise<string> {\n        if (this.actualWindow) {\n            return getWindowInstanceID(this.actualWindow, { send: this.send });\n        } else {\n            return this.serializedWindow.getInstanceID();\n        }\n    }\n\n    serialize() : SerializedProxyWindow {\n        return this.serializedWindow;\n    }\n\n    shouldClean() : boolean {\n        return this.actualWindow && isWindowClosed(this.actualWindow);\n    }\n\n    static unwrap(win : CrossDomainWindowType | ProxyWindow) : CrossDomainWindowType | ProxyWindow {\n        return ProxyWindow.isProxyWindow(win)\n            // $FlowFixMe\n            ? win.unwrap()\n            : win;\n    }\n\n    static serialize(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : SerializedProxyWindow {\n        cleanupProxyWindows();\n\n        return ProxyWindow.toProxyWindow(win, { send }).serialize();\n    }\n\n    static deserialize(serializedWindow : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n        \n        return globalStore('idToProxyWindow').getOrSet(serializedWindow.id, () => {\n            return new ProxyWindow(serializedWindow, null, { on, send });\n        });\n    }\n\n    static isProxyWindow(obj : CrossDomainWindowType | ProxyWindow) : boolean {\n        // $FlowFixMe\n        return Boolean(obj && !isWindow(obj) && obj.isProxyWindow);\n    }\n\n    static toProxyWindow(win : CrossDomainWindowType | ProxyWindow, { send } : { send : SendType }) : ProxyWindow {\n        cleanupProxyWindows();\n\n        if (ProxyWindow.isProxyWindow(win)) {\n            // $FlowFixMe\n            return win;\n        }\n\n        // $FlowFixMe\n        return windowStore('winToProxyWindow').getOrSet(win, () => {\n            const id = uniqueID();\n\n            return globalStore('idToProxyWindow').set(id, new ProxyWindow({\n                id,\n                // $FlowFixMe\n                type:          getOpener(win) ? WINDOW_TYPE.POPUP : WINDOW_TYPE.IFRAME,\n                // $FlowFixMe\n                getInstanceID: () => getWindowInstanceID(win, { send }),\n                close:         () => ZalgoPromise.try(() => {\n                    win.close();\n                }),\n                focus:         () => ZalgoPromise.try(() => {\n                    win.focus();\n                }),\n                isClosed:      () => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    return isWindowClosed(win);\n                }),\n                setLocation:   (href) => ZalgoPromise.try(() => {\n                    // $FlowFixMe\n                    if (isSameDomain(win)) {\n                        try {\n                            if (win.location && typeof win.location.replace === 'function') {\n                                // $FlowFixMe\n                                win.location.replace(href);\n                                return;\n                            }\n                        } catch (err) {\n                            // pass\n                        }\n                    }\n    \n                    // $FlowFixMe\n                    win.location = href;\n                }),\n                setName:       (name) => ZalgoPromise.try(() => {\n                    if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n                        // $FlowFixMe\n                        linkWindow({ win, name });\n                    }\n                    // $FlowFixMe\n                    win.name = name;\n                })\n            // $FlowFixMe\n            }, win, { send }));\n        });\n    }\n}\n\nexport type SerializedWindow = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, SerializedProxyWindow>;\n\nexport function serializeWindow(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, win : CrossDomainWindowType, { send } : { send : SendType }) : SerializedWindow {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW, ProxyWindow.serialize(win, { send }));\n}\n\nexport function deserializeWindow(source : CrossDomainWindowType | ProxyWindow, origin : string, win : SerializedProxyWindow, { on, send } : { on : OnType, send : SendType }) : ProxyWindow {\n    return ProxyWindow.deserialize(win, { on, send });\n}\n","/* @flow */\n\nimport { matchDomain, getDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { uniqueID, isRegex } from 'belter/src';\nimport { serializeType, type CustomSerializedType } from 'universal-serialize/src';\n\nimport { MESSAGE_NAME, WILDCARD, SERIALIZATION_TYPE } from '../conf';\nimport { windowStore, globalStore } from '../global';\nimport type { OnType, SendType, CancelableType } from '../types';\n\nimport { ProxyWindow } from './window';\n\ntype StoredMethod = {|\n    name : string,\n    domain : DomainMatcher,\n    val : Function,\n    source : CrossDomainWindowType | ProxyWindow\n|};\n\nfunction addMethod(id : string, val : Function, name : string, source : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher) {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    \n    if (ProxyWindow.isProxyWindow(source)) {\n        proxyWindowMethods.set(id, { val, name, domain, source });\n    } else {\n        proxyWindowMethods.del(id);\n        // $FlowFixMe\n        const methods = methodStore.getOrSet(source, () => ({}));\n        methods[id] = { domain, name, val, source };\n    }\n}\n\nfunction lookupMethod(source : CrossDomainWindowType, id : string) : ?StoredMethod {\n    const methodStore = windowStore('methodStore');\n    const proxyWindowMethods = globalStore('proxyWindowMethods');\n    const methods = methodStore.getOrSet(source, () => ({}));\n    return methods[id] || proxyWindowMethods.get(id);\n}\n\nfunction listenForFunctionCalls({ on } : { on : OnType }) : CancelableType {\n    return globalStore('builtinListeners').getOrSet('functionCalls', () => {\n        return on(MESSAGE_NAME.METHOD, { domain: WILDCARD }, ({ source, origin, data } : { source : CrossDomainWindowType, origin : string, data : Object }) => {\n            const { id, name } = data;\n\n            const meth = lookupMethod(source, id);\n    \n            if (!meth) {\n                throw new Error(`Could not find method '${ data.name }' with id: ${ data.id } in ${ getDomain(window) }`);\n            }\n\n            const { source: methodSource, domain, val } = meth;\n            \n            return ZalgoPromise.try(() => {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Method '${ data.name }' domain ${ JSON.stringify(isRegex(meth.domain) ? meth.domain.source : meth.domain) } does not match origin ${ origin } in ${ getDomain(window) }`);\n                }\n                \n                if (ProxyWindow.isProxyWindow(methodSource)) {\n                    // $FlowFixMe\n                    return methodSource.matchWindow(source).then(match => {\n                        if (!match) {\n                            throw new Error(`Method call '${ data.name }' failed - proxy window does not match source in ${ getDomain(window) }`);\n                        }\n                    });\n                }\n            }).then(() => {\n                return val.apply({ source, origin }, data.args);\n            }, err => {\n                return ZalgoPromise.try(() => {\n                    if (val.onError) {\n                        return val.onError(err);\n                    }\n                }).then(() => {\n                    throw err;\n                });\n            }).then(result => {\n                return { result, id, name };\n            });\n        });\n    });\n}\n\nexport type SerializedFunction = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, {\n    id : string,\n    name : string\n}>;\n\nexport function serializeFunction<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : () => ZalgoPromise<T> | T, key : string, { on } : { on : OnType }) : SerializedFunction {\n    listenForFunctionCalls({ on });\n    \n    const id = val.__id__ || uniqueID();\n    destination = ProxyWindow.unwrap(destination);\n    const name = val.__name__ || val.name || key;\n\n    if (ProxyWindow.isProxyWindow(destination)) {\n        addMethod(id, val, name, destination, domain);\n\n        // $FlowFixMe\n        destination.awaitWindow().then(win => {\n            addMethod(id, val, name, win, domain);\n        });\n    } else {\n        addMethod(id, val, name, destination, domain);\n    }\n\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION, { id, name });\n}\n\nexport function deserializeFunction<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { id, name } : { id : string, name : string }, { send } : { send : SendType }) : (...args : $ReadOnlyArray<mixed>) => ZalgoPromise<T> {\n    const getDeserializedFunction = (opts? : Object = {}) => {\n        function crossDomainFunctionWrapper<X : mixed>() : ZalgoPromise<X> {\n            let originalStack;\n    \n            if (__DEBUG__) {\n                originalStack = (new Error(`Original call to ${ name }():`)).stack;\n            }\n    \n            return ProxyWindow.toProxyWindow(source, { send }).awaitWindow().then(win => {\n                const meth = lookupMethod(win, id);\n    \n                if (meth && meth.val !== crossDomainFunctionWrapper) {\n                    return meth.val.apply({ source: window, origin: getDomain() }, arguments);\n                } else {\n                    return send(win, MESSAGE_NAME.METHOD, { id, name, args: Array.prototype.slice.call(arguments) }, { domain: origin, fireAndForget: opts.fireAndForget })\n                        .then(res => {\n                            if (!opts.fireAndForget) {\n                                return res.data.result;\n                            }\n                        });\n                }\n    \n            }).catch(err => {\n                // $FlowFixMe\n                if (__DEBUG__ && originalStack && err.stack) {\n                    // $FlowFixMe\n                    err.stack = `${ err.stack }\\n\\n${ originalStack }`;\n                }\n                throw err;\n            });\n        }\n\n        crossDomainFunctionWrapper.__name__ = name;\n        crossDomainFunctionWrapper.__origin__ = origin;\n        crossDomainFunctionWrapper.__source__ = source;\n        crossDomainFunctionWrapper.__id__ = id;\n\n        crossDomainFunctionWrapper.origin = origin;\n\n        return crossDomainFunctionWrapper;\n    };\n\n    const crossDomainFunctionWrapper = getDeserializedFunction();\n    crossDomainFunctionWrapper.fireAndForget = getDeserializedFunction({ fireAndForget: true });\n\n    return crossDomainFunctionWrapper;\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, isWindow, type DomainMatcher } from 'cross-domain-utils/src';\nimport { TYPE, serialize, deserialize, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, deserializeFunction, type SerializedFunction } from './function';\nimport { serializePromise, deserializePromise, type SerializedPromise } from './promise';\nimport { serializeWindow, deserializeWindow, type SerializedWindow, ProxyWindow } from './window';\n\nexport function serializeMessage<T : mixed>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T, { on, send } : { on : OnType, send : SendType }) : string {\n    return serialize(obj, {\n        [ TYPE.PROMISE ]:  (val : Thenable, key : string) : SerializedPromise => serializePromise(destination, domain, val, key, { on, send }),\n        [ TYPE.FUNCTION ]: (val : Function, key : string) : SerializedFunction => serializeFunction(destination, domain, val, key, { on, send }),\n        [ TYPE.OBJECT ]:   (val : CrossDomainWindowType) : Object | SerializedWindow => {\n            return (isWindow(val) || ProxyWindow.isProxyWindow(val)) ? serializeWindow(destination, domain, val, { on, send }) : val;\n        }\n    });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string, { on, send } : { on : OnType, send : SendType }) : T {\n    return deserialize(message, {\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE ]: (serializedPromise)  => deserializePromise(source, origin, serializedPromise),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_FUNCTION ]:      (serializedFunction) => deserializeFunction(source, origin, serializedFunction, { on, send }),\n        [ SERIALIZATION_TYPE.CROSS_DOMAIN_WINDOW ]:        (serializedWindow)   => deserializeWindow(source, origin, serializedWindow, { on, send })\n    });\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { serializeType, type CustomSerializedType, type Thenable } from 'universal-serialize/src';\n\nimport { SERIALIZATION_TYPE } from '../conf';\nimport type { OnType, SendType } from '../types';\n\nimport { serializeFunction, type SerializedFunction } from './function';\nimport { ProxyWindow } from './window';\n\nexport type SerializedPromise = CustomSerializedType<typeof SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n    then : SerializedFunction\n}>;\n\nexport function serializePromise(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, val : Thenable, key : string, { on, send } : { on : OnType, send : SendType }) : SerializedPromise {\n    return serializeType(SERIALIZATION_TYPE.CROSS_DOMAIN_ZALGO_PROMISE, {\n        then: serializeFunction(destination, domain, (resolve, reject) => val.then(resolve, reject), key, { on, send })\n    });\n}\n\nexport function deserializePromise<T>(source : CrossDomainWindowType | ProxyWindow, origin : string, { then } : { then : Function }) : ZalgoPromise<T> {\n    return new ZalgoPromise(then);\n}\n","/* @flow */\n\nimport { isSameDomain, isSameTopWindow, isActuallySameDomain, getActualDomain,\n    getDomain, type CrossDomainWindowType, type DomainMatcher, PROTOCOL } from 'cross-domain-utils/src';\n\nimport { SEND_STRATEGY, WILDCARD } from '../../conf';\nimport { needsGlobalMessagingForBrowser } from '../../lib';\nimport { getGlobal } from '../../global';\nimport { sendBridgeMessage, needsBridgeForBrowser, isBridge } from '../../bridge';\n\nexport const SEND_MESSAGE_STRATEGIES = {};\n\nSEND_MESSAGE_STRATEGIES[SEND_STRATEGY.POST_MESSAGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : DomainMatcher) => {\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(window, win) === false) {\n            return;\n        }\n    }\n\n    let domains;\n\n    if (Array.isArray(domain)) {\n        domains = domain;\n    } else if (typeof domain === 'string') {\n        domains = [ domain ];\n    } else {\n        domains = [ WILDCARD ];\n    }\n\n    domains = domains.map(dom => {\n\n        if (dom.indexOf(PROTOCOL.MOCK) === 0) {\n\n            if (window.location.protocol === PROTOCOL.FILE) {\n                return WILDCARD;\n            }\n\n            if (!isActuallySameDomain(win)) {\n                throw new Error(`Attempting to send messsage to mock domain ${ dom }, but window is actually cross-domain`);\n            }\n\n            // $FlowFixMe\n            return getActualDomain(win);\n        }\n\n        if (dom.indexOf(PROTOCOL.FILE) === 0) {\n            return WILDCARD;\n        }\n\n        return dom;\n    });\n\n    domains.forEach(dom => {\n        win.postMessage(serializedMessage, dom);\n    });\n};\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n\n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.BRIDGE] = (win : CrossDomainWindowType, serializedMessage : string, domain : string) => {\n\n        if (!needsBridgeForBrowser() && !isBridge()) {\n            return;\n        }\n\n        if (isSameDomain(win)) {\n            throw new Error(`Post message through bridge disabled between same domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use bridge to communicate between two different windows, not between frames`);\n        }\n\n        sendBridgeMessage(win, domain, serializedMessage);\n    };\n}\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__ || __POST_ROBOT__.__GLOBAL_MESSAGE_SUPPORT__) {\n    \n    SEND_MESSAGE_STRATEGIES[SEND_STRATEGY.GLOBAL] = (win : CrossDomainWindowType, serializedMessage : string) => {\n\n        if (!needsGlobalMessagingForBrowser()) {\n            return;\n        }\n\n        if (!isSameDomain(win)) {\n            throw new Error(`Post message through global disabled between different domain windows`);\n        }\n\n        if (isSameTopWindow(window, win) !== false) {\n            throw new Error(`Can only use global to communicate between two different windows, not between frames`);\n        }\n\n        // $FlowFixMe\n        const foreignGlobal = getGlobal(win);\n\n        if (!foreignGlobal) {\n            throw new Error(`Can not find postRobot global on foreign window`);\n        }\n\n        foreignGlobal.receiveMessage({\n            source: window,\n            origin: getDomain(),\n            data:   serializedMessage\n        });\n    };\n}\n","/* @flow */\n\nimport { getUserAgent } from 'cross-domain-utils/src';\n\nexport function needsGlobalMessagingForBrowser() : boolean {\n\n    if (getUserAgent(window).match(/MSIE|rv:11|trident|edge\\/12|edge\\/13/i)) {\n        return true;\n    }\n\n    return false;\n}\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { uniqueID } from 'belter/src';\n\nimport { serializeMessage } from '../../serialize';\nimport type { Message } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nimport { SEND_MESSAGE_STRATEGIES } from './strategies';\n\nexport function sendMessage(win : CrossDomainWindowType, domain : DomainMatcher, message : Message, { on, send } : { on : OnType, send : SendType }) {\n    if (isWindowClosed(win)) {\n        throw new Error('Window is closed');\n    }\n    \n    const serializedMessage = serializeMessage(win, domain, {\n        [ __POST_ROBOT__.__GLOBAL_KEY__ ]: {\n            id: uniqueID(),\n            ...message\n        }\n    }, { on, send });\n\n    let success = false;\n    let error;\n\n    for (const strategyName of Object.keys(SEND_MESSAGE_STRATEGIES)) {\n        try {\n            SEND_MESSAGE_STRATEGIES[strategyName](win, serializedMessage, domain);\n            success = true;\n        } catch (err) {\n            error = error || err;\n        }\n    }\n\n    if (!success) {\n        throw error;\n    }\n}\n","/* @flow */\n\nimport { type ZalgoPromise } from 'zalgo-promise/src';\nimport { matchDomain, type CrossDomainWindowType, type DomainMatcher } from 'cross-domain-utils/src';\nimport { isRegex, getOrSet } from 'belter/src';\n\nimport { getWildcard, type WildCard, globalStore, windowStore } from '../global';\nimport { WILDCARD } from '../conf';\n\nexport function resetListeners() {\n    const responseListeners = globalStore('responseListeners');\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    responseListeners.reset();\n    erroredResponseListeners.reset();\n}\n\nconst __DOMAIN_REGEX__ = '__domain_regex__';\n\nexport type RequestListenerType = {|\n    handler : ({ source : CrossDomainWindowType, origin : string, data : mixed }) => (mixed | ZalgoPromise<mixed>),\n    handleError : (err : mixed) => void,\n    window : ?CrossDomainWindowType,\n    name : string,\n    domain : DomainMatcher\n|};\n\nexport type ResponseListenerType = {|\n    name : string,\n    win : CrossDomainWindowType,\n    domain : DomainMatcher,\n    promise : ZalgoPromise<*>,\n    ack? : ?boolean\n|};\n\nexport function addResponseListener(hash : string, listener : ResponseListenerType) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.set(hash, listener);\n}\n\nexport function getResponseListener(hash : string) : ?ResponseListenerType {\n    const responseListeners = globalStore('responseListeners');\n    return responseListeners.get(hash);\n}\n\nexport function deleteResponseListener(hash : string) {\n    const responseListeners = globalStore('responseListeners');\n    responseListeners.del(hash);\n}\n\nexport function markResponseListenerErrored(hash : string) {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    erroredResponseListeners.set(hash, true);\n}\n\nexport function isResponseListenerErrored(hash : string) : boolean {\n    const erroredResponseListeners = globalStore('erroredResponseListeners');\n    return erroredResponseListeners.has(hash);\n}\n\nexport function getRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?(string | RegExp) }) : ?RequestListenerType {\n    const requestListeners = windowStore('requestListeners');\n\n    if (win === WILDCARD) {\n        win = null;\n    }\n\n    if (domain === WILDCARD) {\n        domain = null;\n    }\n\n    if (!name) {\n        throw new Error(`Name required to get request listener`);\n    }\n\n    for (const winQualifier of [ win, getWildcard() ]) {\n        if (!winQualifier) {\n            continue;\n        }\n\n        const nameListeners = requestListeners.get(winQualifier);\n\n        if (!nameListeners) {\n            continue;\n        }\n\n        const domainListeners = nameListeners[name];\n\n        if (!domainListeners) {\n            continue;\n        }\n\n        if (domain && typeof domain === 'string') {\n            if (domainListeners[domain]) {\n                return domainListeners[domain];\n            }\n\n            if (domainListeners[__DOMAIN_REGEX__]) {\n                for (const { regex, listener } of domainListeners[__DOMAIN_REGEX__]) {\n                    if (matchDomain(regex, domain)) {\n                        return listener;\n                    }\n                }\n            }\n        }\n\n        if (domainListeners[WILDCARD]) {\n            return domainListeners[WILDCARD];\n        }\n    }\n}\n\nexport function addRequestListener({ name, win, domain } : { name : string, win : ?(CrossDomainWindowType | WildCard), domain : ?DomainMatcher }, listener : RequestListenerType) : { cancel : () => void } {\n    const requestListeners = windowStore('requestListeners');\n\n    if (!name || typeof name !== 'string') {\n        throw new Error(`Name required to add request listener`);\n    }\n\n    if (Array.isArray(win)) {\n        const listenersCollection = [];\n\n        for (const item of win) {\n            listenersCollection.push(addRequestListener({ name, domain, win: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    if (Array.isArray(domain)) {\n        const listenersCollection = [];\n\n        for (const item of domain) {\n            listenersCollection.push(addRequestListener({ name, win, domain: item }, listener));\n        }\n\n        return {\n            cancel() {\n                for (const cancelListener of listenersCollection) {\n                    cancelListener.cancel();\n                }\n            }\n        };\n    }\n\n    const existingListener = getRequestListener({ name, win, domain });\n\n    if (!win || win === WILDCARD) {\n        win = getWildcard();\n    }\n\n    domain = domain || WILDCARD;\n\n    if (existingListener) {\n        if (win && domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (win) {\n            throw new Error(`Request listener already exists for ${ name } for ${ win === getWildcard() ? 'wildcard' : 'specified' } window`);\n        } else if (domain) {\n            throw new Error(`Request listener already exists for ${ name } on domain ${ domain.toString() }`);\n        } else {\n            throw new Error(`Request listener already exists for ${ name }`);\n        }\n    }\n\n    const nameListeners = requestListeners.getOrSet(win, () => ({}));\n    // $FlowFixMe\n    const domainListeners = getOrSet(nameListeners, name, () => ({}));\n\n    const strDomain = domain.toString();\n\n    let regexListeners;\n    let regexListener;\n\n    if (isRegex(domain)) {\n        regexListeners = getOrSet(domainListeners, __DOMAIN_REGEX__, () => []);\n        regexListener = { regex: domain, listener };\n        regexListeners.push(regexListener);\n    } else {\n        domainListeners[strDomain] = listener;\n    }\n\n    return {\n        cancel() {\n            delete domainListeners[strDomain];\n\n            if (regexListener) {\n                regexListeners.splice(regexListeners.indexOf(regexListener, 1));\n\n                if (!regexListeners.length) {\n                    delete domainListeners[__DOMAIN_REGEX__];\n                }\n            }\n\n            if (!Object.keys(domainListeners).length) {\n                // $FlowFixMe\n                delete nameListeners[name];\n            }\n\n            // $FlowFixMe\n            if (win && !Object.keys(nameListeners).length) {\n                requestListeners.del(win);\n            }\n        }\n    };\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindowClosed, matchDomain, stringifyDomainPattern, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { MESSAGE_TYPE, MESSAGE_ACK, MESSAGE_NAME } from '../../conf';\nimport { sendMessage } from '../send';\nimport { getRequestListener, getResponseListener, deleteResponseListener, isResponseListenerErrored } from '../listeners';\nimport type { RequestMessage, AckResponseMessage, SuccessResponseMessage, ErrorResponseMessage } from '../types';\nimport type { OnType, SendType } from '../../types';\n\nexport const RECEIVE_MESSAGE_TYPES = {\n\n    [ MESSAGE_TYPE.REQUEST ](source : CrossDomainWindowType, origin : string, message : RequestMessage, { on, send } : { on : OnType, send : SendType }) : ZalgoPromise<void> {\n\n        const options = getRequestListener({ name: message.name, win: source, domain: origin });\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (__DEBUG__) {\n            // eslint-disable-next-line no-console\n            console.info('receive::req', logName, origin, '\\n\\n', message.data);\n        }\n\n        function sendResponse(type : $Values<typeof MESSAGE_TYPE>, ack? : $Values<typeof MESSAGE_ACK>, response = {}) {\n\n            if (message.fireAndForget || isWindowClosed(source)) {\n                return;\n            }\n\n            if (__DEBUG__ && type !== MESSAGE_TYPE.ACK) {\n                if (ack === MESSAGE_ACK.SUCCESS) {\n                    // $FlowFixMe\n                    console.info('respond::res', logName, origin, '\\n\\n', response.data);  // eslint-disable-line no-console\n                } else if (ack === MESSAGE_ACK.ERROR) {\n                    // $FlowFixMe\n                    console.error('respond::err', logName, origin, '\\n\\n', response.error); // eslint-disable-line no-console\n                }\n            }\n\n            // $FlowFixMe\n            sendMessage(source, origin, {\n                type,\n                ack,\n                hash:   message.hash,\n                name:   message.name,\n                ...response\n            }, { on, send });\n        }\n\n        return ZalgoPromise.all([\n\n            sendResponse(MESSAGE_TYPE.ACK),\n\n            ZalgoPromise.try(() => {\n\n                if (!options) {\n                    throw new Error(`No handler found for post message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n                }\n\n                if (!matchDomain(options.domain, origin)) {\n                    throw new Error(`Request origin ${ origin } does not match domain ${ options.domain.toString() }`);\n                }\n\n                const data = message.data;\n\n                return options.handler({ source, origin, data });\n\n            }).then(data => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.SUCCESS, { data });\n\n            }, error => {\n                return sendResponse(MESSAGE_TYPE.RESPONSE, MESSAGE_ACK.ERROR, { error });\n            })\n\n        ]).then(noop).catch(err => {\n            if (options && options.handleError) {\n                return options.handleError(err);\n            } else {\n                throw err;\n            }\n        });\n    },\n\n    [ MESSAGE_TYPE.ACK ](source : CrossDomainWindowType, origin : string, message : AckResponseMessage) {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message ack for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Ack origin ${ origin } does not match domain ${ options.domain.toString() }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Ack source does not match registered window`);\n        }\n\n        options.ack = true;\n    },\n\n    [ MESSAGE_TYPE.RESPONSE ](source : CrossDomainWindowType, origin : string, message : SuccessResponseMessage | ErrorResponseMessage) : void | ZalgoPromise<void> {\n\n        if (isResponseListenerErrored(message.hash)) {\n            return;\n        }\n\n        const options = getResponseListener(message.hash);\n\n        if (!options) {\n            throw new Error(`No handler found for post message response for message: ${ message.name } from ${ origin } in ${ window.location.protocol }//${ window.location.host }${ window.location.pathname }`);\n        }\n\n        if (!matchDomain(options.domain, origin)) {\n            throw new Error(`Response origin ${ origin } does not match domain ${ stringifyDomainPattern(options.domain) }`);\n        }\n\n        if (source !== options.win) {\n            throw new Error(`Response source does not match registered window`);\n        }\n\n        deleteResponseListener(message.hash);\n\n        const logName = (message.name === MESSAGE_NAME.METHOD && message.data && typeof message.data.name === 'string') ? `${ message.data.name }()` : message.name;\n\n        if (message.ack === MESSAGE_ACK.ERROR) {\n            if (__DEBUG__) {\n                console.error('receive::err', logName, origin, '\\n\\n', message.error); // eslint-disable-line no-console\n            }\n\n            options.promise.reject(message.error);\n\n        } else if (message.ack === MESSAGE_ACK.SUCCESS) {\n            if (__DEBUG__) {\n                console.info('receive::res', logName, origin, '\\n\\n', message.data); // eslint-disable-line no-console\n            }\n\n            options.promise.resolve({ source, origin, data: message.data });\n        }\n    }\n};\n","/* @flow */\n\nimport { isWindowClosed, type CrossDomainWindowType, getDomain, isSameTopWindow } from 'cross-domain-utils/src';\nimport { addEventListener, noop } from 'belter/src';\n\nimport { markWindowKnown, needsGlobalMessagingForBrowser } from '../../lib';\nimport { deserializeMessage } from '../../serialize';\nimport { getGlobal, globalStore } from '../../global';\nimport type { OnType, SendType, MessageEvent, CancelableType } from '../../types';\n\nimport { RECEIVE_MESSAGE_TYPES } from './types';\n\nfunction parseMessage(message : string, source : CrossDomainWindowType, origin : string, { on, send } : { on : OnType, send : SendType }) : ?Object {\n\n    let parsedMessage;\n\n    try {\n        parsedMessage = deserializeMessage(source, origin, message, { on, send });\n    } catch (err) {\n        return;\n    }\n\n    if (!parsedMessage) {\n        return;\n    }\n\n    if (typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    parsedMessage = parsedMessage[__POST_ROBOT__.__GLOBAL_KEY__];\n\n    if (!parsedMessage || typeof parsedMessage !== 'object' || parsedMessage === null) {\n        return;\n    }\n\n    if (!parsedMessage.type || typeof parsedMessage.type !== 'string') {\n        return;\n    }\n\n    if (!RECEIVE_MESSAGE_TYPES[parsedMessage.type]) {\n        return;\n    }\n\n    return parsedMessage;\n}\n\nexport function receiveMessage(event : MessageEvent, { on, send } : { on : OnType, send : SendType }) {\n    const receivedMessages = globalStore('receivedMessages');\n\n    if (!window || window.closed) {\n        throw new Error(`Message recieved in closed window`);\n    }\n\n    try {\n        if (!event.source) {\n            return;\n        }\n    } catch (err) {\n        return;\n    }\n\n    let { source, origin, data } = event;\n\n    if (__TEST__) {\n        // $FlowFixMe\n        origin = getDomain(source);\n    }\n\n    const message = parseMessage(data, source, origin, { on, send });\n\n    if (!message) {\n        return;\n    }\n\n    markWindowKnown(source);\n\n    if (receivedMessages.has(message.id)) {\n        return;\n    }\n\n    receivedMessages.set(message.id, true);\n\n    if (isWindowClosed(source) && !message.fireAndForget) {\n        return;\n    }\n\n    RECEIVE_MESSAGE_TYPES[message.type](source, origin, message, { on, send });\n}\n\nexport function setupGlobalReceiveMessage({ on, send } : { on : OnType, send : SendType }) {\n    const global = getGlobal();\n    global.receiveMessage = global.receiveMessage || (message => receiveMessage(message, { on, send }));\n}\n\ntype ListenerEvent = {|\n    source : CrossDomainWindowType,\n    origin : string,\n    data : string,\n    sourceElement : CrossDomainWindowType,\n    originalEvent? : { origin : string }\n|};\n\nexport function messageListener(event : ListenerEvent, { on, send } : { on : OnType, send : SendType }) {\n\n    try {\n        noop(event.source);\n    } catch (err) {\n        return;\n    }\n\n    // $FlowFixMe\n    const messageEvent : MessageEvent = {\n        source: event.source || event.sourceElement,\n        origin: event.origin || (event.originalEvent && event.originalEvent.origin),\n        data:   event.data\n    };\n\n    if (!messageEvent.source) {\n        return;\n    }\n\n    if (!messageEvent.origin) {\n        throw new Error(`Post message did not have origin domain`);\n    }\n\n    if (__TEST__) {\n        if (needsGlobalMessagingForBrowser() && isSameTopWindow(messageEvent.source, window) === false) {\n            return;\n        }\n    }\n\n    receiveMessage(messageEvent, { on, send });\n}\n\nexport function listenForMessages({ on, send } : { on : OnType, send : SendType }) : CancelableType {\n    return globalStore().getOrSet('postMessageListeners', () => {\n        // $FlowFixMe\n        return addEventListener(window, 'message', event => {\n            // $FlowFixMe\n            messageListener(event, { on, send });\n        });\n    });\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\n\nimport { addRequestListener, type RequestListenerType } from '../drivers';\nimport { WILDCARD } from '../conf';\nimport type { ServerOptionsType, HandlerType, CancelableType } from '../types';\n\nexport function on(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : CancelableType {\n\n    if (!name) {\n        throw new Error('Expected name');\n    }\n\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    if (!handler) {\n        throw new Error('Expected handler');\n    }\n\n    options = options || {};\n    options.name = name;\n    options.handler = handler || options.handler;\n\n    const win = options.window;\n    const domain = options.domain;\n\n    const listenerOptions : RequestListenerType = {\n        handler:     options.handler,\n        handleError: options.errorHandler || (err => {\n            throw err;\n        }),\n        window: win,\n        domain: domain || WILDCARD,\n        name\n    };\n\n    const requestListener = addRequestListener({ name, win, domain }, listenerOptions);\n\n    return {\n        cancel() {\n            requestListener.cancel();\n        }\n    };\n}\n\nexport function once(name : string, options : ServerOptionsType | HandlerType, handler : ?HandlerType) : ZalgoPromise<{ source : mixed, origin : string, data : Object }> {\n    \n    // $FlowFixMe\n    options = options || {};\n    if (typeof options === 'function') {\n        handler = options;\n        // $FlowFixMe\n        options = {};\n    }\n\n    const promise = new ZalgoPromise();\n    let listener; // eslint-disable-line prefer-const\n\n    options.errorHandler = (err) => {\n        listener.cancel();\n        promise.reject(err);\n    };\n\n    listener = on(name, options, event => {\n        listener.cancel();\n        promise.resolve(event);\n        if (handler) {\n            return handler(event);\n        }\n    });\n\n    promise.cancel = listener.cancel;\n    return promise;\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isAncestor, isWindowClosed, getDomain, matchDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { uniqueID, isRegex, noop } from 'belter/src';\n\n\nimport { CHILD_WINDOW_TIMEOUT, MESSAGE_TYPE, WILDCARD, MESSAGE_NAME, ACK_TIMEOUT, RES_TIMEOUT, ACK_TIMEOUT_KNOWN } from '../conf';\nimport { sendMessage, addResponseListener, deleteResponseListener, markResponseListenerErrored, type ResponseListenerType } from '../drivers';\nimport { awaitWindowHello, sayHello, isWindowKnown } from '../lib';\nimport { windowStore } from '../global';\nimport type { RequestOptionsType, ResponseMessageEvent } from '../types';\n\nimport { on } from './on';\n\nexport function send(win : CrossDomainWindowType, name : string, data : ?Object, options? : RequestOptionsType) : ZalgoPromise<ResponseMessageEvent> {\n    \n    // $FlowFixMe\n    options = options || {};\n    let domain = options.domain || WILDCARD;\n    const responseTimeout = options.timeout || RES_TIMEOUT;\n    const childTimeout = options.timeout || CHILD_WINDOW_TIMEOUT;\n    const fireAndForget = options.fireAndForget || false;\n\n    const prom = ZalgoPromise.try(() => {\n        if (!name) {\n            throw new Error('Expected name');\n        }\n\n        if (domain) {\n            if (typeof domain !== 'string' && !Array.isArray(domain) && !isRegex(domain)) {\n                throw new TypeError(`Expected domain to be a string, array, or regex`);\n            }\n        }\n\n        if (isWindowClosed(win)) {\n            throw new Error('Target window is closed');\n        }\n\n        const reqPromises = windowStore('requestPromises').getOrSet(win, () => []);\n\n        // $FlowFixMe\n        const requestPromise = ZalgoPromise.try(() => {\n\n            if (isAncestor(window, win)) {\n                return awaitWindowHello(win, childTimeout);\n            } else if (isRegex(domain)) {\n                return sayHello(win, { send });\n            }\n\n        // $FlowFixMe\n        }).then(({ domain: origin } = {}) => {\n\n            if (isRegex(domain)) {\n                if (!matchDomain(domain, origin)) {\n                    // $FlowFixMe\n                    throw new Error(`Remote window domain ${ origin } does not match regex: ${ domain.source }`);\n                }\n                domain = origin;\n            }\n\n            const logName = (name === MESSAGE_NAME.METHOD && data && typeof data.name === 'string') ? `${ data.name }()` : name;\n\n            if (__DEBUG__) {\n                console.info('send::req', logName, domain, '\\n\\n', data); // eslint-disable-line no-console\n            }\n\n            let hasResult = false;\n\n            const promise = new ZalgoPromise();\n            promise.finally(() => {\n                hasResult = true;\n                reqPromises.splice(reqPromises.indexOf(requestPromise, 1));\n            }).catch(noop);\n\n            const hash = `${ name }_${ uniqueID() }`;\n\n            sendMessage(win, domain, {\n                type: MESSAGE_TYPE.REQUEST,\n                hash,\n                name,\n                data,\n                fireAndForget\n            }, { on, send });\n\n            if (fireAndForget) {\n                return promise.resolve();\n            }\n\n            promise.catch(() => {\n                markResponseListenerErrored(hash);\n                deleteResponseListener(hash);\n            });\n\n            const responseListener : ResponseListenerType = {\n                name,\n                win,\n                domain,\n                promise\n            };\n\n            addResponseListener(hash, responseListener);\n\n            const totalAckTimeout = isWindowKnown(win) ? ACK_TIMEOUT_KNOWN : ACK_TIMEOUT;\n            const totalResTimeout = responseTimeout;\n\n            let ackTimeout = totalAckTimeout;\n            let resTimeout = totalResTimeout;\n\n            let cycleTime = 100;\n\n            const cycle = () => {\n                if (hasResult) {\n                    return;\n                }\n\n                if (isWindowClosed(win)) {\n                    if (!responseListener.ack) {\n                        return promise.reject(new Error(`Window closed for ${ name } before ack`));\n                    } else {\n                        return promise.reject(new Error(`Window closed for ${ name } before response`));\n                    }\n                }\n\n                ackTimeout = Math.max(ackTimeout - cycleTime, 0);\n                if (resTimeout !== -1) {\n                    resTimeout = Math.max(resTimeout - cycleTime, 0);\n                }\n\n                const hasAck = responseListener.ack;\n\n                if (hasAck) {\n                    if (resTimeout === -1) {\n                        return;\n                    }\n\n                    cycleTime = Math.min(resTimeout, 2000);\n\n                } else if (ackTimeout === 0) {\n                    return promise.reject(new Error(`No ack for postMessage ${ name } in ${ getDomain() } in ${ totalAckTimeout }ms`));\n\n                } else if (resTimeout === 0) {\n                    return promise.reject(new Error(`No response for postMessage ${ name } in ${ getDomain() } in ${ totalResTimeout }ms`));\n                }\n\n                setTimeout(cycle, cycleTime);\n            };\n\n            setTimeout(cycle, cycleTime);\n\n            return promise;\n        });\n\n        reqPromises.push(requestPromise);\n        return requestPromise;\n    });\n\n    return prom;\n}\n","/* @flow */\n\nimport type { CrossDomainWindowType, DomainMatcher } from 'cross-domain-utils/src';\n\nimport { initHello } from './lib';\nimport { listenForMessages, receiveMessage, setupGlobalReceiveMessage } from './drivers';\nimport { getGlobal } from './global';\nimport { on, send } from './public';\nimport { setupBridge } from './bridge';\nimport { serializeMessage as internalSerializeMessage, deserializeMessage as internalDeserializeMessage, ProxyWindow } from './serialize';\n\nexport function serializeMessage<T>(destination : CrossDomainWindowType | ProxyWindow, domain : DomainMatcher, obj : T) : string {\n    return internalSerializeMessage(destination, domain, obj, { on, send });\n}\n\nexport function deserializeMessage<T : mixed>(source : CrossDomainWindowType | ProxyWindow, origin : string, message : string) : T {\n    return internalDeserializeMessage(source, origin, message, { on, send });\n}\n\nexport function toProxyWindow(win : CrossDomainWindowType | ProxyWindow) : ProxyWindow {\n    return ProxyWindow.toProxyWindow(win, { send });\n}\n\nexport function setup() {\n    if (!getGlobal().initialized) {\n        getGlobal().initialized = true;\n    \n        listenForMessages({ on, send });\n    \n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            setupBridge({ on, send, receiveMessage });\n        }\n\n        initHello({ on, send });\n        setupGlobalReceiveMessage({ on, send });\n    }\n}\n","/* @flow */\n\nimport { setup } from './setup';\nimport { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge, needsBridgeForBrowser, hasBridge,\n    needsBridgeForWin, needsBridgeForDomain, destroyBridges } from './bridge';\n\nexport { ZalgoPromise as Promise } from 'zalgo-promise/src';\n\nexport * from './types';\nexport { ProxyWindow } from './serialize';\nexport { setup, serializeMessage, deserializeMessage, toProxyWindow } from './setup';\nexport { on, once, send } from './public';\nexport { markWindowKnown } from './lib';\nexport { cleanUpWindow } from './clean';\nexport let bridge;\n\nif (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n    bridge = { setupBridge, openBridge, linkWindow, linkUrl, isBridge, needsBridge,\n        needsBridgeForBrowser, hasBridge, needsBridgeForWin, needsBridgeForDomain, destroyBridges };\n}\n\nif (__POST_ROBOT__.__AUTO_SETUP__) {\n    setup();\n}\n","/* @flow */\n\nimport { isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nexport function globalFor(win : CrossDomainWindowType) : Object {\n\n    if (!isSameDomain(win)) {\n        throw new Error(`Can not get global for window on different domain`);\n    }\n\n    if (!win[__ZOID__.__GLOBAL_KEY__]) {\n        win[__ZOID__.__GLOBAL_KEY__] = {};\n    }\n\n    return win[__ZOID__.__GLOBAL_KEY__];\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { toCSS } from 'belter/src';\n\nexport type ProxyElement<T : HTMLElement> = {|\n    resize : ({ width : ?number, height : ?number }) => void,\n    getElement : () => ZalgoPromise<T>\n|};\n\nexport function getProxyElement<T : HTMLElement>(element : T) : ProxyElement<T> {\n    return {\n        resize({ width, height } : { width : ?number, height : ?number }) {\n            if (typeof width === 'number') {\n                element.style.width = toCSS(width);\n            }\n    \n            if (typeof height === 'number') {\n                element.style.height = toCSS(height);\n            }\n        },\n\n        getElement() : ZalgoPromise<T> {\n            return ZalgoPromise.try(() => {\n                if (this.source && this.source !== window) {\n                    throw new Error(`Can not call getElement from a remote window`);\n                }\n    \n                return element;\n            });\n        }\n    };\n}\n","/* @flow */\n\nimport { WINDOW_TYPE } from 'cross-domain-utils/src';\n\nexport const ZOID = `zoid`;\n\nexport const POST_MESSAGE = {\n    DELEGATE:       `${ ZOID }_delegate`,\n    ALLOW_DELEGATE: `${ ZOID }_allow_delegate`\n};\n\nexport const PROP_TYPE = {\n    STRING:   `string`,\n    OBJECT:   `object`,\n    FUNCTION: `function`,\n    BOOLEAN:  `boolean`,\n    NUMBER:   `number`,\n    ARRAY:    `array`\n};\n\nexport const INITIAL_PROPS = {\n    RAW: 'raw',\n    UID: 'uid'\n};\n\nexport const WINDOW_REFERENCES = {\n    OPENER: `opener`,\n    TOP:    `top`,\n    PARENT: `parent`,\n    GLOBAL: `global`\n};\n\nexport const PROP_SERIALIZATION = {\n    JSON:   ('json' : 'json'),\n    DOTIFY: ('dotify' : 'dotify'),\n    BASE64: ('base64' : 'base64')\n};\n\nexport const CONTEXT = WINDOW_TYPE;\n\nexport const WILDCARD = '*';\n\nexport const DEFAULT_DIMENSIONS = {\n    WIDTH:  '300px',\n    HEIGHT: '150px'\n};\n\nexport const EVENT = {\n    RENDER:   'zoid-render',\n    RENDERED: 'zoid-rendered',\n    DISPLAY:  'zoid-display',\n    ERROR:    'zoid-error',\n    CLOSE:    'zoid-close',\n    PROPS:    'zoid-props'\n};\n","/* @flow */\n\nimport { getDomain, isSameDomain, type CrossDomainWindowType } from 'cross-domain-utils/src';\n\nimport type { Component } from '../component';\nimport type { PropsType, MixedPropDefinitionType } from '../component/props';\n\nimport type { ChildHelpers } from './index';\n\nexport function normalizeChildProp<T, P>(component : Component<P>, props : (PropsType<P>), key : string, value : T, helpers : ChildHelpers<P>) : ?T  {\n\n    // $FlowFixMe\n    const prop : MixedPropDefinitionType<P> = component.getPropDefinition(key);\n\n    if (!prop) {\n        return value;\n    }\n\n    if (typeof prop.childDecorate === 'function') {\n        return prop.childDecorate({ value, ...helpers });\n    }\n\n    return value;\n}\n\n// eslint-disable-next-line max-params\nexport function normalizeChildProps<P>(parentComponentWindow : CrossDomainWindowType, component : Component<P>, props : (PropsType<P>), origin : string, helpers : ChildHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) {\n\n    const result = {};\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        const prop = component.getPropDefinition(key);\n\n        if (prop && prop.sameDomain && (origin !== getDomain(window) || !isSameDomain(parentComponentWindow))) {\n            continue;\n        }\n\n        const value = normalizeChildProp(component, props, key, props[key], helpers);\n\n        result[key] = value;\n        if (prop && prop.alias && !result[prop.alias]) {\n            result[prop.alias] = value;\n        }\n    }\n\n    if (!isUpdate) {\n        for (const key of component.getPropNames()) {\n            if (!props.hasOwnProperty(key)) {\n                result[key] = normalizeChildProp(component, props, key, props[key], helpers);\n            }\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n","/* @flow */\n\nimport { inlineMemoize, stringifyError, base64decode } from 'belter/src';\n\nimport { ZOID } from '../constants';\nimport type { ChildPayload } from '../parent';\n\nfunction parseChildWindowName(windowName : string) : ChildPayload {\n    return inlineMemoize(parseChildWindowName, () => {\n        if (!windowName) {\n            throw new Error(`No window name`);\n        }\n    \n        const [ , zoidcomp, name, encodedPayload ] = windowName.split('__');\n    \n        if (zoidcomp !== ZOID) {\n            throw new Error(`Window not rendered by zoid - got ${ zoidcomp }`);\n        }\n    \n        if (!name) {\n            throw new Error(`Expected component name`);\n        }\n    \n        if (!encodedPayload) {\n            throw new Error(`Expected encoded payload`);\n        }\n    \n        try {\n            return JSON.parse(base64decode(encodedPayload));\n        } catch (err) {\n            throw new Error(`Can not decode window name payload: ${ encodedPayload }: ${ stringifyError(err) }`);\n        }\n    }, [ windowName ]);\n}\n\nexport function getChildPayload() : ?ChildPayload {\n    try {\n        return parseChildWindowName(window.name);\n    } catch (err) {\n        // pass\n    }\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { isSameDomain, matchDomain, getDomain, getOpener,\n    getNthParentFromTop, getAncestor, getAllFramesInWindow,\n    type CrossDomainWindowType, onCloseWindow } from 'cross-domain-utils/src';\nimport { markWindowKnown, deserializeMessage } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { extend, waitForDocumentBody, onResize, getElementSafe, assertExists } from 'belter/src';\n\nimport { globalFor } from '../lib';\nimport { CONTEXT, INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component } from '../component';\nimport type { PropsType } from '../component/props';\nimport type { WindowRef, PropRef, ParentExportsType } from '../parent';\n\nimport { normalizeChildProps } from './props';\nimport { getChildPayload } from './window';\n\nexport * from './window';\n\nexport type ChildExportsType<P> = {|\n    updateProps : (props : (PropsType<P>)) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>\n|};\n\nexport type ChildHelpers<P> = {|\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    onProps : ((PropsType<P>) => void) => void\n|};\n\n/*  Child Component\n    ---------------\n\n    This is the portion of code which runs inside the frame or popup window containing the component's implementation.\n\n    When the component author calls myComponent.attach(), it creates a new instance of ChildComponent, which is then\n    responsible for managing the state and messaging back up to the parent, and providing props for the component to\n    utilize.\n*/\n\nexport class ChildComponent<P> {\n\n    component : Component<P>\n    props : PropsType<P>\n    context : string\n    parent : ParentExportsType<P>\n    parentComponentWindow : CrossDomainWindowType\n\n    onPropHandlers : Array<(PropsType<P>) => void> // eslint-disable-line flowtype/no-mutable-array\n    autoResize : { width : boolean, height : boolean, element? : string }\n\n    constructor(component : Component<P>) {\n        ZalgoPromise.try(() => {\n            this.component = component;\n            this.onPropHandlers = [];\n            \n            const childPayload = getChildPayload();\n\n            if (!childPayload) {\n                throw new Error(`No child payload found`);\n            }\n\n            const { parent, domain, exports, context, props } = childPayload;\n\n            this.context = context;\n            this.parentComponentWindow = this.getParentComponentWindow(parent);\n            this.parent = deserializeMessage(this.parentComponentWindow, domain, exports);\n\n            this.checkParentDomain(domain);\n\n            const initialProps = this.getPropsByRef(this.parentComponentWindow, domain, props);\n            this.setProps(initialProps, domain);\n            markWindowKnown(this.parentComponentWindow);\n            \n            this.watchForClose();\n\n            return this.parent.init(this.buildExports());\n\n        }).then(() => {\n            return this.watchForResize();\n\n        }).catch(err => {\n            this.onError(err);\n        });\n    }\n\n    getHelpers() : ChildHelpers<P> {\n        return {\n            focus:         () => this.focus(),\n            close:         () => this.close(),\n            resize:        ({ width, height }) => this.resize({ width, height }),\n            onError:       (err) => this.onError(err),\n            onProps: (handler) => this.onProps(handler)\n        };\n    }\n\n    checkParentDomain(domain : string) {\n        if (!matchDomain(this.component.allowedParentDomains, domain)) {\n            throw new Error(`Can not be rendered by domain: ${ domain }`);\n        }\n    }\n\n    onProps(handler : Function) {\n        this.onPropHandlers.push(handler);\n    }\n\n    getPropsByRef(parentComponentWindow : CrossDomainWindowType, domain : string, { type, value, uid } : PropRef) : (PropsType<P>) {\n        let props;\n\n        if (type === INITIAL_PROPS.RAW) {\n            props = value;\n        } else if (type === INITIAL_PROPS.UID) {\n            if (!isSameDomain(parentComponentWindow)) {\n                throw new Error(`Parent component window is on a different domain - expected ${ getDomain() } - can not retrieve props`);\n            }\n\n            const global = globalFor(parentComponentWindow);\n            props = assertExists('props', global && global.props[uid]);\n        }\n\n        if (!props) {\n            throw new Error(`Could not find props`);\n        }\n\n        return deserializeMessage(parentComponentWindow, domain, props);\n    }\n\n    getParentComponentWindow(ref : WindowRef) : CrossDomainWindowType {\n        const { type } = ref;\n    \n        if (type === WINDOW_REFERENCES.OPENER) {\n            return assertExists('opener', getOpener(window));\n    \n        } else if (type === WINDOW_REFERENCES.PARENT) {\n            // $FlowFixMe\n            const distance = ref.distance;\n            return assertExists('parent', getNthParentFromTop(window, distance));\n\n        } else if (type === WINDOW_REFERENCES.GLOBAL) {\n            // $FlowFixMe\n            const { uid } = ref;\n            const ancestor = getAncestor(window);\n\n            if (!ancestor) {\n                throw new Error(`Can not find ancestor window`);\n            }\n\n            for (const frame of getAllFramesInWindow(ancestor)) {\n                if (isSameDomain(frame)) {\n                    const global = globalFor(frame);\n\n                    if (global && global.windows && global.windows[uid]) {\n                        return global.windows[uid];\n                    }\n                }\n            }\n        }\n    \n        throw new Error(`Unable to find ${ type } parent component window`);\n    }\n\n    getProps() : PropsType<P> {\n        // $FlowFixMe\n        this.props = this.props || {};\n        return this.props;\n    }\n\n\n    setProps(props : PropsType<P>, origin : string, isUpdate : boolean = false) {\n        const helpers = this.getHelpers();\n        const existingProps = this.getProps();\n        const normalizedProps = normalizeChildProps(this.parentComponentWindow, this.component, props, origin, helpers, isUpdate);\n\n        extend(existingProps, normalizedProps);\n\n        for (const handler of this.onPropHandlers) {\n            handler.call(this, existingProps);\n        }\n    }\n\n    watchForClose() {\n        window.addEventListener('beforeunload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        window.addEventListener('unload', () => {\n            this.parent.checkClose.fireAndForget();\n        });\n\n        onCloseWindow(this.parentComponentWindow, () => {\n            this.destroy();\n        });\n    }\n\n    getAutoResize() : { width : boolean, height : boolean, element : ?HTMLElement } {\n        let { width = false, height = false, element = 'body' } = this.autoResize || this.component.autoResize || {};\n        element = getElementSafe(element);\n        return { width, height, element };\n    }\n\n    watchForResize() : ?ZalgoPromise<void> {\n        return waitForDocumentBody().then(() => {\n            const { width, height, element } = this.getAutoResize();\n\n            if (!element || (!width && !height) || this.context === CONTEXT.POPUP) {\n                return;\n            }\n\n            onResize(element, ({ width: newWidth, height: newHeight }) => {\n                this.resize({\n                    width:  width ? newWidth : undefined,\n                    height: height ? newHeight : undefined\n                });\n            }, { width, height });\n        });\n    }\n\n    buildExports() : ChildExportsType<P> {\n\n        const self = this;\n\n        return {\n            updateProps(props : (PropsType<P>)) : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.setProps(props, this.__origin__, true));\n            },\n\n            close() : ZalgoPromise<void> {\n                return ZalgoPromise.try(() => self.destroy());\n            }\n        };\n    }\n\n    resize({ width, height } : { width : ?number, height : ?number }) : ZalgoPromise<void> {\n        return this.parent.resize.fireAndForget({ width, height });\n    }\n\n    close() : ZalgoPromise<void> {\n        return this.parent.close();\n    }\n    \n    destroy() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.close();\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            window.focus();\n        });\n    }\n\n    onError(err : mixed) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.parent && this.parent.onError) {\n                return this.parent.onError(err);\n            } else {\n                throw err;\n            }\n        });\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { cleanUpWindow, ProxyWindow, toProxyWindow } from 'post-robot/src';\nimport { assertSameDomain } from 'cross-domain-utils/src';\nimport { iframe, popup, destroyElement, normalizeDimension, watchElementForClose,\n    awaitFrameWindow, uniqueID } from 'belter/src';\n\nimport { CONTEXT } from '../constants';\nimport { getProxyElement, type ProxyElement } from '../lib';\n\n\nexport type ContextDriverType = {|\n    openOnClick : boolean,\n    openFrame? : () => ProxyElement<HTMLIFrameElement>,\n    open : (?ProxyElement<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    openPrerenderFrame? : () => ProxyElement<HTMLIFrameElement>,\n    openPrerender : (ProxyWindow, ?ProxyElement<HTMLIFrameElement>) => ZalgoPromise<ProxyWindow>,\n    resize? : ({ width : ?number, height : ?number }) => void,\n    delegate : $ReadOnlyArray<string>\n|};\n\nexport const RENDER_DRIVERS : { [string] : ContextDriverType } = {};\n\nRENDER_DRIVERS[CONTEXT.IFRAME] = {\n    openOnClick: false,\n\n    openFrame() : ProxyElement<HTMLIFrameElement> {\n        return getProxyElement(iframe({\n            attributes: {\n                title: this.component.name,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    open(proxyFrame : ?ProxyElement<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n\n        return proxyFrame.getElement().then(frame => {\n            return awaitFrameWindow(frame).then(win => {\n\n                const frameWatcher = watchElementForClose(frame, () => this.close());\n                this.clean.register(() => frameWatcher.cancel());\n                this.clean.register(() => destroyElement(frame));\n                this.clean.register(() => cleanUpWindow(win));\n\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    openPrerenderFrame() : ProxyElement<HTMLIFrameElement> {\n        return getProxyElement(iframe({\n            attributes: {\n                name:  `__zoid_prerender_frame__${ this.component.name }_${ uniqueID() }__`,\n                title: `prerender__${ this.component.name }`,\n                ...this.component.attributes.iframe\n            }\n        }));\n    },\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyElement<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        if (!proxyPrerenderFrame) {\n            throw new Error(`Expected proxy frame to be passed`);\n        }\n        \n        return proxyPrerenderFrame.getElement().then(prerenderFrame => {\n            this.clean.register(() => destroyElement(prerenderFrame));\n\n            return awaitFrameWindow(prerenderFrame).then(prerenderFrameWindow => {\n                return assertSameDomain(prerenderFrameWindow);\n            }).then(win => {\n                return toProxyWindow(win);\n            });\n        });\n    },\n\n    delegate: [\n        'getProxyContainer',\n        'renderContainer',\n        'openFrame',\n        'openPrerenderFrame',\n        'prerender',\n        'open',\n        'openPrerender'\n    ],\n\n    resize({ width, height } : { width : ?number, height : ?number }) {\n        if (this.proxyContainer) {\n            this.proxyContainer.resize({ width, height });\n        }\n    }\n};\n\nif (__ZOID__.__POPUP_SUPPORT__) {\n    RENDER_DRIVERS[CONTEXT.POPUP] = {\n        openOnClick: true,\n\n        open() : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                let { width, height } = this.component.dimensions;\n\n                width = normalizeDimension(width, window.outerWidth);\n                height = normalizeDimension(height, window.outerWidth);\n\n                const win = popup('', {\n                    width,\n                    height,\n                    ...this.component.attributes.popup\n                });\n\n                this.clean.register(() => {\n                    win.close();\n                    cleanUpWindow(win);\n                });\n\n                return toProxyWindow(win);\n            });\n        },\n\n        openPrerender(proxyWin : ProxyWindow) : ZalgoPromise<ProxyWindow> {\n            return ZalgoPromise.try(() => {\n                return proxyWin;\n            });\n        },\n\n        delegate: [\n            'getProxyContainer',\n            'renderContainer',\n            'setProxyWin'\n        ]\n    };\n}\n","/* @flow */\n\nimport { type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { noop } from 'belter/src';\n\nimport { windowStore } from './global';\n\nexport function cleanUpWindow(win : CrossDomainWindowType) {\n    const requestPromises = windowStore('requestPromises');\n    for (const promise of requestPromises.get(win, [])) {\n        promise.reject(new Error(`Window cleaned up before response`)).catch(noop);\n    }\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { dotify, isDefined } from 'belter/src';\n\nimport type { Component } from '../component';\nimport type { BuiltInPropsDefinitionType, PropsInputType, PropsType, MixedPropDefinitionType } from '../component/props';\nimport { PROP_SERIALIZATION } from '../constants';\n\nimport type { ParentComponent, ParentHelpers } from './index';\n\n/*  Normalize Props\n    ---------------\n\n    Turn props into normalized values, using defaults, function options, etc.\n*/\n\nexport function normalizeProps<P>(component : Component<P>, instance : ParentComponent<P>, props : PropsInputType<P>, helpers : ParentHelpers<P>, isUpdate : boolean = false) : (PropsType<P>) { // eslint-disable-line complexity\n\n    // $FlowFixMe\n    props = props || {};\n    const result : $Shape<P> = { ...props }; // eslint-disable-line no-undef\n\n    const propNames = isUpdate\n        ? []\n        : [ ...component.getPropNames() ];\n\n    // $FlowFixMe\n    for (const key of Object.keys(props)) {\n        if (propNames.indexOf(key) === -1) {\n            propNames.push(key);\n        }\n    }\n\n    const aliases = [];\n\n    const { state, close, focus, onError } = helpers;\n\n    for (const key of propNames) {\n        const propDef = component.getPropDefinition(key);\n        // $FlowFixMe\n        let value = props[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        const alias = propDef.alias;\n        if (alias) {\n            if (!isDefined(value) && isDefined(props[alias])) {\n                value = props[alias];\n            }\n            aliases.push(alias);\n        }\n\n        if (propDef.value) {\n            value = propDef.value({ props: result, state, close, focus, onError });\n        }\n\n        if (!isDefined(value) && propDef.default) {\n            value = propDef.default({ props: result, state, close, focus, onError });\n        }\n\n        if (isDefined(value)) {\n            if (propDef.type === 'array' ? !Array.isArray(value) : (typeof value !== propDef.type)) {\n                throw new TypeError(`Prop is not of type ${ propDef.type }: ${ key }`);\n            }\n        }\n        \n        // $FlowFixMe\n        result[key] = value;\n    }\n\n    for (const alias of aliases) {\n        // $FlowFixMe\n        delete result[alias];\n    }\n\n    // $FlowFixMe\n    for (const key of Object.keys(result)) {\n        const propDef = component.getPropDefinition(key);\n        // $FlowFixMe\n        const value = result[key];\n\n        if (!propDef) {\n            continue;\n        }\n\n        if (isDefined(value) && propDef.validate) {\n            // $FlowFixMe\n            propDef.validate({ value, props: result });\n        }\n\n        if (isDefined(value) && propDef.decorate) {\n            // $FlowFixMe\n            result[key] = propDef.decorate({ value, props: result, state, close, focus, onError });\n        }\n    }\n\n    // $FlowFixMe\n    return result;\n}\n\n// $FlowFixMe\nfunction getQueryParam<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<string> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryParam === 'function') {\n            return prop.queryParam({ value });\n        } else if (typeof prop.queryParam === 'string') {\n            return prop.queryParam;\n        } else {\n            return key;\n        }\n    });\n}\n\n// $FlowFixMe\nfunction getQueryValue<T, P>(prop : MixedPropDefinitionType<P>, key : string, value : T) : ZalgoPromise<mixed> {\n    return ZalgoPromise.try(() => {\n        if (typeof prop.queryValue === 'function' && isDefined(value)) {\n            return prop.queryValue({ value });\n        } else {\n            return value;\n        }\n    });\n}\n\nexport function propsToQuery<P>(propsDef : BuiltInPropsDefinitionType<P>, props : (PropsType<P>)) : ZalgoPromise<{ [string] : string }> {\n\n    const params = {};\n\n    return ZalgoPromise.all(Object.keys(props).map(key => {\n\n        const prop = propsDef[key];\n\n        if (!prop) {\n            return; // eslint-disable-line array-callback-return\n        }\n\n        return ZalgoPromise.resolve().then(() => {\n\n            const value = props[key];\n\n            if (!value) {\n                return;\n            }\n\n            if (!prop.queryParam) {\n                return;\n            }\n\n            return value;\n\n        }).then(value => {\n\n            if (value === null || typeof value === 'undefined') {\n                return;\n            }\n\n            return ZalgoPromise.all([\n                // $FlowFixMe\n                getQueryParam(prop, key, value),\n                // $FlowFixMe\n                getQueryValue(prop, key, value)\n            ]).then(([ queryParam, queryValue ]) => {\n\n                let result;\n\n                if (typeof queryValue === 'boolean') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'string') {\n                    result = queryValue.toString();\n                } else if (typeof queryValue === 'object' && queryValue !== null) {\n\n                    if (prop.serialization === PROP_SERIALIZATION.JSON) {\n                        result = JSON.stringify(queryValue);\n                    } else if (prop.serialization === PROP_SERIALIZATION.BASE64) {\n                        result = btoa(JSON.stringify(queryValue));\n                    } else if (prop.serialization === PROP_SERIALIZATION.DOTIFY || !prop.serialization) {\n                        result = dotify(queryValue, key);\n\n                        for (const dotkey of Object.keys(result)) {\n                            params[dotkey] = result[dotkey];\n                        }\n\n                        return;\n                    }\n\n                } else if (typeof queryValue === 'number') {\n                    result = queryValue.toString();\n                }\n\n                params[queryParam] = result;\n            });\n        });\n\n    })).then(() => {\n        return params;\n    });\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { send, bridge, serializeMessage, ProxyWindow, toProxyWindow } from 'post-robot/src';\nimport { isSameDomain, matchDomain, getDomainFromUrl, isBlankDomain,\n    onCloseWindow, getDomain, type CrossDomainWindowType,\n    getDistanceFromTop, normalizeMockUrl, assertSameDomain } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { addEventListener, uniqueID, elementReady, writeElementToWindow, eventEmitter, type EventEmitterType,\n    noop, onResize, extend, extendUrl, appendChild, cleanup, type CleanupType, base64encode,\n    once, stringifyError, destroyElement, isDefined, getElementSafe } from 'belter/src';\n\nimport { ZOID, POST_MESSAGE, CONTEXT, EVENT,\n    INITIAL_PROPS, WINDOW_REFERENCES } from '../constants';\nimport type { Component, onErrorPropType } from '../component';\nimport { globalFor, getProxyElement, type ProxyElement } from '../lib';\nimport type { PropsInputType, PropsType } from '../component/props';\nimport type { ChildExportsType } from '../child';\nimport type { DimensionsType } from '../types';\n\nimport { RENDER_DRIVERS, type ContextDriverType } from './drivers';\nimport { propsToQuery, normalizeProps } from './props';\n\nexport type RenderOptionsType<P> = {|\n    uid : string,\n    props : PropsInputType<P>,\n    tag : string,\n    context : string,\n    close : (?string) => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<ProxyWindow>,\n    doc : Document,\n    container? : HTMLElement,\n    dimensions : DimensionsType,\n    state : Object,\n    event : EventEmitterType,\n    frame : ?HTMLIFrameElement,\n    prerenderFrame : ?HTMLIFrameElement\n|};\n\nexport type ParentExportsType<P> = {|\n    init : (ChildExportsType<P>) => ZalgoPromise<void>,\n    close : () => ZalgoPromise<void>,\n    checkClose : () => ZalgoPromise<void>,\n    resize : ({ width? : ?number, height? : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>\n|};\n\nexport type PropRef =\n    {| type : typeof INITIAL_PROPS.RAW, uid? : string, value? : string |};\n\nexport type WindowRef =\n    {| type : typeof WINDOW_REFERENCES.OPENER |} |\n    {| type : typeof WINDOW_REFERENCES.PARENT, distance : number |} |\n    {| type : typeof WINDOW_REFERENCES.GLOBAL, uid : string |};\n\nexport type ChildPayload = {|\n    uid : string,\n    tag : string,\n    context : $Values<typeof CONTEXT>,\n    domain : string,\n    parent : WindowRef,\n    props : PropRef,\n    exports : string\n|};\n\nexport type StateType = Object;\n\nexport type ParentHelpers<P> = {|\n    state : StateType,\n    close : () => ZalgoPromise<void>,\n    focus : () => ZalgoPromise<void>,\n    resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void>,\n    onError : (mixed) => ZalgoPromise<void>,\n    updateProps : PropsInputType<P> => ZalgoPromise<void>,\n    event : EventEmitterType\n|};\n\nexport class ParentComponent<P> {\n\n    component : Component<P>\n    driver : ContextDriverType\n    clean : CleanupType\n    event : EventEmitterType\n\n    initPromise : ZalgoPromise<void>\n    \n    props : PropsType<P>\n    state : StateType\n    child : ?ChildExportsType<P>\n\n    proxyWin : ?ProxyWindow\n    proxyContainer : ?ProxyElement<HTMLElement>\n\n    constructor(component : Component<P>, props : PropsInputType<P>) {\n        try {\n            this.initPromise = new ZalgoPromise();\n\n            this.clean = cleanup(this);\n            this.state = {};\n\n            this.component = component;\n    \n            this.setupEvents(props.onError);\n            this.setProps(props);\n            this.component.registerActiveComponent(this);\n            this.clean.register(() => this.component.destroyActiveComponent(this));\n            this.watchForUnload();\n\n        } catch (err) {\n            this.onError(err).catch(noop);\n            throw err;\n        }\n    }\n\n    setupEvents(onError : ?onErrorPropType) {\n        this.event = eventEmitter();\n        \n        this.event.on(EVENT.RENDER,   () => this.props.onRender());\n        this.event.on(EVENT.DISPLAY,  () => this.props.onDisplay());\n        this.event.on(EVENT.RENDERED, () => this.props.onRendered());\n        this.event.on(EVENT.CLOSE,    () => this.props.onClose());\n        this.event.on(EVENT.PROPS,    (props) => this.props.onProps(props));\n\n        this.event.on(EVENT.ERROR, err => {\n            if (this.props && this.props.onError) {\n                return this.props.onError(err);\n            } else if (onError) {\n                return onError(err);\n            } else {\n                throw err;\n            }\n        });\n    }\n\n    render(target : CrossDomainWindowType, container : string | HTMLElement, context : $Values<typeof CONTEXT>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`render`);\n\n            this.driver = RENDER_DRIVERS[context];\n            const uid = `${ ZOID }-${ this.component.tag }-${ uniqueID() }`;\n            const domain = this.getDomain();\n            const initialDomain = this.getInitialDomain();\n            \n            this.component.checkAllowRender(target, domain, container);\n\n            if (target !== window) {\n                this.delegate(context, target);\n            }\n\n            const tasks = {};\n\n            tasks.init = this.initPromise;\n            tasks.buildUrl = this.buildUrl();\n            tasks.onRender = this.event.trigger(EVENT.RENDER);\n\n            tasks.getProxyContainer = this.getProxyContainer(container);\n\n            tasks.openFrame = this.openFrame();\n            tasks.openPrerenderFrame = this.openPrerenderFrame();\n\n            tasks.renderContainer = ZalgoPromise.all([ tasks.getProxyContainer, tasks.openFrame, tasks.openPrerenderFrame ]).then(([ proxyContainer, proxyFrame, proxyPrerenderFrame ]) => {\n                return this.renderContainer(proxyContainer, { context, uid, proxyFrame, proxyPrerenderFrame });\n            });\n\n            tasks.open = this.driver.openOnClick\n                ? this.open()\n                : tasks.openFrame.then(proxyFrame => this.open(proxyFrame));\n\n            tasks.openPrerender = ZalgoPromise.all([ tasks.open, tasks.openPrerenderFrame ]).then(([ proxyWin, proxyPrerenderFrame ]) => {\n                return this.openPrerender(proxyWin, proxyPrerenderFrame);\n            });\n\n            tasks.setState = ZalgoPromise.all([\n                tasks.open.then(proxyWin => {\n                    this.proxyWin = proxyWin;\n                    return this.setProxyWin(proxyWin);\n                }),\n                tasks.renderContainer.then(proxyContainer => {\n                    this.proxyContainer = proxyContainer;\n                })\n            ]);\n            \n            tasks.prerender = ZalgoPromise.all([ tasks.openPrerender, tasks.setState ]).then(([ proxyPrerenderWin ]) => {\n                return this.prerender(proxyPrerenderWin, { context, uid });\n            });\n\n            tasks.loadUrl = ZalgoPromise.all([ tasks.open, tasks.buildUrl, tasks.setWindowName, tasks.prerender ]).then(([ proxyWin, url ]) => {\n                return proxyWin.setLocation(url);\n            });\n\n            tasks.buildWindowName = tasks.open.then(proxyWin => {\n                return this.buildWindowName({ proxyWin, initialDomain, domain, target, context, uid });\n            });\n\n            tasks.setWindowName =  ZalgoPromise.all([ tasks.open, tasks.buildWindowName ]).then(([ proxyWin, windowName ]) => {\n                return proxyWin.setName(windowName);\n            });\n\n            tasks.watchForClose = tasks.open.then(proxyWin => {\n                return this.watchForClose(proxyWin);\n            });\n\n            tasks.onDisplay = tasks.prerender.then(() => {\n                return this.event.trigger(EVENT.DISPLAY);\n            });\n\n            tasks.openBridge = tasks.open.then(proxyWin => {\n                return this.openBridge(proxyWin, initialDomain, context);\n            });\n\n            tasks.runTimeout = tasks.loadUrl.then(() => {\n                return this.runTimeout();\n            });\n\n            tasks.onRender = tasks.init.then(() => {\n                return this.event.trigger(EVENT.RENDERED);\n            });\n\n            return ZalgoPromise.hash(tasks);\n            \n        }).catch(err => {\n            return ZalgoPromise.all([\n                this.onError(err),\n                this.destroy(err)\n            ]);\n        }).then(noop);\n    }\n\n    getProxyContainer(container : string | HTMLElement) : ZalgoPromise<ProxyElement<HTMLElement>> {\n        return ZalgoPromise.try(() => {\n            return elementReady(container);\n        }).then(containerElement => {\n            return getProxyElement(containerElement);\n        });\n    }\n\n    buildWindowName({ proxyWin, initialDomain, domain, target, uid, context } : { proxyWin : ProxyWindow, initialDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string }) : string {\n        const childPayload = this.buildChildPayload({ proxyWin, initialDomain, domain, target, context, uid });\n        return `__${ ZOID }__${ this.component.name }__${ base64encode(JSON.stringify(childPayload)) }__`;\n    }\n\n    getPropsRef(proxyWin : ProxyWindow, target : CrossDomainWindowType, domain : string | RegExp, uid : string) : PropRef {\n        const value = serializeMessage(proxyWin, domain, this.getPropsForChild(domain));\n\n        const propRef = isSameDomain(target)\n            ? { type: INITIAL_PROPS.RAW, value }\n            : { type: INITIAL_PROPS.UID, uid };\n\n        if (propRef.type === INITIAL_PROPS.UID) {\n            const global = globalFor(window);\n            global.props = global.props || {};\n            global.props[uid] = value;\n\n            this.clean.register(() => {\n                delete global.props[uid];\n            });\n        }\n\n        return propRef;\n    }\n\n    buildChildPayload({ proxyWin, initialDomain, domain, target = window, context, uid } : { proxyWin : ProxyWindow, initialDomain : string, domain : string | RegExp, target : CrossDomainWindowType, context : $Values<typeof CONTEXT>, uid : string } = {}) : ChildPayload {\n        return {\n            uid,\n            context,\n            domain:  getDomain(window),\n            tag:     this.component.tag,\n            parent:  this.getWindowRef(target, initialDomain, uid, context),\n            props:   this.getPropsRef(proxyWin, target, domain, uid),\n            exports: serializeMessage(proxyWin, domain, this.buildParentExports(proxyWin))\n        };\n    }\n\n    setProxyWin(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.proxyWin = proxyWin;\n        });\n    }\n\n    getHelpers() : ParentHelpers<P> {\n        return {\n            state:       this.state,\n            event:       this.event,\n            close:       () => this.close(),\n            focus:       () => this.focus(),\n            resize:      ({ width, height }) => this.resize({ width, height }),\n            onError:     (err) => this.onError(err),\n            updateProps: (props) => this.updateProps(props)\n        };\n    }\n\n    setProps(props : PropsInputType<P>, isUpdate : boolean = false) {\n        if (this.component.validate) {\n            this.component.validate({ props });\n        }\n\n        const helpers = this.getHelpers();\n\n        // $FlowFixMe\n        this.props = this.props || {};\n        extend(this.props, normalizeProps(this.component, this, props, helpers, isUpdate));\n\n        for (const key of this.component.getPropNames()) {\n            const propDef = this.component.getPropDefinition(key);\n            if (propDef.required !== false && !isDefined(this.props[key])) {\n                throw new Error(`Expected prop \"${ key }\" to be defined`);\n            }\n        }\n    }\n\n    buildUrl() : ZalgoPromise<string> {\n        return propsToQuery({ ...this.component.props, ...this.component.builtinProps }, this.props).then(query => {\n            return extendUrl(normalizeMockUrl(this.component.getUrl(this.props)), { query });\n        });\n    }\n\n    getDomain() : string | RegExp {\n        return this.component.getDomain(this.props);\n    }\n\n    getInitialDomain() : string {\n        return this.component.getInitialDomain(this.props);\n    }\n\n    getPropsForChild(domain : string | RegExp) : (PropsType<P>) {\n        const result = {};\n\n        for (const key of Object.keys(this.props)) {\n            const prop = this.component.getPropDefinition(key);\n\n            if (prop && prop.sendToChild === false) {\n                continue;\n            }\n\n            if (prop && prop.sameDomain && !matchDomain(domain, getDomain(window))) {\n                continue;\n            }\n\n            // $FlowFixMe\n            result[key] = this.props[key];\n        }\n\n        // $FlowFixMe\n        return result;\n    }\n\n    updateProps(props : PropsInputType<P>) : ZalgoPromise<void> {\n        this.setProps(props, true);\n\n        return this.initPromise.then(() => {\n            if (this.child) {\n                return this.child.updateProps(this.getPropsForChild(this.getDomain()));\n            }\n        });\n    }\n\n    openFrame() : ZalgoPromise<?ProxyElement<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openFrame) {\n                return this.driver.openFrame.call(this);\n            }\n        });\n    }\n\n    openPrerenderFrame() : ZalgoPromise<?ProxyElement<HTMLIFrameElement>> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.openPrerenderFrame) {\n                return this.driver.openPrerenderFrame.call(this);\n            }\n        });\n    }\n    \n    open(proxyFrame : ?ProxyElement<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`open`);\n\n            const windowProp = this.props.window;\n\n            if (windowProp) {\n                this.clean.register(() => windowProp.close());\n                return toProxyWindow(windowProp);\n            }\n\n            return this.driver.open.call(this, proxyFrame);\n\n        }).then(proxyWin => {\n            this.proxyWin = proxyWin;\n            return proxyWin;\n        });\n    }\n\n    openPrerender(proxyWin : ProxyWindow, proxyPrerenderFrame : ?ProxyElement<HTMLIFrameElement>) : ZalgoPromise<ProxyWindow> {\n        return ZalgoPromise.try(() => {\n            return this.driver.openPrerender.call(this, proxyWin, proxyPrerenderFrame);\n        });\n    }\n\n    focus() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.proxyWin) {\n                return this.proxyWin.focus().then(noop);\n            }\n        });\n    }\n\n    delegate(context : $Values<typeof CONTEXT>, target : CrossDomainWindowType) {\n        this.component.log(`delegate`);\n\n        const props = {};\n        for (const propName of this.component.getPropNames()) {\n            if (this.component.getPropDefinition(propName).allowDelegate) {\n                props[propName] = this.props[propName];\n            }\n        }\n\n        const overridesPromise = send(target, `${ POST_MESSAGE.DELEGATE }_${ this.component.name }`, {\n            context,\n            props,\n            overrides: {\n                event:   this.event,\n                close:   () => this.close(),\n                onError: (err) => this.onError(err)\n            }\n\n        }).then(({ data }) => {\n            this.clean.register(data.destroy);\n            return data.overrides;\n\n        }).catch(err => {\n            throw new Error(`Unable to delegate rendering. Possibly the component is not loaded in the target window.\\n\\n${ stringifyError(err) }`);\n        });\n\n        for (const key of this.driver.delegate) {\n            // $FlowFixMe\n            this[key] = function overriddenFunction() : ZalgoPromise<mixed> {\n                return overridesPromise.then(overrides => {\n                    return overrides[key].apply(this, arguments);\n                });\n            };\n        }\n    }\n\n    getWindowRef(target : CrossDomainWindowType, domain : string, uid : string, context : $Values<typeof CONTEXT>) : WindowRef {\n        \n        if (domain === getDomain(window)) {\n            const global = globalFor(window);\n            global.windows = global.windows || {};\n            global.windows[uid] = window;\n            this.clean.register(() => {\n                delete global.windows[uid];\n            });\n    \n            return { type: WINDOW_REFERENCES.GLOBAL, uid };\n        }\n\n        if (context === CONTEXT.POPUP) {\n            return { type: WINDOW_REFERENCES.OPENER };\n        }\n\n        return { type: WINDOW_REFERENCES.PARENT, distance: getDistanceFromTop(window) };\n    }\n\n    watchForClose(proxyWin : ProxyWindow) : ZalgoPromise<void> {\n        return proxyWin.awaitWindow().then(win => {\n            const closeWindowListener = onCloseWindow(win, () => {\n                this.component.log(`detect_close_child`);\n                return this.close();\n            }, 2000);\n\n            this.clean.register(closeWindowListener.cancel);\n        });\n    }\n\n    watchForUnload() {\n        const unloadWindowListener = addEventListener(window, 'unload', once(() => {\n            this.component.log(`navigate_away`);\n            this.destroy(new Error(`Window navigated away`));\n        }));\n\n        this.clean.register(unloadWindowListener.cancel);\n    }\n\n    runTimeout() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const timeout = this.props.timeout;\n\n            if (timeout) {\n                return this.initPromise.timeout(timeout, new Error(`Loading component timed out after ${ timeout } milliseconds`));\n            }\n        });\n    }\n\n    initChild(child : ChildExportsType<P>) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.clean.set('child', child);\n            this.initPromise.resolve();\n        });\n    }\n\n    buildParentExports(win : ProxyWindow) : ParentExportsType<P> {\n        const onError    = (err) => this.onError(err);\n        const init       = (child) => this.initChild(child);\n        const close      = () => this.close();\n        const checkClose = () => this.checkClose(win);\n        const resize     = ({ width, height }) => this.resize({ width, height });\n\n        init.onError = onError;\n\n        return { init, close, checkClose, resize, onError };\n    }\n\n    resize({ width, height } : { width? : ?number, height? : ?number }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            if (this.driver.resize) {\n                return this.driver.resize.call(this, { width, height });\n            }\n        });\n    }\n\n    checkClose(win : ProxyWindow) : ZalgoPromise<void> {\n        return win.isClosed().then(closed => {\n            if (closed) {\n                return this.close();\n            }\n\n            return ZalgoPromise.delay(200)\n                .then(() => win.isClosed())\n                .then(secondClosed => {\n                    if (secondClosed) {\n                        return this.close();\n                    }\n                });\n        });\n    }\n\n    close() : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`close`);\n            return this.event.trigger(EVENT.CLOSE);\n\n        }).then(() => {\n            if (this.child) {\n                this.child.close.fireAndForget().catch(noop);\n            }\n\n            return this.destroy(new Error(`Window closed`));\n        });\n    }\n\n    prerender(proxyPrerenderWin : ProxyWindow, { context, uid } : { context : $Values<typeof CONTEXT>, uid : string }) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            const prerenderTemplate = this.component.prerenderTemplate;\n\n            if (!prerenderTemplate) {\n                return;\n            }\n\n            let prerenderWindow = proxyPrerenderWin.getWindow();\n\n            if (!prerenderWindow || !isSameDomain(prerenderWindow) || !isBlankDomain(prerenderWindow)) {\n                return;\n            }\n\n            prerenderWindow = assertSameDomain(prerenderWindow);\n    \n            const doc = prerenderWindow.document;\n            const el = this.renderTemplate(prerenderTemplate, { context, uid, doc });\n\n            if (!el) {\n                return;\n            }\n\n            if (el.ownerDocument !== doc) {\n                throw new Error(`Expected prerender template to have been created with document from child window`);\n            }\n\n            writeElementToWindow(prerenderWindow, el);\n\n            let { width = false, height = false, element = 'body' } = this.component.autoResize || {};\n            element = getElementSafe(element, doc);\n            \n            if (element && (width || height)) {\n                onResize(element, ({ width: newWidth, height: newHeight }) => {\n                    this.resize({\n                        width:  width ? newWidth : undefined,\n                        height: height ? newHeight : undefined\n                    });\n                }, { width, height, win: prerenderWindow });\n            }\n        });\n    }\n\n    renderTemplate(renderer : (RenderOptionsType<P>) => ?HTMLElement, { context, uid, container, doc, frame, prerenderFrame } : { context : $Values<typeof CONTEXT>, uid : string, container? : HTMLElement, doc : Document, frame? : ?HTMLIFrameElement, prerenderFrame? : ?HTMLIFrameElement }) : ?HTMLElement {\n        // $FlowFixMe\n        return renderer.call(this, {\n            container,\n            context,\n            uid,\n            doc,\n            frame,\n            prerenderFrame,\n            focus:      () => this.focus(),\n            close:      () => this.close(),\n            state:      this.state,\n            props:      this.props,\n            tag:        this.component.tag,\n            dimensions: this.component.dimensions,\n            event:      this.event\n        });\n    }\n\n    renderContainer(proxyContainer : ProxyElement<HTMLElement>, { proxyFrame, proxyPrerenderFrame, context, uid } : { context : $Values<typeof CONTEXT>, uid : string, proxyFrame : ?ProxyElement<HTMLIFrameElement>, proxyPrerenderFrame : ?ProxyElement<HTMLIFrameElement> }) : ZalgoPromise<?ProxyElement<HTMLElement>> {\n        return ZalgoPromise.all([\n            proxyContainer.getElement().then(elementReady),\n            // $FlowFixMe\n            proxyFrame ? proxyFrame.getElement() : null,\n            // $FlowFixMe\n            proxyPrerenderFrame ? proxyPrerenderFrame.getElement() : null\n        ]).then(([ container, frame, prerenderFrame ]) => {\n            const innerContainer = this.renderTemplate(this.component.containerTemplate, { context, uid, container, frame, prerenderFrame, doc: document });\n            if (innerContainer) {\n                appendChild(container, innerContainer);\n                this.clean.register(() => destroyElement(innerContainer));\n                this.proxyContainer = getProxyElement(innerContainer);\n                return this.proxyContainer;\n            }\n        });\n    }\n\n    destroy(err : mixed = new Error(`Component destroyed before render complete`)) : ZalgoPromise<void> {\n        return ZalgoPromise.try(() => {\n            this.component.log(`destroy`);\n            this.initPromise.asyncReject(err);\n            return this.clean.all();\n        });\n    }\n\n    onError(err : mixed) : ZalgoPromise<void> {\n        // eslint-disable-next-line promise/no-promise-in-callback\n        return ZalgoPromise.try(() => {\n            this.initPromise.asyncReject(err);\n            return this.event.trigger(EVENT.ERROR, err);\n\n        }).then(() => {\n            return this.initPromise;\n            \n        }).then(() => {\n            throw err;\n        });\n    }\n\n    openBridge(proxyWin : ProxyWindow, domain : string, context : $Values<typeof CONTEXT>) : ?ZalgoPromise<?CrossDomainWindowType> {\n        if (__POST_ROBOT__.__IE_POPUP_SUPPORT__) {\n            return ZalgoPromise.try(() => {\n                return proxyWin.awaitWindow();\n                \n            }).then(win => {\n                if (!bridge || !bridge.needsBridge({ win, domain }) || bridge.hasBridge(domain, domain)) {\n                    return;\n                }\n\n                const bridgeUrl = this.component.getBridgeUrl();\n\n                if (!bridgeUrl) {\n                    throw new Error(`Bridge needed to render ${ context }`);\n                }\n\n                const bridgeDomain = getDomainFromUrl(bridgeUrl);\n                bridge.linkUrl(win, domain);\n                return bridge.openBridge(normalizeMockUrl(bridgeUrl), bridgeDomain);\n            });\n        }\n    }\n}\n","/* @flow */\n\nimport { onCloseWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { ProxyWindow } from 'post-robot/src';\nimport { cleanup, type CleanupType, type EventEmitterType } from 'belter/src';\n\nimport { ParentComponent } from '../parent';\nimport { RENDER_DRIVERS, type ContextDriverType } from '../parent/drivers';\nimport type { Component } from '../component';\n\nexport type DelegatePropsType = {|\n    onClose : () => ?ZalgoPromise<void>,\n    onDisplay : () => ?ZalgoPromise<void>,\n    window : ?ProxyWindow\n|};\n\nexport type DelegateOptionsType = {|\n    context : string,\n    props : DelegatePropsType,\n    overrides : {\n        close : () => ZalgoPromise<void>,\n        onError : (mixed) => ZalgoPromise<void>,\n        event : EventEmitterType\n    }\n|};\n\nexport type DelegateReturnType = {|\n    overrides : Object,\n    destroy : () => ZalgoPromise<void>\n|};\n\nexport class DelegateComponent<P>  {\n\n    component : Component<P>\n    source : CrossDomainWindowType\n    context : string\n    driver : ContextDriverType\n    props : DelegatePropsType\n    clean : CleanupType\n\n    focus : () => ZalgoPromise<void>\n    resize : ({ width? : ?number, height? : ?number }) => ZalgoPromise<void>\n    renderTemplate : Function\n\n    close : () => ZalgoPromise<void>\n    onError : (mixed) => ZalgoPromise<void>\n    event : EventEmitterType\n\n    constructor(component : Component<P>, source : CrossDomainWindowType, options : DelegateOptionsType) {\n        this.component = component;\n        this.context = options.context;\n        this.driver = RENDER_DRIVERS[options.context];\n        this.clean = cleanup(this);\n        \n        this.focus = ParentComponent.prototype.focus;\n        this.resize = ParentComponent.prototype.resize;\n        this.renderTemplate = ParentComponent.prototype.renderTemplate;\n\n        // $FlowFixMe\n        this.props = {};\n        for (const propName of Object.keys(options.props)) {\n            const propDef = this.component.getPropDefinition(propName);\n            if (propDef && propDef.allowDelegate && options.props[propName]) {\n                // $FlowFixMe\n                this.props[propName] = options.props[propName];\n            }\n        }\n\n        this.close   = options.overrides.close;\n        this.onError = options.overrides.onError;\n        this.event   = options.overrides.event;\n\n        this.component.registerActiveComponent(this);\n        this.clean.register(() => this.component.destroyActiveComponent(this));\n\n        this.watchForSourceClose(source);\n    }\n\n    getDelegate() : DelegateReturnType {\n        return {\n            overrides: this.getOverrides(),\n            destroy:   () => this.destroy()\n        };\n    }\n\n    watchForSourceClose(source : CrossDomainWindowType) {\n        const closeSourceWindowListener = onCloseWindow(source, () => this.destroy(), 3000);\n        this.clean.register(closeSourceWindowListener.cancel);\n    }\n\n    getOverrides() : { [string] : mixed } {\n        const overrides = {};\n        const self = this;\n\n        for (const key of this.driver.delegate) {\n            overrides[key] = function delegateOverride() : mixed {\n                // $FlowFixMe\n                return ParentComponent.prototype[key].apply(self, arguments);\n            };\n            overrides[key].__name__ = key;\n        }\n\n        return overrides;\n    }\n\n    destroy() : ZalgoPromise<void> {\n        return this.clean.all();\n    }\n}\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","/* @flow */\n\nexport type NodePropsType = { [string] : mixed };\n// eslint-disable-next-line no-use-before-define\nexport type NodeType = ElementNode | TextNode | FragmentNode;\n// eslint-disable-next-line no-use-before-define\nexport type NodeChildrenType = $ReadOnlyArray<ElementNode | TextNode>;\nexport type NodeRenderer<T> = (string, NodePropsType, NodeChildrenType) => T;\nexport type NodeRendererFactory<T, O = Object> = (O | void) => NodeRenderer<T>;\n\nclass Node {\n    isElementNode() : boolean {\n        return false;\n    }\n\n    isTextNode() : boolean {\n        return false;\n    }\n\n    isFragmentNode() : boolean {\n        return false;\n    }\n}\n\nexport class ElementNode extends Node {\n    name : string\n    props : NodePropsType\n    children : NodeChildrenType\n    onRender : ?<T>(T) => void // eslint-disable-line no-undef\n\n    constructor(name : string, props : NodePropsType, children : NodeChildrenType) {\n        super();\n        this.name = name;\n        this.props = props;\n        this.children = children;\n\n        if (typeof props.onRender === 'function') {\n            this.onRender = props.onRender;\n            delete props.onRender;\n        }\n    }\n\n    getTag() : string {\n        return this.name;\n    }\n\n    isTag(name : string) : boolean {\n        return name === this.name;\n    }\n\n    isElementNode() : boolean {\n        return true;\n    }\n\n    render<T>(renderer : NodeRenderer<T>) : T {\n        const element = renderer(this.name, this.props, this.children);\n        if (this.onRender) {\n            this.onRender(element);\n        }\n        return element;\n    }\n\n    getText() : string {\n        throw new Error(`Can not get text of an element node`);\n    }\n}\n\nexport class TextNode extends Node {\n    text : string\n\n    constructor(text : string) {\n        super();\n        this.text = text;\n    }\n\n    getTag() : string {\n        throw new Error(`Can not get tag of text node`);\n    }\n\n    isTag(name : string) : boolean { // eslint-disable-line no-unused-vars\n        throw new Error(`Can not check tag of text node`);\n    }\n\n    isTextNode() : boolean {\n        return true;\n    }\n\n    render<T>(renderer : NodeRenderer<T>) : T { // eslint-disable-line no-unused-vars\n        throw new Error(`Can not render a text node`);\n    }\n\n    getText() : string {\n        return this.text;\n    }\n}\n\nexport class FragmentNode extends Node {\n    children : NodeChildrenType\n\n    constructor(children : NodeChildrenType) {\n        super();\n        this.children = children;\n    }\n\n    getTag() : string {\n        throw new Error(`Can not get tag of fragment node`);\n    }\n\n    isTag(name : string) : boolean { // eslint-disable-line no-unused-vars\n        throw new Error(`Can not check tag of fragment node`);\n    }\n\n    isFragmentNode() : boolean {\n        return true;\n    }\n\n    render<T>(renderer : NodeRenderer<T>) : $ReadOnlyArray<T> { // eslint-disable-line no-unused-vars\n        throw new Error(`Can not render a fragment node`);\n    }\n\n    getText() : string {\n        throw new Error(`Can not get text of a fragment node`);\n    }\n}\n\ntype JsxChildType = $ReadOnlyArray<JsxChildType> | NodeType | string;\ntype NullableJsxChildType = $ReadOnlyArray<NullableJsxChildType> | NodeType | string | null | void;\n\nfunction normalizeChild(child : NullableJsxChildType) : NodeType | void {\n    if (typeof child === 'string') {\n        return new TextNode(child);\n\n    } else if (child instanceof ElementNode || child instanceof TextNode || child instanceof FragmentNode) {\n        return child;\n\n    } else if (Array.isArray(child)) {\n        return new FragmentNode(normalizeChildren(child)); // eslint-disable-line no-use-before-define\n\n    } else if (child === null || typeof child === 'undefined') {\n        return; // eslint-disable-line no-useless-return\n\n    } else {\n        throw new Error(`Child node must be string or instance of jsx-pragmatic node; got ${ typeof child }`);\n    }\n}\n\nfunction normalizeChildren(children : $ReadOnlyArray<NullableJsxChildType>) : NodeChildrenType {\n    const result = [];\n\n    for (const child of children) {\n        const normalizedChild = normalizeChild(child);\n\n        if (!normalizedChild) {\n            continue;\n        }\n\n        if (normalizedChild instanceof FragmentNode) {\n            for (const subchild of normalizedChild.children) {\n                result.push(subchild);\n            }\n        } else {\n            result.push(normalizedChild);\n        }\n    }\n\n    return result;\n}\n\ntype JSXElementBuilder<P : NodePropsType> = (\n    element : string,\n    props : P | null,\n    ...children : $ReadOnlyArray<NullableJsxChildType>\n) => ElementNode;\n\ntype JSXElementFunctionBuilder<P : NodePropsType> = (\n    element : (P, $ReadOnlyArray<JsxChildType>) => ElementNode,\n    props : P | null,\n    ...children : $ReadOnlyArray<NullableJsxChildType>\n) => ElementNode;\n\ntype JSXTextFunctionBuilder<P : NodePropsType> = (\n    element : (P, $ReadOnlyArray<JsxChildType>) => string | TextNode,\n    props : P | null,\n    ...children : $ReadOnlyArray<NullableJsxChildType>\n) => TextNode;\n\ntype JSXFragmentFunctionBuilder<P : NodePropsType> = (\n    element : (P, $ReadOnlyArray<JsxChildType>) => FragmentNode | $ReadOnlyArray<NullableJsxChildType>,\n    props : P | null,\n    ...children : $ReadOnlyArray<NullableJsxChildType>\n) => FragmentNode;\n\ntype JSXEmptyFunctionBuilder<P : NodePropsType> = (\n    element : (P, $ReadOnlyArray<JsxChildType>) => null | void,\n    props : P | null,\n    ...children : $ReadOnlyArray<NullableJsxChildType>\n) => void;\n\ntype JSXBuilder<P : NodePropsType> = JSXElementBuilder<P> & JSXElementFunctionBuilder<P> & JSXTextFunctionBuilder<P> & JSXFragmentFunctionBuilder<P> & JSXEmptyFunctionBuilder<P>;\n\nexport const node : JSXBuilder<*> = <P : NodePropsType>(element, props : P | null, ...children) => {\n    if (typeof element === 'string') {\n        return new ElementNode(element, props || {}, normalizeChildren(children));\n    }\n\n    if (typeof element === 'function') {\n        // $FlowFixMe\n        return normalizeChild(element(props || {}, normalizeChildren(children)));\n    }\n    \n    throw new TypeError(`Expected jsx Element to be a string or a function`);\n};\n\nexport function Fragment(props : NodePropsType, ...children : $ReadOnlyArray<JsxChildType>) : FragmentNode {\n    \n    if (props && Object.keys(props).length) {\n        throw new Error(`Do not pass props to Fragment`);\n    }\n\n    return new FragmentNode(normalizeChildren(children));\n}\n","/* @flow */\n\nimport type { NodeChildrenType, NodePropsType, NodeRendererFactory, NodeRenderer } from '../node';\n\nconst ELEMENT_TAG = {\n    HTML:    'html',\n    IFRAME:  'iframe',\n    SCRIPT:  'script',\n    NODE:    'node',\n    DEFAULT: 'default'\n};\n\nconst ELEMENT_PROP = {\n    INNER_HTML: 'innerHTML',\n    EL:         'el'\n};\n\nfunction fixScripts(el : HTMLElement, doc : Document = window.document) {\n    for (const script of el.querySelectorAll('script')) {\n        const parentNode = script.parentNode;\n\n        if (!parentNode) {\n            continue;\n        }\n\n        const newScript = doc.createElement('script');\n        // $FlowFixMe\n        newScript.text = script.textContent;\n        parentNode.replaceChild(newScript, script);\n    }\n}\n\ntype CreateElementOptions = {|\n    doc : Document,\n    name : string,\n    props : NodePropsType\n|};\n\nconst CREATE_ELEMENT : { [string] : (CreateElementOptions) => HTMLElement } = {\n\n    [ ELEMENT_TAG.NODE ]: ({ props } : CreateElementOptions) => {\n        if (!props[ELEMENT_PROP.EL]) {\n            throw new Error(`Must pass ${ ELEMENT_PROP.EL } prop to ${ ELEMENT_TAG.NODE } element`);\n        }\n\n        if (Object.keys(props).length > 1) {\n            throw new Error(`Must not pass any prop other than ${ ELEMENT_PROP.EL } to ${ ELEMENT_TAG.NODE } element`);\n        }\n\n        // $FlowFixMe\n        return props[ELEMENT_PROP.EL];\n    },\n\n    [ ELEMENT_TAG.DEFAULT ]: ({ name, doc } : CreateElementOptions) => {\n        return doc.createElement(name);\n    }\n};\n\nfunction createElement({ doc, name, props } : CreateElementOptions) : HTMLElement {\n    const elementCreator = CREATE_ELEMENT[name] || CREATE_ELEMENT[ELEMENT_TAG.DEFAULT];\n    return elementCreator({ name, props, doc });\n}\n\ntype AddPropsOptions = {|\n    el : HTMLElement,\n    props : NodePropsType\n|};\n\nfunction addProps({ el, props } : AddPropsOptions) {\n    for (const prop of Object.keys(props)) {\n        const val = props[prop];\n\n        if (val === null || typeof val === 'undefined' || prop === ELEMENT_PROP.EL || prop === ELEMENT_PROP.INNER_HTML) {\n            continue;\n        }\n\n        if (prop.match(/^on[A-Z][a-z]/) && typeof val === 'function') {\n            el.addEventListener(prop.slice(2).toLowerCase(), val);\n        } else if (typeof val === 'string' || typeof val === 'number') {\n            el.setAttribute(prop, val.toString());\n\n        } else if (typeof val === 'boolean') {\n            if (val === true) {\n                el.setAttribute(prop, '');\n            }\n\n        } else {\n            throw new TypeError(`Can not render prop ${ prop } of type ${ typeof val }`);\n        }\n    }\n}\n\ntype AddChildrenOptions = {|\n    el : HTMLElement,\n    name : string,\n    children : NodeChildrenType,\n    doc : Document,\n    props : NodePropsType,\n    domRenderer : NodeRenderer<HTMLElement>\n|};\n\nconst ADD_CHILDREN : { [string] : (AddChildrenOptions) => void } = {\n\n    [ ELEMENT_TAG.IFRAME ]: ({ el, children } : AddChildrenOptions) => {\n        const firstChild = children[0];\n\n        if (children.length > 1 || !firstChild.isElementNode()) {\n            throw new Error(`Expected only single element node as child of ${ ELEMENT_TAG.IFRAME } element`);\n        }\n\n        if (!firstChild.isTag(ELEMENT_TAG.HTML)) {\n            throw new Error(`Expected element to be inserted into frame to be html, got ${ firstChild.getTag() }`);\n        }\n    \n        el.addEventListener('load', () => {\n\n            // $FlowFixMe\n            const win = el.contentWindow;\n    \n            if (!win) {\n                throw new Error(`Expected frame to have contentWindow`);\n            }\n\n            const doc = win.document;\n            const docElement = doc.documentElement;\n\n            while (docElement.children && docElement.children.length) {\n                docElement.removeChild(docElement.children[0]);\n            }\n\n            // eslint-disable-next-line no-use-before-define\n            const child = firstChild.render(dom({ doc }));\n        \n            while (child.children.length) {\n                docElement.appendChild(child.children[0]);\n            }\n        });\n    },\n\n    [ ELEMENT_TAG.SCRIPT ]: ({ el, children } : AddChildrenOptions) => {\n        const firstChild = children[0];\n\n        if (children.length !== 1 || !firstChild.isTextNode()) {\n            throw new Error(`Expected only single text node as child of ${ ELEMENT_TAG.SCRIPT } element`);\n        }\n        \n        // $FlowFixMe\n        el.text = firstChild.getText();\n    },\n\n    [ ELEMENT_TAG.DEFAULT ]: ({ el, children, doc, domRenderer } : AddChildrenOptions) => {\n        for (const child of children) {\n            if (child.isTextNode()) {\n                el.appendChild(doc.createTextNode(child.getText()));\n            } else {\n                el.appendChild(child.render(domRenderer));\n            }\n        }\n    }\n};\n\nfunction addChildren({ el, name, props, children, doc, domRenderer } : AddChildrenOptions) {\n    if (props.hasOwnProperty(ELEMENT_PROP.INNER_HTML)) {\n\n        if (children.length >= 1) {\n            throw new Error(`Expected no children to be passed when ${ ELEMENT_PROP.INNER_HTML } prop is set`);\n        }\n\n        const html = props[ELEMENT_PROP.INNER_HTML];\n\n        if (typeof html !== 'string') {\n            throw new TypeError(`${ ELEMENT_PROP.INNER_HTML } prop must be string`);\n        }\n\n        if (name === ELEMENT_TAG.SCRIPT) {\n            // $FlowFixMe\n            el.text = html;\n        } else {\n            el.innerHTML = html;\n            fixScripts(el, doc);\n        }\n\n    } else {\n        const addChildrenToElement = ADD_CHILDREN[name] || ADD_CHILDREN[ELEMENT_TAG.DEFAULT];\n        addChildrenToElement({ el, name, props, children, doc, domRenderer });\n    }\n}\n\n\nexport const dom : NodeRendererFactory<HTMLElement> = ({ doc = document } : { doc? : Document } = {}) => {\n    const domRenderer = (name, props, children) => {\n        const el = createElement({ name, props, doc });\n        addProps({ el, props });\n        addChildren({ el, name, props, children, doc, domRenderer });\n        return el;\n    };\n\n    return domRenderer;\n};\n","/* @flow */\n/* @jsx node */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { node, dom } from 'jsx-pragmatic/src';\nimport { destroyElement } from 'belter/src';\n\nimport { type RenderOptionsType } from '../../parent';\nimport { EVENT } from '../../constants';\n\nconst CLASS = {\n    VISIBLE:   'visible',\n    INVISIBLE: 'invisible'\n};\n\nexport function defaultContainerTemplate<P>({ uid, frame, prerenderFrame, doc, event, dimensions : { width, height } } : RenderOptionsType<P>) : ?HTMLElement {\n\n    if (!frame || !prerenderFrame) {\n        return;\n    }\n\n    prerenderFrame.classList.add(CLASS.VISIBLE);\n    frame.classList.add(CLASS.INVISIBLE);\n\n    event.on(EVENT.RENDERED, () => {\n        prerenderFrame.classList.remove(CLASS.VISIBLE);\n        prerenderFrame.classList.add(CLASS.INVISIBLE);\n\n        frame.classList.remove(CLASS.INVISIBLE);\n        frame.classList.add(CLASS.VISIBLE);\n\n        setTimeout(() => {\n            destroyElement(prerenderFrame);\n        }, 1);\n    });\n\n    return (\n        <div id={ uid }>\n            <style>\n                {`\n                    #${ uid } {\n                        display: inline-block;\n                        position: relative;\n                        width: ${ width };\n                        height: ${ height };\n                    }\n\n                    #${ uid } > iframe {\n                        display: inline-block;\n                        position: absolute;\n                        width: 100%;\n                        height: 100%;\n                        top: 0;\n                        left: 0;\n                        transition: opacity .2s ease-in-out;\n                    }\n\n                    #${ uid } > iframe.${ CLASS.INVISIBLE } {\n                        opacity: 0;\n                    }\n\n                    #${ uid } > iframe.${ CLASS.VISIBLE } {\n                        opacity: 1;\n                    }\n                `}\n            </style>\n\n            <node el={ frame } />\n            <node el={ prerenderFrame } />\n        </div>\n    ).render(dom({ doc }));\n}\n","/* @flow */\n/** @jsx node */\n/* eslint react/react-in-jsx-scope: off */\n\nimport { node, dom } from 'jsx-pragmatic/src';\n\nimport { type RenderOptionsType } from '../../parent';\n\nexport function defaultPrerenderTemplate<P>({ doc } : RenderOptionsType<P>) : HTMLElement {\n    return (\n        <html>\n            <body>\n                <style>\n                    {`\n                        .spinner {\n                            position: fixed;\n                            max-height: 60vmin;\n                            max-width: 60vmin;\n                            height: 40px;\n                            width: 40px;\n                            top: 50%;\n                            left: 50%;\n                            box-sizing: border-box;\n                            border: 3px solid rgba(0, 0, 0, .2);\n                            border-top-color: rgba(33, 128, 192, 0.8);\n                            border-radius: 100%;\n                            animation: rotation .7s infinite linear;\n                        }\n\n                        @keyframes rotation {\n                            from {\n                                transform: translateX(-50%) translateY(-50%) rotate(0deg);\n                            }\n                            to {\n                                transform: translateX(-50%) translateY(-50%) rotate(359deg);\n                            }\n                        }\n                    `}\n                </style>\n                <div class=\"spinner\" />\n            </body>\n        </html>\n    ).render(dom({ doc }));\n}\n","/* @flow */\n\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { once, noop } from 'belter/src';\nimport { isWindow, type CrossDomainWindowType } from 'cross-domain-utils/src';\nimport { ProxyWindow, toProxyWindow } from 'post-robot/src';\n\nimport { PROP_SERIALIZATION } from '../constants';\n\nexport type EventHandlerType<T> = (T) => void | ZalgoPromise<void>;\n\nexport type timeoutPropType = number;\nexport type windowPropType = CrossDomainWindowType | ProxyWindow;\nexport type closePropType = () => ZalgoPromise<void>;\nexport type focusPropType = () => ZalgoPromise<void>;\nexport type resizePropType = ({ width : ?number, height : ?number }) => ZalgoPromise<void>;\n\nexport type onDisplayPropType = EventHandlerType<void>;\nexport type onRenderedPropType = EventHandlerType<void>;\nexport type onRenderPropType = EventHandlerType<void>;\nexport type onClosePropType = EventHandlerType<void>;\nexport type onErrorPropType = EventHandlerType<mixed>;\nexport type onPropsPropType<P> = ((PropsType<P>) => void) => void; // eslint-disable-line no-use-before-define\n\nexport type PropsInputType<P> = {\n    timeout? : timeoutPropType,\n    window? : windowPropType,\n\n    onDisplay? : onDisplayPropType,\n    onRendered? : onRenderedPropType,\n    onRender? : onRenderPropType,\n    onClose? : onClosePropType,\n    onError? : onErrorPropType,\n    onProps? : onPropsPropType<P>\n} & P;\n\nexport type PropsType<P> = {|\n    timeout? : timeoutPropType,\n    window? : ?windowPropType,\n    close? : ?closePropType,\n    focus? : ?focusPropType,\n    resize? : ?resizePropType,\n\n    onDisplay : onDisplayPropType,\n    onRendered : onRenderedPropType,\n    onRender : onRenderPropType,\n    onClose : onClosePropType,\n    onError : onErrorPropType,\n    onProps : onPropsPropType<P>\n|} & P;\n\ntype PropDefinitionType<T, P, S : string> = {|\n    type : S,\n    alias? : string,\n    value? : ({ props : P, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => ?T,\n    required? : boolean,\n    queryParam? : boolean | string | ({ value : T }) => (string | ZalgoPromise<string>),\n    queryValue? : ({ value : T }) => (ZalgoPromise<mixed> | mixed),\n    sendToChild? : boolean,\n    allowDelegate? : boolean,\n    validate? : ({ value : T, props : PropsInputType<P> }) => void,\n    decorate? : ({ value : T, props : PropsType<P>, state : Object, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void> }) => T,\n    default? : ({ props : P, state : Object }) => ?T,\n    sameDomain? : boolean,\n    serialization? : $Values<typeof PROP_SERIALIZATION>,\n    childDecorate? : ({ value : T, close : () => ZalgoPromise<void>, focus : () => ZalgoPromise<void>, onError : (mixed) => ZalgoPromise<void>, onProps : ((PropsType<P>) => void) => void, resize : ({ width : ?number, height : ?number }) => ZalgoPromise<void> }) => ?T\n|};\n\nexport type BooleanPropDefinitionType<T : boolean, P> = PropDefinitionType<T, P, 'boolean'>;\nexport type StringPropDefinitionType<T : string, P> = PropDefinitionType<T, P, 'string'>;\nexport type NumberPropDefinitionType<T : number, P> = PropDefinitionType<T, P, 'number'>;\nexport type FunctionPropDefinitionType<T : Function, P> = PropDefinitionType<T, P, 'function'>;\nexport type ArrayPropDefinitionType<T : Array<*>, P> = PropDefinitionType<T, P, 'array'>; // eslint-disable-line flowtype/no-mutable-array\nexport type ObjectPropDefinitionType<T : Object, P> = PropDefinitionType<T, P, 'object'>;\n\nexport type MixedPropDefinitionType<P> = BooleanPropDefinitionType<*, P> | StringPropDefinitionType<*, P> | NumberPropDefinitionType<*, P> | FunctionPropDefinitionType<*, P> | ObjectPropDefinitionType<*, P> | ArrayPropDefinitionType<*, P>;\n\nexport type UserPropsDefinitionType<P> = {\n    [string] : MixedPropDefinitionType<P>\n};\n\n// eslint-disable-next-line flowtype/require-exact-type\nexport type BuiltInPropsDefinitionType<P> = {\n    timeout : NumberPropDefinitionType<timeoutPropType, P>,\n    window : ObjectPropDefinitionType<windowPropType, P>,\n    close : FunctionPropDefinitionType<closePropType, P>,\n    focus : FunctionPropDefinitionType<focusPropType, P>,\n    resize : FunctionPropDefinitionType<resizePropType, P>,\n\n    onDisplay : FunctionPropDefinitionType<onDisplayPropType, P>,\n    onRendered : FunctionPropDefinitionType<onRenderedPropType, P>,\n    onRender : FunctionPropDefinitionType<onRenderPropType, P>,\n    onClose : FunctionPropDefinitionType<onClosePropType, P>,\n    onError : FunctionPropDefinitionType<onErrorPropType, P>,\n    onProps : FunctionPropDefinitionType<onPropsPropType<P>, P>\n};\n\nconst defaultNoop = () => noop;\nconst decorateOnce = ({ value }) => once(value);\n\nexport function getBuiltInProps<P>() : BuiltInPropsDefinitionType<P> {\n    return {\n        window: {\n            type:          'object',\n            sendToChild:   false,\n            required:      false,\n            allowDelegate: true,\n            validate({ value } : { value : CrossDomainWindowType | ProxyWindow }) {\n                if (!isWindow(value) && !ProxyWindow.isProxyWindow(value)) {\n                    throw new Error(`Expected Window or ProxyWindow`);\n                }\n            },\n            decorate({ value } : { value : CrossDomainWindowType | ProxyWindow }) : ProxyWindow {\n                return toProxyWindow(value);\n            }\n        },\n\n        timeout: {\n            type:        'number',\n            required:    false,\n            sendToChild: false\n        },\n\n        close: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ close }) => close\n        },\n\n        focus: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ focus }) => focus\n        },\n\n        resize: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ resize }) => resize\n        },\n\n        onDisplay: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onRendered: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onRender: {\n            type:        'function',\n            required:    false,\n            sendToChild: false,\n            default:     defaultNoop,\n            decorate:    decorateOnce\n        },\n\n        onClose: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            allowDelegate: true,\n            default:       defaultNoop,\n            decorate:      decorateOnce\n        },\n\n        onError: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            childDecorate: ({ onError }) => onError\n        },\n\n        onProps: {\n            type:          'function',\n            required:      false,\n            sendToChild:   false,\n            default:       defaultNoop,\n            childDecorate: ({ onProps }) => onProps\n        }\n    };\n}\n","/* @flow */\n/* eslint max-lines: 0 */\n\nimport { on, send, bridge, toProxyWindow } from 'post-robot/src';\nimport { ZalgoPromise } from 'zalgo-promise/src';\nimport { isWindow, getDomainFromUrl, type CrossDomainWindowType, isSameTopWindow, getDomain, matchDomain, isSameDomain } from 'cross-domain-utils/src';\nimport { isRegex, noop, isElement } from 'belter/src';\n\nimport { ChildComponent, getChildPayload } from '../child';\nimport { ParentComponent, type RenderOptionsType, type ParentHelpers } from '../parent';\nimport { DelegateComponent } from '../delegate';\nimport { CONTEXT, POST_MESSAGE, WILDCARD, DEFAULT_DIMENSIONS } from '../constants';\nimport { react, angular, vue, angular2 } from '../drivers';\nimport type { CssDimensionsType, StringMatcherType } from '../types';\n\nimport { validate } from './validate';\nimport { defaultContainerTemplate, defaultPrerenderTemplate } from './templates';\nimport { getBuiltInProps, type UserPropsDefinitionType, type BuiltInPropsDefinitionType, type PropsInputType, type PropsType, type MixedPropDefinitionType } from './props';\n\ntype LoggerPayload = { [string] : ?string };\n\n// eslint-disable-next-line flowtype/require-exact-type\ntype Logger = {\n    debug : (event : string, payload? : LoggerPayload) => void,\n    info : (event : string, payload? : LoggerPayload) => void,\n    warn : (event : string, payload? : LoggerPayload) => void,\n    error : (event : string, payload? : LoggerPayload) => void\n};\n\n/*  Component\n    ---------\n\n    This is the spec for the component. The idea is, when I call zoid.create(), it will create a new instance\n    of Component with the blueprint needed to set up ParentComponents and ChildComponents.\n\n    This is the one portion of code which is required by -- and shared to -- both the parent and child windows, and\n    contains all of the configuration needed for them to set themselves up.\n*/\n\nexport type ComponentOptionsType<P> = {|\n\n    tag : string,\n\n    url : string | ({ props : PropsType<P> }) => string,\n    domain? : string | RegExp,\n    bridgeUrl? : string,\n\n    props? : UserPropsDefinitionType<P>,\n\n    dimensions? : CssDimensionsType,\n    autoResize? : { width? : boolean, height? : boolean, element? : string },\n\n    allowedParentDomains? : StringMatcherType,\n\n    attributes? : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    },\n\n    defaultContext? : $Values<typeof CONTEXT>,\n\n    containerTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n    prerenderTemplate? : (RenderOptionsType<P>) => ?HTMLElement,\n\n    validate? : ({ props : PropsInputType<P> }) => void,\n\n    logger? : Logger\n|};\n\ntype ZoidRenderer = {|\n    render : (container? : string | HTMLElement, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>,\n    renderTo : (target : CrossDomainWindowType, container? : string, context? : $Values<typeof CONTEXT>) => ZalgoPromise<void>\n|};\n\nexport type ZoidComponentInstance<P> = {| ...ParentHelpers<P>, ...ZoidRenderer |};\n\nexport type ZoidComponent<P> = {|\n    (PropsInputType<P>) : ZoidComponentInstance<P>,\n    driver : (string, mixed) => mixed,\n    isChild : () => boolean,\n    xprops? : PropsType<P>,\n    canRenderTo : (CrossDomainWindowType) => ZalgoPromise<boolean>\n|};\n\nexport class Component<P> {\n\n    tag : string\n    name : string\n    \n    url : string | ({ props : PropsType<P> }) => string\n    domain : void | string | RegExp\n    bridgeUrl : void | string\n\n    props : UserPropsDefinitionType<P>\n    builtinProps : BuiltInPropsDefinitionType<P>\n\n    dimensions : CssDimensionsType\n    autoResize : void | { width? : boolean, height? : boolean, element? : string }\n\n    allowedParentDomains : StringMatcherType\n\n    defaultContext : $Values<typeof CONTEXT>\n    \n    attributes : {\n        iframe? : { [string] : string },\n        popup? : { [string] : string }\n    }\n\n    containerTemplate : (RenderOptionsType<P>) => ?HTMLElement\n    prerenderTemplate : ?(RenderOptionsType<P>) => ?HTMLElement\n\n    validate : void | ({ props : PropsInputType<P> }) => void\n\n    driverCache : { [string] : mixed }\n\n    xprops : ?PropsType<P>\n\n    logger : Logger\n\n    propNames : $ReadOnlyArray<string>\n\n    constructor(options : ComponentOptionsType<P>) {\n        validate(options);\n\n        // The tag name of the component. Used by some drivers (e.g. angular) to turn the component into an html element,\n        // e.g. <my-component>\n\n        this.tag = options.tag;\n        this.name = this.tag.replace(/-/g, '_');\n\n        this.allowedParentDomains = options.allowedParentDomains || WILDCARD;\n\n        if (Component.components[this.tag]) {\n            throw new Error(`Can not register multiple components with the same tag: ${ this.tag }`);\n        }\n\n        // A json based spec describing what kind of props the component accepts. This is used to validate any props before\n        // they are passed down to the child.\n\n        this.builtinProps = getBuiltInProps();\n        this.props = options.props || {};\n\n        // The dimensions of the component, e.g. { width: '300px', height: '150px' }\n\n        const { width = DEFAULT_DIMENSIONS.WIDTH, height = DEFAULT_DIMENSIONS.HEIGHT } = options.dimensions || {};\n        this.dimensions = { width, height };\n\n        this.url = options.url;\n        this.domain = options.domain;\n        this.bridgeUrl = options.bridgeUrl;\n\n        this.attributes = options.attributes || {};\n        this.attributes.iframe = this.attributes.iframe || {};\n        this.attributes.popup = this.attributes.popup || {};\n\n        this.defaultContext = options.defaultContext || CONTEXT.IFRAME;\n\n        this.autoResize = options.autoResize;\n\n        // $FlowFixMe\n        this.containerTemplate = options.containerTemplate || (__ZOID__.__DEFAULT_CONTAINER__ ? defaultContainerTemplate : null);\n        this.prerenderTemplate = options.prerenderTemplate || (__ZOID__.__DEFAULT_PRERENDER__ ? defaultPrerenderTemplate : null);\n\n        this.validate = options.validate;\n\n        this.logger = options.logger || {\n            debug: noop,\n            info:  noop,\n            warn:  noop,\n            error: noop\n        };\n\n        this.registerChild();\n        this.listenDelegate();\n\n        Component.components[this.tag] = this;\n    }\n\n    getPropNames() : $ReadOnlyArray<string> {\n        if (this.propNames) {\n            return this.propNames;\n        }\n\n        const propNames = Object.keys(this.props);\n        for (const key of Object.keys(this.builtinProps)) {\n            if (propNames.indexOf(key) === -1) {\n                propNames.push(key);\n            }\n        }\n\n        this.propNames = propNames;\n        return propNames;\n    }\n\n    // $FlowFixMe\n    getPropDefinition(name : string) : MixedPropDefinitionType<P> {\n        // $FlowFixMe\n        return this.props[name] || this.builtinProps[name];\n    }\n\n    driver(name : string, dep : mixed) : mixed {\n        if (__ZOID__.__FRAMEWORK_SUPPORT__) {\n            const drivers = { react, angular, vue, angular2 };\n\n            if (!drivers[name]) {\n                throw new Error(`Could not find driver for framework: ${ name }`);\n            }\n    \n            this.driverCache = this.driverCache || {};\n    \n            if (!this.driverCache[name]) {\n                this.driverCache[name] = drivers[name].register(this, dep);\n            }\n    \n            return this.driverCache[name];\n        } else {\n            throw new Error(`Driver support not enabled`);\n        }\n    }\n\n    registerChild() {\n        if (this.isChild()) {\n            if (window.xprops) {\n                throw new Error(`Can not register ${ this.name } as child - can not attach multiple components to the same window`);\n            }\n\n            const child = new ChildComponent(this);\n            window.xprops = this.xprops = child.getProps();\n        }\n    }\n\n    listenDelegate() {\n        on(`${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`, () => {\n            return true;\n        });\n\n        on(`${ POST_MESSAGE.DELEGATE }_${ this.name }`, ({ source, data: { context, props, overrides } }) => {\n            const delegate = new DelegateComponent(this, source, { context, props, overrides });\n            return delegate.getDelegate();\n        });\n    }\n\n    canRenderTo(win : CrossDomainWindowType) : ZalgoPromise<boolean> {\n        return send(win, `${ POST_MESSAGE.ALLOW_DELEGATE }_${ this.name }`).then(({ data }) => {\n            return data;\n        }).catch(() => {\n            return false;\n        });\n    }\n\n    getUrl(props : PropsType<P>) : string {\n        if (typeof this.url === 'function') {\n            return this.url({ props });\n        }\n\n        return this.url;\n    }\n\n    getInitialDomain(props : PropsType<P>) : string {\n        if (this.domain && typeof this.domain === 'string') {\n            return this.domain;\n        }\n\n        return getDomainFromUrl(this.getUrl(props));\n    }\n\n    getDomain(props : PropsType<P>) : string | RegExp {\n        if (isRegex(this.domain)) {\n            // $FlowFixMe\n            return this.domain;\n        }\n\n        return this.getInitialDomain(props);\n    }\n\n    getBridgeUrl() : ?string {\n        if (this.bridgeUrl) {\n            return this.bridgeUrl;\n        }\n    }\n\n    isChild() : boolean {\n        const payload = getChildPayload();\n        return Boolean(payload && payload.tag === this.tag);\n    }\n\n    getDefaultContainer<T : (string | HTMLElement)>(context : $Values<typeof CONTEXT>, container? : T) : T {\n        if (container) {\n            if (typeof container !== 'string' && !isElement(container)) {\n                throw new TypeError(`Expected string or element selector to be passed`);\n            }\n\n            return container;\n        }\n\n        if (context === CONTEXT.POPUP) {\n            // $FlowFixMe\n            return 'body';\n        }\n\n        throw new Error(`Expected element to be passed to render iframe`);\n    }\n\n    getDefaultContext(context : ?$Values<typeof CONTEXT>, props : PropsInputType<P>) : $Values<typeof CONTEXT> {\n        if (props.window) {\n            return toProxyWindow(props.window).getType();\n        }\n\n        if (context) {\n            if (context !== CONTEXT.IFRAME && context !== CONTEXT.POPUP) {\n                throw new Error(`Unrecognized context: ${ context }`);\n            }\n            \n            return context;\n        }\n\n        return this.defaultContext;\n    }\n\n    init(props : PropsInputType<P>) : ZoidComponentInstance<P> {\n\n        // $FlowFixMe\n        props = props || {};\n        \n        const parent = new ParentComponent(this, props);\n\n        const render = (target, container, context) => ZalgoPromise.try(() => {\n            if (!isWindow(target)) {\n                throw new Error(`Must pass window to renderTo`);\n            }\n\n            context = this.getDefaultContext(context, props);\n            container = this.getDefaultContainer(context, container);\n            return parent.render(target, container, context);\n        });\n\n        return {\n            ...parent.getHelpers(),\n            render:   (container, context) => render(window, container, context),\n            renderTo: (target, container, context) => render(target, container, context)\n        };\n    }\n\n    checkAllowRender(target : CrossDomainWindowType, domain : string | RegExp, container : string | HTMLElement) {\n        if (target === window) {\n            return;\n        }\n\n        if (!isSameTopWindow(window, target)) {\n            throw new Error(`Can only renderTo an adjacent frame`);\n        }\n\n        const origin = getDomain();\n\n        if (!matchDomain(domain, origin) && !isSameDomain(target)) {\n            throw new Error(`Can not render remotely to ${ domain.toString() } - can only render to ${ origin }`);\n        }\n\n        if (container && typeof container !== 'string') {\n            throw new Error(`Container passed to renderTo must be a string selector, got ${ typeof container } }`);\n        }\n    }\n\n    log(event : string, payload? : LoggerPayload) {\n        this.logger.info(`${ this.name }_${ event }`, payload);\n    }\n\n    static components : { [string] : Component<*> } = {}\n    static activeComponents : Array<ParentComponent<*> | DelegateComponent<*>> = [] // eslint-disable-line flowtype/no-mutable-array\n\n    registerActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        Component.activeComponents.push(instance);\n    }\n\n    destroyActiveComponent<Q>(instance : ParentComponent<Q> | DelegateComponent<Q>) {\n        Component.activeComponents.splice(Component.activeComponents.indexOf(instance), 1);\n    }\n\n    static destroyAll() : ZalgoPromise<void> {\n        if (bridge) {\n            bridge.destroyBridges();\n        }\n\n        const results = [];\n\n        while (Component.activeComponents.length) {\n            results.push(Component.activeComponents[0].destroy());\n        }\n\n        return ZalgoPromise.all(results).then(noop);\n    }\n}\n\nexport type ComponentDriverType<P, T : mixed> = {|\n    register : (Component<P>, T) => mixed\n|};\n\nexport function create<P>(options : ComponentOptionsType<P>) : ZoidComponent<P> {\n    const component : Component<P> = new Component(options);\n\n    const init = (props) => component.init(props);\n    init.driver = (name, dep) => component.driver(name, dep);\n    init.isChild = () => component.isChild();\n    init.canRenderTo = (win) => component.canRenderTo(win);\n    init.xprops = component.xprops;\n\n    // $FlowFixMe\n    return init;\n}\n\nexport function destroyAll() : ZalgoPromise<void> {\n    return Component.destroyAll();\n}\n","/* @flow */\n\nimport { isPerc, isPx, values } from 'belter/src';\n\nimport { CONTEXT, PROP_TYPE } from '../constants';\n\nimport type { ComponentOptionsType } from './index';\n\nfunction validatePropDefinitions<P>(options : ComponentOptionsType<P>) {\n\n    if (options.props && !(typeof options.props === 'object')) {\n        throw new Error(`Expected options.props to be an object`);\n    }\n\n    const PROP_TYPE_LIST = values(PROP_TYPE);\n\n    if (options.props) {\n        for (const key of Object.keys(options.props)) {\n\n            // $FlowFixMe\n            const prop = options.props[key];\n\n            if (!prop || !(typeof prop === 'object')) {\n                throw new Error(`Expected options.props.${ key } to be an object`);\n            }\n\n            if (!prop.type) {\n                throw new Error(`Expected prop.type`);\n            }\n\n            if (PROP_TYPE_LIST.indexOf(prop.type) === -1) {\n                throw new Error(`Expected prop.type to be one of ${ PROP_TYPE_LIST.join(', ') }`);\n            }\n\n            if (prop.required && prop.default) {\n                throw new Error(`Required prop can not have a default value`);\n            }\n\n            if (prop.type === PROP_TYPE.FUNCTION && prop.queryParam && !prop.queryValue) {\n                throw new Error(`Do not pass queryParam for function prop`);\n            }\n        }\n    }\n}\n\n// eslint-disable-next-line complexity\nexport function validate<P>(options : ?ComponentOptionsType<P>) { // eslint-ignore-line\n\n    if (!options) {\n        throw new Error(`Expected options to be passed`);\n    }\n\n    // eslint-disable-next-line security/detect-unsafe-regex, unicorn/no-unsafe-regex\n    if (!options.tag || !options.tag.match(/^([a-z0-9]+-)+[a-z0-9]+$/)) {\n        throw new Error(`Invalid options.tag: ${ options.tag }`);\n    }\n\n    validatePropDefinitions(options);\n\n    if (options.dimensions) {\n        if (options.dimensions && !isPx(options.dimensions.width) && !isPerc(options.dimensions.width)) {\n            throw new Error(`Expected options.dimensions.width to be a px or % string value`);\n        }\n\n        if (options.dimensions && !isPx(options.dimensions.height) && !isPerc(options.dimensions.height)) {\n            throw new Error(`Expected options.dimensions.height to be a px or % string value`);\n        }\n    }\n\n    if (options.defaultContext) {\n        if (options.defaultContext !== CONTEXT.IFRAME && options.defaultContext !== CONTEXT.POPUP) {\n            throw new Error(`Unsupported context type: ${ options.defaultContext || 'unknown' }`);\n        }\n    }\n\n    if (!options.url) {\n        throw new Error(`Must pass url`);\n    }\n\n    if (typeof options.url !== 'string' && typeof options.url !== 'function') {\n        throw new TypeError(`Expected url to be string or function`);\n    }\n\n    if (options.prerenderTemplate && typeof options.prerenderTemplate !== 'function') {\n        throw new Error(`Expected options.prerenderTemplate to be a function`);\n    }\n\n    if ((options.containerTemplate || !__ZOID__.__DEFAULT_CONTAINER__) && typeof options.containerTemplate !== 'function') {\n        throw new Error(`Expected options.containerTemplate to be a function`);\n    }\n}\n","/* @flow */\n\nexport { PopupOpenError } from 'belter/src';\nexport { create, destroyAll, Component } from './component';\nexport type { ZoidComponent, ZoidComponentInstance } from './component';\nexport { PROP_TYPE, PROP_SERIALIZATION, CONTEXT } from './constants';\n"],"sourceRoot":""}